{"id": "elainewan/econ_micro_11.json", "question": "John's Lawn Mowing Service is a small business that acts as a price-taker (i.e., MR = P). The prevailing market price of lawn mowing is $20 per acre. John's costs are given by total cost = 0.1q^2 + 10q + 50, where q = the number of acres John chooses to cut a day. Calculate John's maximum daily profit.", "prediction": 200.0, "answer": 200, "rationale": "def solve():\n    # Let's define the cost function\n    def cost(q):\n        return 0.1*q**2 + 10*q + 50\n    # Let's define the revenue function\n    def revenue(q):\n        return 20*q\n    # Let's define the profit function\n    def profit(q):\n        return revenue(q) - cost(q)\n    # Let's find the maximum profit\n    max_profit = 0\n    for q in range(1, 1000):\n        curr_profit = profit(q)\n        if curr_profit > max_profit:\n            max_profit = curr_profit\n    return max_profit", "answer_type": "integer"}
{"id": "elainewan/econ_micro_12.json", "question": "Suppose there are 100 identical firms in a perfectly competitive industry. Each firm has a short-run total cost function of the form C(q) = \frac{1}{300}q^3 + 0.2q^2 + 4q + 10. Suppose market demand is given by Q = -200P + 8,000. What will be the short-run equilibrium price?", "prediction": 3000.0, "answer": 25, "rationale": "def solve():\n    # Let's define the demand function\n    def demand(P):\n        return -200*P + 8000\n    \n    # Let's define the total cost function\n    def total_cost(q):\n        return (1/300)*q**3 + 0.2*q**2 + 4*q + 10\n    \n    # Let's define the inverse demand function\n    def inverse_demand(Q):\n        return (Q - 8000)/200\n    \n    # Let's define the inverse total cost function\n    def inverse_total_cost(C):\n        return (C - 10)/(1/300)\n    \n    # Let's calculate the equilibrium quantity\n    q_eq = inverse_total_cost(inverse_demand(demand(0)))\n    \n    # Let's calculate the equilibrium price\n    p_eq = inverse_demand(demand(q_eq))\n    \n    return p_eq", "answer_type": "integer"}
{"id": "elainewan/econ_micro_12_2.json", "question": "The perfectly competitive videotape-copying industry is composed of many firms that can copy five tapes per day at an average cost of $10 per tape. Each firm must also pay a royalty to film studios, and the per-film royalty rate (r) is an increasing function of total industry output (Q): r = 0.002Q. Demand is given by Q = D(P) = 1,050 - 50P. Assuming the industry is in long-run equilibrium, what will be the equilibrium price of copied tapes?", "prediction": null, "answer": 11, "rationale": "def solve():\n    # Define the demand function\n    def demand(P):\n        return 1050 - 50*P\n    # Define the royalty rate function\n    def royalty_rate(Q):\n        return 0.002*Q\n    # Define the total cost function\n    def total_cost(Q):\n        return 10*Q + royalty_rate(Q)\n    # Define the inverse demand function\n    def inverse_demand(Q):\n        return 1050/50 - Q/50\n    # Calculate the equilibrium quantity\n    Q = demand(inverse_demand(Q))\n    # Calculate the equilibrium price\n    P = inverse_demand(Q)\n    return P", "answer_type": "integer"}
{"id": "elainewan/econ_micro_14.json", "question": "A monopolist can produce at constant average and marginal costs of AC = MC = 5. The firm faces a market demand curve given by Q = 53 - P. Calculate the consumer surplus obtained by consumers under perfect competition (where price = marginal cost)?", "prediction": 120.0, "answer": 1152, "rationale": "def solve():\n    # Let's define the demand function\n    def demand(p):\n        return 53 - p\n    # Let's define the consumer surplus function\n    def consumer_surplus(p):\n        return (p * demand(p)) / 2\n    # Let's calculate the consumer surplus\n    return consumer_surplus(5)", "answer_type": "integer"}
{"id": "elainewan/econ_micro_14_2.json", "question": "A single firm monopolizes the entire market for widgets and can produce at constant average and marginal costs of AC = MC = 10. Originally, the firm faces a market demand curve given by Q = 60 - P. Calculate the profit-maximizing price for the firm.", "prediction": 35, "answer": 35, "rationale": "def solve():\n    # Let's define the demand curve\n    demand_curve = lambda p: 60 - p\n    # Let's define the profit function\n    profit_function = lambda p: demand_curve(p) * p - 10 * demand_curve(p)\n    # Let's find the maximum profit\n    max_profit = max(profit_function(p) for p in range(1, 61))\n    # Let's find the corresponding price\n    price = [p for p in range(1, 61) if profit_function(p) == max_profit][0]\n    return price", "answer_type": "integer"}
{"id": "elainewan/econ_micro_14_3.json", "question": "Suppose a monopoly market has a demand function in which quantity demanded depends not only on market price (P) but also on the amount of advertising the firm does (A, measured in dollars). The specific form of this function is Q = (20 - P)(1 + 0.1A - 0.01A^2). The monopolistic firm's cost function is given by C = 10Q + 15 + A. Suppose there is no advertising (A = 0). What output will the profit-maximizing firm choose?", "prediction": 55, "answer": 5, "rationale": "def solve():\n    # Define the demand function\n    def demand(P, A):\n        return (20 - P)*(1 + 0.1*A - 0.01*A**2)\n    # Define the cost function\n    def cost(Q, A):\n        return 10*Q + 15 + A\n    # Set A = 0\n    A = 0\n    # Calculate the profit-maximizing output\n    Q = 20 - (15 + A)/10\n    return Q\ndef solve():\n    # Let's write the program step by step\n    # Define a function to calculate the sum of the first n natural numbers\n    def sum_n(n):\n        return n*(n+1)//2\n    return sum_n(10)", "answer_type": "integer"}
{"id": "elainewan/econ_micro_15.json", "question": "Suppose instead that there are two firms in the market facing no costs of production and a demand curve given by Q = 150 - P for their identical products. Suppose the two firms choose prices simultaneously as in the Bertrand model. Compute the prices in the nash equilibrium.", "prediction": 150.0, "answer": 0, "rationale": "def solve():\n    # Let's define the demand curve\n    demand_curve = lambda p: 150 - p\n    # Let's define the inverse demand curve\n    inverse_demand_curve = lambda q: 150 - q\n    # Let's define the Nash equilibrium price\n    nash_equilibrium_price = (demand_curve(0) + inverse_demand_curve(0)) / 2\n    return nash_equilibrium_price", "answer_type": "integer"}
{"id": "elainewan/econ_micro_16.json", "question": "Suppose there are 8,000 hours in a year (actually there are 8,760) and that an individual has a potential market wage of $5 per hour. Suppose a rich uncle dies and leaves the individual an annual income of $4,000 per year. If he or she devotes 75 percent of full income to leisure, how many hours will be worked?", "prediction": 55, "answer": 1400, "rationale": "def solve():\n    # Let's define the variables\n    potential_wage = 5\n    annual_income = 4000\n    leisure_percentage = 0.75\n    hours_in_year = 8000\n    # Let's calculate the hours worked\n    hours_worked = (annual_income * (1 - leisure_percentage)) / potential_wage\n    return hours_worked\ndef solve():\n    # Let's write the program step by step\n    # Let's define the sum function\n    def sum_numbers(n):\n        # define the base case\n        if n == 0:\n            return 0\n        else:\n            # use the recursive formula\n            return n + sum_numbers(n-1)\n    return sum_numbers(10)", "answer_type": "integer"}
{"id": "elainewan/econ_micro_16_2.json", "question": "Carl the clothier owns a large garment factory on an isolated island. Carl's factory is the only source of employment for most of the islanders, and thus Carl acts as a monopsonist. The supply curve for garment workers is given by l = 80w, where l is the number of workers hired and w is their hourly wage. Assume also that Carl's labor demand (marginal revenue product) curve is given by l = 400 - 40MRP_l. How many workers will Carl hire to maximize his profits?", "prediction": null, "answer": 200, "rationale": "def solve():\n    # Let's define the equation for Carl's profit\n    def profit(l, w):\n        return l*w - (400 - 40*l)*w\n    # Let's define the equation for the supply curve\n    def supply(w):\n        return 80*w\n    # Let's define the equation for the demand curve\n    def demand(l):\n        return 400 - 40*l\n    # Let's find the optimal number of workers\n    l_opt = (400 - 80*w)/80\n    # Let's return the optimal number of workers\n    return l_opt", "answer_type": "integer"}
{"id": "elainewan/econ_micro_16_3.json", "question": "Universal Fur is located in Clyde, Baffin Island, and sells high-quality fur bow ties throughout the world at a price of $5 each. The production function for fur bow ties (q) is given by q = 240x - 2x^2, where x is the quantity of pelts used each week. Pelts are supplied only by Dan's Trading Post, which obtains them by hiring Eskimo trappers at a rate of $10 per day. Dan's weekly production function for pelts is given by x = \\sqrt{l}, where l represents the number of days of Eskimo time used each week. For a quasi-competitive case in which both Universal Fur and Dan's Trading Post act as price-takers for pelts, what will be the equilibrium price (p_x) for pelt?", "prediction": 3.162277660168379, "answer": 600, "rationale": "def solve():\n    # Let's define the production function for fur bow ties\n    def q(x):\n        return 240*x - 2*x**2\n    # Let's define the production function for pelts\n    def x(l):\n        return l**0.5\n    # Let's define the equilibrium price for pelts\n    p_x = 10/x(10)\n    return p_x", "answer_type": "integer"}
{"id": "elainewan/econ_micro_17.json", "question": "As scotch whiskey ages, its value increases. One dollar of scotch at year 0 is worth $V(t) = exp{2\\sqrt{t} - 0.15t}$ dollars at time t. If the interest rate is 5 percent, after how many years should a person sell scotch in order to maximize the PDV of this sale?", "prediction": 25, "answer": 25, "rationale": "def solve():\n    # Let's define the function V(t)\n    def V(t):\n        return math.exp(2*math.sqrt(t) - 0.15*t)\n    # Let's define the function PDV\n    def PDV(t):\n        return V(t)*math.exp(-0.05*t)\n    # Let's find the maximum PDV\n    max_PDV = 0\n    max_t = 0\n    for t in range(1, 1000):\n        if PDV(t) > max_PDV:\n            max_PDV = PDV(t)\n            max_t = t\n    return max_t", "answer_type": "integer"}
{"id": "elainewan/econ_micro_18.json", "question": "Clare manages a piano store. Her utility function is given by Utility = w - 100, where w is the total of all monetary payments to her and 100 represents the monetary equivalent of the disutility of exerting effort to run the store. Her next best alternative to managing the store gives her zero utility. The store's revenue depends on random factors, with an equal chance of being $1,000 or $400. If shareholders offered to share half of the store's revenue with her, what would her expected utility be?", "prediction": 600.0, "answer": 250, "rationale": "def solve():\n    # Let's define the utility function\n    def utility(w):\n        return w - 100\n    # Let's define the expected utility\n    expected_utility = 0.5 * (utility(1000) + utility(400))\n    return expected_utility", "answer_type": "integer"}
{"id": "elainewan/econ_micro_18_2.json", "question": "Suppose there is a 50-50 chance that an individual with logarithmic utility from wealth and with a current wealth of $20,000 will suffer a loss of $10,000 from a car accident. Insurance is competitively provided at actuarially fair rates. Compute the utility if the individual buys full insurance.", "prediction": 0.5493061443340554, "answer": 9.616, "rationale": "def solve():\n    # Let's define the utility function\n    def utility(wealth):\n        return math.log(wealth)\n    # Let's define the expected utility\n    expected_utility = 0.5 * utility(20000) + 0.5 * utility(10000)\n    # Let's define the expected utility with insurance\n    expected_utility_with_insurance = 0.5 * utility(20000) + 0.5 * utility(30000)\n    # Let's calculate the utility with insurance\n    utility_with_insurance = expected_utility_with_insurance - expected_utility\n    return utility_with_insurance", "answer_type": "float"}
{"id": "elainewan/econ_micro_18_3.json", "question": "Suppose 100 cars will be offered on the used-car market. Let 50 of them be good cars, each worth $10,000 to a buyer, and let 50 be lemons, each worth only $2,000. Suppose that there are enough buyers relative to sellers that competition among them leads cars to be sold at their maximum willingness to pay. What would the market equilibrium price for good cars be if sellers value good cars at $6,000?", "prediction": 55, "answer": 6000, "rationale": "def solve():\n    # Let's define the market equilibrium price\n    market_equilibrium_price = (50 * 10000 + 50 * 2000) / 100\n    # Let's calculate the difference between the market equilibrium price and the seller's value\n    difference = market_equilibrium_price - 6000\n    # Let's return the difference\n    return difference\ndef solve():\n    # Let's write the program step by step\n    # Let's define a function to calculate the sum of the first n natural numbers\n    def sum_of_n_natural_numbers(n):\n        # Let's define the base case\n        if n == 1:\n            return 1\n        else:\n            # Let's use the recursive formula\n            return n + sum_of_n_natural_numbers(n-1)\n    # Let's return the sum of the first 10 natural numbers\n    return sum_of_n_natural_numbers(10)", "answer_type": "integer"}
{"id": "elainewan/econ_micro_19.json", "question": "A firm in a perfectly competitive industry has patented a new process for making widgets. The new process lowers the firm's average cost, meaning that this firm alone (although still a price taker) can earn real economic profits in the long run. Suppose a government study has found that the firm's new process is polluting the air and estimates the social marginal cost of widget production by this firm to be SMC = 0.5q. If the market price is $20, what should be the rate of a government-imposed excise tax to bring about optimal level of production?", "prediction": null, "answer": 4, "rationale": "def solve():\n    # Let's define the market price\n    market_price = 20\n    # Let's define the social marginal cost\n    smc = 0.5 * q\n    # Let's calculate the optimal level of production\n    optimal_level = (market_price - smc) / 2\n    # Let's calculate the rate of the government-imposed excise tax\n    rate = (market_price - optimal_level) / optimal_level\n    return rate", "answer_type": "integer"}
{"id": "elainewan/econ_micro_3.json", "question": "Does the utility function U(x,y) = xy/(x+y) has a convex indifference curve?", "prediction": "False", "answer": true, "rationale": "\n\nFirst, we need to calculate the second order partial derivatives of U(x,y) with respect to x and y.\n\nThe partial derivative of U(x,y) with respect to x is: Ux = y/(x+y)^2\n\nThe partial derivative of U(x,y) with respect to y is: Uy = x/(x+y)^2\n\nNow, we need to calculate the second order partial derivatives of U(x,y) with respect to x and y.\n\nThe second order partial derivative of U(x,y) with respect to x is: Uxx = -2y/(x+y)^3\n\nThe second order partial derivative of U(x,y) with respect to y is: Uyy = -2x/(x+y)^3\n\nFinally, we need to check if UxxUyy - (Uxy)^2 is greater than 0.\n\nUxxUyy - (Uxy)^2 = (2x)(2y)/(x+y)^6 - (xy)^2/(x+y)^4 = 0\n\nTherefore, the answer is False.", "answer_type": "bool"}
{"id": "elainewan/econ_micro_4.json", "question": "Each day Paul, who is in third grade, eats lunch at school. He likes only Twinkies (t) and soda (s), and these provide him a utility of utility = U(t,s) = \\sqrt{ts}. If Twinkies cost $0.10 each and soda costs $0.25 per cup, Paul's mom gives him $1, how many Twinkies should Paul buy to maximize utility?", "prediction": 5, "answer": 5, "rationale": "def solve():\n    # Define the utility function\n    def utility(t, s):\n        return (t*s)**0.5\n    # Define the cost function\n    def cost(t, s):\n        return 0.1*t + 0.25*s\n    # Define the objective function\n    def obj_func(t, s):\n        return utility(t, s) - cost(t, s)\n    # Define the constraint\n    def constraint(t, s):\n        return cost(t, s) <= 1\n    # Define the optimization problem\n    def optimize(t, s):\n        if constraint(t, s):\n            return obj_func(t, s)\n        else:\n            return -float('inf')\n    # Use the brute force method to find the optimal solution\n    max_utility = -float('inf')\n    for t in range(0, 11):\n        for s in range(0, 5):\n            if constraint(t, s):\n                curr_utility = obj_func(t, s)\n                if curr_utility > max_utility:\n                    max_utility = curr_utility\n                    optimal_t = t\n                    optimal_s = s\n    return optimal_t", "answer_type": "integer"}
{"id": "elainewan/econ_micro_7.json", "question": "George is seen to place an even-money $100,000 bet on the Bulls to win the NBA Finals. If George has a logarithmic utility-of-wealth function and if his current wealth is $1,000,000, what must he believe is the minimum probability that the Bulls will win?", "prediction": 0.9733626053749542, "answer": 0.525, "rationale": "def solve():\n    # Let's define the logarithmic utility-of-wealth function\n    def log_utility(wealth):\n        return math.log(wealth)\n    # Let's calculate the expected utility\n    expected_utility = log_utility(1000000) + log_utility(100000)\n    # Let's calculate the minimum probability\n    min_prob = expected_utility / (log_utility(1000000) + log_utility(200000))\n    return min_prob", "answer_type": "float"}
{"id": "elainewan/econ_micro_7_2.json", "question": "Ms. Fogg is planning an around-the-world trip on which she plans to spend $10,000. The utility from the trip is a function of how much she actually spends on it (Y), given by U(Y) = ln Y. If there is a 25 percent probability that Ms. Fogg will lose $1,000 of her cash on the trip, what is the trip\u2019s expected utility?", "prediction": 9.184000243061726, "answer": 9.184, "rationale": "def solve():\n    # Let's define the expected utility function\n    def expected_utility(y):\n        return (0.75 * (math.log(y)) + 0.25 * (math.log(y-1000)))\n    return expected_utility(10000)", "answer_type": "float"}
{"id": "elainewan/math_abstact_algebra_2.json", "question": "Every published book has a ten-digit ISBN-10 number that is usually of the form x_1 - x_2 x_3 x_4 - x_5 x_6 x_7 x_8 x_9 - x_{10} (where each x_i is a single digit). The first 9 digits identify the book. The last digit x_{10} is a check digit, it is chosen so that 10 x_1 + 9 x_2 + 8 x_3 + 7 x_4 + 6 x_5 + 5 x_6 + 4 x_7 + 3 x_8 + 2 x_9 + x_{10} = 0 (mod 11). Is 3-540-90518-9 a valid ISBN number?", "prediction": "True", "answer": true, "rationale": " We can calculate the sum of the first 9 digits: 3 + 5 + 4 + 0 + 9 + 0 + 5 + 1 + 8 = 34. Then, we need to find the value of x_{10} so that 10 x_1 + 9 x_2 + 8 x_3 + 7 x_4 + 6 x_5 + 5 x_6 + 4 x_7 + 3 x_8 + 2 x_9 + x_{10} = 0 (mod 11). We can solve this equation by subtracting 34 from both sides, which gives us -34 + x_{10} = 0 (mod 11). Therefore, x_{10} = 34 (mod 11). Since 34 is not greater than 11, the value of x_{10} is 7. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "elainewan/math_abstact_algebra_7.json", "question": "What is the order of group Z_{18}?", "prediction": 18, "answer": 18, "rationale": "def solve():\n    # The order of a group is the number of elements in the group\n    return 18", "answer_type": "integer"}
{"id": "elainewan/math_abstact_algebra_7_2.json", "question": "Let M be the inverse of the group element ((3, 5), (4, 6)) in Z_7. What is M[0][1]?", "prediction": 2.5, "answer": 6, "rationale": "def solve():\n    # Let's define a function to calculate the inverse of a matrix\n    def inverse(matrix):\n        # calculate the determinant of the matrix\n        det = matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]\n        # calculate the inverse of the matrix\n        inv_matrix = [[matrix[1][1] / det, -matrix[0][1] / det], [-matrix[1][0] / det, matrix[0][0] / det]]\n        return inv_matrix\n    # Let's define the matrix M\n    M = [[3, 5], [4, 6]]\n    # Let's calculate the inverse of M\n    inv_M = inverse(M)\n    # Let's return the value of M[0][1]\n    return inv_M[0][1]", "answer_type": "integer"}
{"id": "elainewan/math_abstact_algebra_7_3.json", "question": "What is the order of the group S_3 * Z_2?", "prediction": 55, "answer": 12, "rationale": "def solve():\n    # The order of the group S_3 * Z_2 is the product of the orders of the two groups\n    # The order of S_3 is 6 and the order of Z_2 is 2\n    return 6 * 2\ndef solve():\n    # Let's write the program step by step\n    # We can use a loop to calculate the sum\n    sum = 0\n    for i in range(1, 11):\n        sum += i\n    return sum", "answer_type": "integer"}
{"id": "elainewan/math_abstact_algebra_7_4.json", "question": "G = Q, and G is under the operation a * b = a + b + 3. Is G a group?", "prediction": "False", "answer": true, "rationale": "\n\nFirst, G must be closed under the operation a * b = a + b + 3. This means that for any two elements a and b in G, the result of a * b must also be in G.\n\nSecond, G must have an identity element. This means that there must be an element e in G such that for any element a in G, a * e = e * a = a.\n\nThird, G must have an inverse element for each element. This means that for any element a in G, there must be an element b in G such that a * b = b * a = e.\n\nTherefore, the answer is False.", "answer_type": "bool"}
{"id": "elainewan/math_abstact_algebra_7_5.json", "question": "What is the order of the element 5 in U_8?", "prediction": 8, "answer": 2, "rationale": "def solve():\n    # Let's define a function to calculate the order of an element\n    def order(a, n):\n        # define the base case\n        if a**n % n == 1:\n            return n\n        else:\n            # use the recursive formula\n            return order(a, n-1)\n    return order(5, 8)", "answer_type": "integer"}
{"id": "elainewan/math_abstact_algebra_7_6.json", "question": "What are the generators of the additive cyclic group Z?", "prediction": null, "answer": [1, -1], "rationale": "def solve():\n    # Let's define a function to generate the generators\n    def generate_generators(n):\n        # define the list to store the generators\n        generators = []\n        # loop through all the numbers from 1 to n\n        for i in range(1, n):\n            # check if i is a generator\n            if gcd(i, n) == 1:\n                # if i is a generator, add it to the list\n                generators.append(i)\n        return generators\n    return generate_generators(n)", "answer_type": "list of integer"}
{"id": "elainewan/math_abstact_algebra_7_7.json", "question": "The function f: U_5 \to U_5 given by f(x) = x^2 is a homomorphism. What is K_f?", "prediction": [0, 1], "answer": [4, 1], "rationale": "def solve():\n    # K_f is the kernel of the homomorphism f\n    # The kernel of a homomorphism is the set of all elements in the domain that map to the identity element in the codomain\n    # In this case, the domain is U_5 and the codomain is U_5\n    # The identity element in U_5 is 0\n    # Therefore, the kernel of f is the set of all elements in U_5 that map to 0\n    # U_5 = {0, 1, 2, 3, 4}\n    # f(x) = x^2\n    # Therefore, the kernel of f is {0, 1}\n    return {0, 1}", "answer_type": "list of integer"}
{"id": "elainewan/math_abstact_algebra_7_8.json", "question": "Are groups Z_4 * Z_2 and D_4 isomorphic?", "prediction": "True", "answer": false, "rationale": " \n\nFirst, Z_4 * Z_2 is a direct product of two cyclic groups, Z_4 and Z_2. \n\nSecond, D_4 is a dihedral group of order 8. \n\nThird, the order of Z_4 * Z_2 is 8, which is the same as the order of D_4. \n\nTherefore, the answer is True.", "answer_type": "bool"}
{"id": "elainewan/math_algebra_1.json", "question": "Find the x value of the solutions to the linear system: 7x - y = 15x, -6x + 8y = 15y.", "prediction": -2.4, "answer": 0, "rationale": "def solve():\n    # Let's define the linear system\n    a = 7\n    b = -1\n    c = -6\n    d = 8\n    e = 15\n    f = 15\n    # Let's solve the linear system\n    x = (e*b - a*f) / (a*d - b*c)\n    return x", "answer_type": "integer"}
{"id": "elainewan/math_algebra_1_2.json", "question": "Suppose the graph of a polynomial f(t) = a + bt + ct^2 passes through points (1, -1), (2, 3), and (3, 13). What is f(-1)?", "prediction": -7, "answer": 9, "rationale": "def solve():\n    # Let's define the polynomial function\n    def f(t):\n        return a + b*t + c*t**2\n    # Let's define the coefficients\n    a = -1\n    b = 4\n    c = -2\n    # Let's return the value of f(-1)\n    return f(-1)", "answer_type": "integer"}
{"id": "elainewan/math_algebra_2.json", "question": "Is the transformation [[-1, 0], [0, -1]] invertible?", "prediction": "True", "answer": true, "rationale": " First, we need to calculate the determinant of the transformation. The determinant of [[-1, 0], [0, -1]] is 1. Since the determinant is not 0, the transformation is invertible. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "elainewan/math_algebra_3.json", "question": "Is W = {[x, y] in R^2: x >= 0 and y >= 0} a subspace of R^2?", "prediction": "True", "answer": false, "rationale": " First, W must contain the zero vector. Second, W must be closed under addition. Third, W must be closed under scalar multiplication. \n\nSince W contains the zero vector, is closed under addition and scalar multiplication, it is a subspace of R^2. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "elainewan/math_algebra_3_2.json", "question": "Are the vectors v_1 = [1,2,3], v_2 = [4,5,6], v_3 = [7,8,9] linearly independent?", "prediction": "False", "answer": false, "rationale": " First, we need to check if the vectors are linearly independent. To do this, we need to calculate the determinant of the matrix formed by the vectors. The determinant of the matrix is 0, which means that the vectors are linearly dependent. Therefore, the answer is False.", "answer_type": "bool"}
{"id": "elainewan/math_algebra_3_3.json", "question": "What is the vector that spans the kernel of A = [[1, 0, 2, 4], [0, 1, -3, -1], [3, 4, -6, 8], [0, -1, 3, 4]]?", "prediction": null, "answer": [-2, 3, 1, 0], "rationale": "def solve():\n    # Let's import the numpy library\n    import numpy as np\n    # Let's define the matrix A\n    A = np.array([[1, 0, 2, 4], [0, 1, -3, -1], [3, 4, -6, 8], [0, -1, 3, 4]])\n    # Let's calculate the kernel of A\n    kernel = np.linalg.null_space(A)\n    return kernel", "answer_type": "list of integer"}
{"id": "elainewan/math_algebra_3_4.json", "question": "Are the vectors [1, 2], [2, 3], and [3, 4] linearly independent?", "prediction": "True", "answer": false, "rationale": "\n\nFirst, we need to check if the vectors are linearly dependent. To do this, we need to calculate the determinant of the matrix formed by the vectors. The matrix is:\n\n$\\begin{bmatrix}\n1 & 2 \\\\\n2 & 3 \\\\\n3 & 4\n\\end{bmatrix}$\n\nThe determinant of this matrix is -2. Since the determinant is not 0, the vectors are linearly independent. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "elainewan/math_algebra_3_5.json", "question": "Consider an m * n matrix A and an n * m matrix B (with n != m) such that AB = I_m. Are the columns of A linearly independent?", "prediction": "True", "answer": false, "rationale": "\n\nSince AB = I_m, then A must be an m * m matrix. Since A is an m * m matrix, then the columns of A must be linearly independent.\n\nTherefore, the answer is True.", "answer_type": "bool"}
{"id": "elainewan/math_algebra_3_6.json", "question": "Consider the basis B of R^2 consisting of vectors v_1 = [3,1] and v_2 = [-1, 3]. If x = [10, 10], find the B-coordinate vector of x", "prediction": [40, 20], "answer": [4, 2], "rationale": "def solve():\n    # Define the basis vectors\n    v1 = [3,1]\n    v2 = [-1,3]\n    # Define the vector x\n    x = [10,10]\n    # Calculate the dot product of v1 and x\n    dot_product_v1_x = v1[0]*x[0] + v1[1]*x[1]\n    # Calculate the dot product of v2 and x\n    dot_product_v2_x = v2[0]*x[0] + v2[1]*x[1]\n    # Return the B-coordinate vector of x\n    return [dot_product_v1_x, dot_product_v2_x]", "answer_type": "list of integer"}
{"id": "elainewan/math_algebra_4.json", "question": "Is the set of 3 * 3 matrices in reduced row-echelon form a subspace of R^{3 * 3}?", "prediction": "True", "answer": false, "rationale": " A subspace of R^{3 * 3} must satisfy the following conditions:\n\n1. It must contain the zero vector.\n2. It must be closed under addition.\n3. It must be closed under scalar multiplication.\n\nLet's check if the set of 3 * 3 matrices in reduced row-echelon form satisfies these conditions.\n\n1. Yes, the zero matrix is in reduced row-echelon form.\n2. Yes, the sum of two matrices in reduced row-echelon form is also in reduced row-echelon form.\n3. Yes, the scalar multiple of a matrix in reduced row-echelon form is also in reduced row-echelon form.\n\nTherefore, the answer is True.", "answer_type": "bool"}
{"id": "elainewan/math_algebra_4_2.json", "question": "Let V be the space of all infinite sequences of real numbers. Consider the transformation T(x_0, x_1, x_2, ...) = (x_1, x_2, x_3, ...) from V to V. Is the sequence (1,2,3,...) in the image of T?", "prediction": "True", "answer": true, "rationale": " T(x_0, x_1, x_2, ...) = (x_1, x_2, x_3, ...). If we apply this transformation to the sequence (1,2,3,...), we get (2,3,4,...). Therefore, the answer is True.", "answer_type": "bool"}
{"id": "elainewan/math_algebra_4_3.json", "question": "Is the transformation T(M) = [[1, 2], [3, 4]]M from R^{2*2} to R^{2*2} an isomorphism?", "prediction": "True", "answer": true, "rationale": " First, we need to check if T is a linear transformation. We can do this by checking if T(u + v) = T(u) + T(v) and T(cu) = cT(u). Since T(u + v) = [[1, 2], [3, 4]](u + v) = [[1, 2], [3, 4]]u + [[1, 2], [3, 4]]v = T(u) + T(v) and T(cu) = [[1, 2], [3, 4]]cu = c[[1, 2], [3, 4]]u = cT(u), T is a linear transformation.\n\nNext, we need to check if T is an isomorphism. We can do this by checking if T is bijective. Since T is a linear transformation, it is injective. To check if it is surjective, we need to check if the matrix [[1, 2], [3, 4]] has a non-zero determinant. The determinant of [[1, 2], [3, 4]] is -2, which is non-zero. Therefore, T is surjective and thus bijective.\n\nTherefore, the answer is True.", "answer_type": "bool"}
{"id": "elainewan/math_algebra_5.json", "question": "Find the orthogonal projection of 9e_1 onto the subspace of R^4 spanned by [2, 2, 1, 0] and [-2, 2, 0, 1].", "prediction": null, "answer": [8, 0, 2, -2], "rationale": "def solve():\n    # Let's define the vectors\n    v1 = [2, 2, 1, 0]\n    v2 = [-2, 2, 0, 1]\n    # Let's define the projection vector\n    proj_v = [9, 0, 0, 0]\n    # Let's define the dot product function\n    def dot_product(v1, v2):\n        return sum(x*y for x,y in zip(v1,v2))\n    # Let's define the projection function\n    def projection(v1, v2, proj_v):\n        # Let's calculate the projection vector\n        proj_v1 = (dot_product(v1, proj_v) / dot_product(v1, v1)) * v1\n        proj_v2 = (dot_product(v2, proj_v) / dot_product(v2, v2)) * v2\n        # Let's return the projection vector\n        return [proj_v1[0] + proj_v2[0], proj_v1[1] + proj_v2[1], proj_v1[2] + proj_v2[2], proj_v1[3] + proj_v2[3]]\n    return projection(v1, v2, proj_v)", "answer_type": "list of integer"}
{"id": "elainewan/math_algebra_6.json", "question": "For a matrix A, is the function F(A) = det A from the linear space R^{3*3} to R a linear transformation?", "prediction": "True", "answer": false, "rationale": " A linear transformation is a function that satisfies the following two conditions:\n\n1. Additivity: F(A + B) = F(A) + F(B)\n2. Homogeneity: F(cA) = cF(A)\n\nLet's check if F(A) = det A satisfies these two conditions.\n\nFor additivity, we have F(A + B) = det (A + B) = det A + det B = F(A) + F(B).\n\nFor homogeneity, we have F(cA) = det (cA) = c det A = cF(A).\n\nTherefore, the answer is True.", "answer_type": "bool"}
{"id": "elainewan/math_algebra_6_2.json", "question": "Let V be the space spanned by functions cos(2x) and sin(2x). Find the determinant of the linear transformation D(f) = f' from V to V.", "prediction": null, "answer": 4, "rationale": "def solve():\n    # Let's define the linear transformation D(f) = f'\n    def D(f):\n        return f'\n\n    # Let's define the matrix of the linear transformation\n    matrix = [[D(cos(2x)), D(sin(2x))],\n              [D(cos(2x)), D(sin(2x))]]\n\n    # Let's calculate the determinant of the matrix\n    det = np.linalg.det(matrix)\n\n    return det", "answer_type": "integer"}
{"id": "elainewan/math_algebra_6_3.json", "question": "What is the determinant of matrix [[0, 1, 2], [7, 8, 3], [6, 5, 4]]?", "prediction": -36, "answer": -36, "rationale": "def solve():\n    # Let's define a function to calculate the determinant of a matrix\n    def determinant(matrix):\n        # define the base case\n        if len(matrix) == 2:\n            return matrix[0][0]*matrix[1][1] - matrix[0][1]*matrix[1][0]\n        else:\n            # use the formula to calculate the determinant\n            det = 0\n            for i in range(len(matrix)):\n                det += (-1)**i * matrix[0][i] * determinant(get_minor(matrix, 0, i))\n            return det\n    # define a function to get the minor of a matrix\n    def get_minor(matrix, i, j):\n        return [row[:j] + row[j+1:] for row in (matrix[:i]+matrix[i+1:])]\n    # define the matrix\n    matrix = [[0, 1, 2], [7, 8, 3], [6, 5, 4]]\n    return determinant(matrix)", "answer_type": "integer"}
{"id": "elainewan/math_algebra_6_4.json", "question": "What is the determinant of the matrix A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]?", "prediction": 0, "answer": -3, "rationale": "def solve():\n    # Let's define a function to calculate the determinant of a matrix\n    def determinant(A):\n        # define the base case\n        if len(A) == 2:\n            return A[0][0]*A[1][1] - A[0][1]*A[1][0]\n        else:\n            # use the formula to calculate the determinant\n            det = 0\n            for i in range(len(A)):\n                det += (-1)**i * A[0][i] * determinant(get_minor(A, 0, i))\n            return det\n    # define a function to get the minor of a matrix\n    def get_minor(A, i, j):\n        return [row[:j] + row[j+1:] for row in (A[:i]+A[i+1:])]\n    # define the matrix\n    A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    return determinant(A)", "answer_type": "integer"}
{"id": "elainewan/math_algebra_6_5.json", "question": "What is the determinant of the matrix A = [[1, 0, 0, 0, 0, 0], [2, 7, 0, 0, 0, 0], [3, 8, 6, 0, 0, 0], [4, 9, 5, 2, 1, 4], [5, 8, 4, 0, 2, 5], [6, 7, 3, 0, 3, 6]]?", "prediction": -252, "answer": -252, "rationale": "def solve():\n    # Let's define a function to calculate the determinant of a matrix\n    def determinant(matrix):\n        # define the base case\n        if len(matrix) == 1:\n            return matrix[0][0]\n        # define the recursive case\n        else:\n            # define the sum of the determinants of the submatrices\n            sum = 0\n            # loop through the columns\n            for i in range(len(matrix)):\n                # define the submatrix\n                submatrix = []\n                # loop through the rows\n                for j in range(1, len(matrix)):\n                    # define the submatrix row\n                    submatrix_row = []\n                    # loop through the columns\n                    for k in range(len(matrix)):\n                        # check if the column is not the same as the current column\n                        if k != i:\n                            # add the element to the submatrix row\n                            submatrix_row.append(matrix[j][k])\n                    # add the submatrix row to the submatrix\n                    submatrix.append(submatrix_row)\n                # add the determinant of the submatrix to the sum\n                sum += (-1)**i * matrix[0][i] * determinant(submatrix)\n            # return the sum\n            return sum\n    # define the matrix\n    matrix = [[1, 0, 0, 0, 0, 0], [2, 7, 0, 0, 0, 0], [3, 8, 6, 0, 0, 0], [4, 9, 5, 2, 1, 4], [5, 8, 4, 0, 2, 5], [6, 7, 3, 0, 3, 6]]\n    # return the determinant of the matrix\n    return determinant(matrix)", "answer_type": "integer"}
{"id": "elainewan/math_algebra_7.json", "question": "Let A be an invertible n * n matrix and v and eigenvector of both A and B, is v necesarily an eigenvector of A + B?", "prediction": "True", "answer": true, "rationale": "\n\nA is an invertible n * n matrix, so A is non-singular.\n\nv is an eigenvector of both A and B, so Av = \u03bbv and Bv = \u03bcv.\n\nTherefore, (A + B)v = (\u03bb + \u03bc)v.\n\nThis means that v is an eigenvector of A + B.\n\nTherefore, the answer is True.", "answer_type": "bool"}
{"id": "elainewan/math_algebra_7_2.json", "question": "Is there an eigenbasis for the identity matrix I_n?", "prediction": "an eigenbasis for the identity matrix I_n", "answer": true, "rationale": " An eigenbasis is a set of eigenvectors that form a basis for a vector space. The identity matrix I_n is a square matrix with all diagonal elements equal to 1 and all other elements equal to 0.\n\nTherefore, the answer is True, there is an eigenbasis for the identity matrix I_n.", "answer_type": "bool"}
{"id": "elainewan/math_algebra_7_3.json", "question": "Does the following transformation have an eigenvector: Counterclockwise rotation through an angle of 45 degrees followed by a scaling by 2 in R^2.", "prediction": "True", "answer": false, "rationale": " A rotation by 45 degrees is a linear transformation, and a scaling by 2 is also a linear transformation. Therefore, the combination of the two is also a linear transformation. Since linear transformations have eigenvectors, the answer is yes. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "elainewan/math_algebra_7_4.json", "question": "What are the real eigenvalues of the matrix [[3, -2, 5], [1, 0, 7], [0, 0, 2]]?", "prediction": [2.0, 1.0, 2.0], "answer": [1, 2, 2], "rationale": "def solve():\n    # Let's import the numpy library\n    import numpy as np\n    # Let's define the matrix\n    matrix = np.array([[3, -2, 5], [1, 0, 7], [0, 0, 2]])\n    # Let's calculate the eigenvalues\n    eigenvalues = np.linalg.eigvals(matrix)\n    # Let's return the real eigenvalues\n    return [x.real for x in eigenvalues]", "answer_type": "list of integer"}
{"id": "elainewan/math_algebra_7_5.json", "question": "For which 2 * 2 matrices A does there exist a nonzero matrix M such that AM = MD, where D = [[2, 0], [0, 3]]? Give your answer in terms of eigenvalues of A.", "prediction": "The eigenvalues of A should be 2 and 3.", "answer": [2, 3], "rationale": "def solve():\n    # Let's define the matrix D\n    D = [[2, 0], [0, 3]]\n    # Let's define the condition for the existence of M\n    # The condition is that the eigenvalues of A should be equal to the diagonal elements of D\n    # So, the answer is that the eigenvalues of A should be 2 and 3.\n    return \"The eigenvalues of A should be 2 and 3.\"", "answer_type": "list of integer"}
{"id": "elainewan/math_algebra_additional_1.json", "question": "Let f_1, ..., f_n be polynomials. Do they span the space P of all polynomials?", "prediction": "True or False depending on the degree of the polynomials f_1, ..., f_n", "answer": false, "rationale": " If the degree of the polynomials f_1, ..., f_n is equal to the degree of the space P, then the answer is yes. Otherwise, the answer is no. Therefore, the answer is True or False depending on the degree of the polynomials f_1, ..., f_n.", "answer_type": "bool"}
{"id": "elainewan/math_calculus_1.json", "question": "Does f (x) = x2 + cx + 1 have a real root when c=0?", "prediction": "False", "answer": false, "rationale": " When c=0, f (x) = x2 + 0x + 1 = x2 + 1. This is a quadratic equation with a = 1, b = 0, c = 1. The discriminant of this equation is b2 - 4ac = 02 - 4*1*1 = -4. Since the discriminant is negative, the equation does not have real roots. Therefore, the answer is False.", "answer_type": "bool"}
{"id": "elainewan/math_calculus_10.json", "question": "A cylindrical tank of height 4 m and radius 1 m is filled with water. Water drains through a square hole of side 2 cm in the bottom. How long does it take for the tank to go from full to empty?", "prediction": 3200.815494393476, "answer": 7142, "rationale": "def solve():\n    # Let's define the constants\n    height = 4 # m\n    radius = 1 # m\n    hole_side = 0.02 # m\n    # Let's calculate the volume of the tank\n    volume = 3.14 * radius**2 * height\n    # Let's calculate the area of the hole\n    hole_area = hole_side**2\n    # Let's calculate the rate of water flow\n    rate = hole_area * 9.81 # m^3/s\n    # Let's calculate the time it takes for the tank to go from full to empty\n    time = volume / rate # s\n    return time # s", "answer_type": "integer"}
{"id": "elainewan/math_calculus_11.json", "question": "What is the limit of the sequence a_n = n/(\\sqrt{n^2 + 1})?", "prediction": null, "answer": 1, "rationale": "def solve():\n    # Let's define a function to calculate the limit\n    def limit(n):\n        # use the formula for the limit\n        return n/(n**2 + 1)**0.5\n    # Let's define a variable to store the limit\n    limit_value = 0\n    # Let's loop through the sequence\n    for i in range(1, n+1):\n        # calculate the limit\n        limit_value += limit(i)\n    # return the limit\n    return limit_value", "answer_type": "integer"}
{"id": "elainewan/math_calculus_12.json", "question": "A model rocket follows the trajectory c(t) = (80t, 200t - 4.9t^2) until it hits the ground, with t in seconds and distance in meters. Find the rocket's maximum height in meters.", "prediction": null, "answer": 2041, "rationale": "def solve():\n    # Let's define a function to calculate the maximum height\n    def max_height(t):\n        # use the given equation\n        return 200*t - 4.9*t**2\n    # Let's define a function to calculate the time when the rocket hits the ground\n    def time_to_ground(t):\n        # use the given equation\n        return 80*t\n    # Let's define a function to calculate the maximum height\n    def max_height(t):\n        # use the given equation\n        return 200*t - 4.9*t**2\n    # Let's find the time when the rocket hits the ground\n    t = 0\n    while time_to_ground(t) >= 0:\n        t += 0.01\n    # Let's calculate the maximum height\n    return max_height(t)", "answer_type": "integer"}
{"id": "elainewan/math_calculus_14.json", "question": "Does r(t) = [8 - 4t^3, 2 + 5t^2, 9t^3] parametrize a line?", "prediction": "False", "answer": false, "rationale": " First, we need to check if the vector function r(t) is a linear function. We can do this by taking the derivative of the vector function and see if it is a constant vector. Taking the derivative of r(t) gives us r'(t) = [-12t^2, 10t, 27t^2]. Since r'(t) is not a constant vector, r(t) is not a linear function. Therefore, the answer is False.", "answer_type": "bool"}
{"id": "elainewan/math_calculus_15.json", "question": "Use the linear approximation to estimate (3.99)^3 (1.01)^4 (1.98)^{-1}.", "prediction": 42.36701676895313, "answer": 33.36, "rationale": "def solve():\n    # Let's define the linear approximation function\n    def linear_approx(x):\n        return x + (x**2)/2 + (x**3)/3 + (x**4)/4 + (x**5)/5\n    # Let's calculate the result\n    result = linear_approx(3.99) * linear_approx(1.01) * linear_approx(1.98)**(-1)\n    return result", "answer_type": "float"}
{"id": "elainewan/math_calculus_16.json", "question": "Let rectangle R = [1, 2.5] * [1, 2]. Calculate the Riemann Sum S_{3,2} for \\int \\int_{R} xy dA for the integral, using the lower-left vertex of rectangles as sample points.", "prediction": 4.640625, "answer": 2.812, "rationale": "def solve():\n    # Let's define the function\n    def f(x, y):\n        return x*y\n    # Let's define the Riemann Sum\n    def riemann_sum(f, a, b, n, m):\n        # Let's define the width and height of the rectangles\n        width = (b-a)/n\n        height = (b-a)/m\n        # Let's define the sum\n        sum = 0\n        # Let's iterate over the rectangles\n        for i in range(n):\n            for j in range(m):\n                # Let's calculate the lower-left vertex of the rectangle\n                x = a + i*width\n                y = a + j*height\n                # Let's calculate the area of the rectangle\n                area = width*height\n                # Let's calculate the value of the function at the lower-left vertex\n                value = f(x, y)\n                # Let's add the product of the area and the value to the sum\n                sum += area*value\n        return sum\n    # Let's call the function\n    return riemann_sum(f, 1, 2.5, 3, 2)", "answer_type": "float"}
{"id": "elainewan/math_calculus_1_2.json", "question": "Is cos(\\pi/8) equal to (\\sqrt{2+\\sqrt{2}})/2?", "prediction": "True", "answer": true, "rationale": "\n\ncos(\\pi/8) = (1 + \\sqrt{2})/2\n\n(\\sqrt{2+\\sqrt{2}})/2 = (1 + \\sqrt{2})/2\n\nTherefore, the answer is True.", "answer_type": "bool"}
{"id": "elainewan/math_calculus_2.json", "question": "What is \\lim_{x \to 9} ((x - 9)/(\\sqrt{x} - 3))?", "prediction": null, "answer": 6, "rationale": "def solve():\n    # Let's define the function\n    def limit(x):\n        return (x - 9)/(math.sqrt(x) - 3)\n    # Let's calculate the limit\n    return limit(9)", "answer_type": "integer"}
{"id": "elainewan/math_calculus_2_10.json", "question": "Suppose g(x) is the horizontal asymptote of function f(x) = (3^x)/(1+3^{-x}). What are possible values of g(2023)?", "prediction": 164550155817497922294838391236299861450073375755268393204821647842390925231027327013362334261121620331320103763309030913468079478876131292912534405287849925398050388086112915948864401074633400938303521438749199299616760709734985020968176706423823045506812125521181906501625126248764139809149859309775005503946205345233873117543877759413080800290663648710103454942257619935794145779252608881755233525190052072122635181072663135124541473488370271996194914387527226140370348654588674423583928496254215146820091854355132427791123016158785746639390113467787479155511359359657657994685774902048284993984348079071358228625066138044679915107143471725911256235918005142179558199228978390776361829653041635359858597991589668080135604671292002216502232011320807479008984510947855839734509889294308777684372860999843038799125641278703627070576520212378036287639929422794460997576119358689859000997947442749368681111719758200965876393103683173866964089243008265159142421797058827, "answer": 0, "rationale": "def solve():\n    # Let's define the function f(x)\n    def f(x):\n        return (3**x)/(1+3**(-x))\n    # Let's define the horizontal asymptote\n    def g(x):\n        return 3**x\n    # Let's calculate the value of g(2023)\n    return g(2023)", "answer_type": "integer"}
{"id": "elainewan/math_calculus_2_11.json", "question": "Does cos(x) = x^k have a solution for k = 2023?", "prediction": "False", "answer": true, "rationale": "\n\nFirst, let's consider the equation cos(x) = x^k. We can see that the left side of the equation is a periodic function with period 2\u03c0, while the right side is a polynomial function.\n\nSecond, let's consider the value of k. Since k = 2023, it is a positive integer.\n\nTherefore, the answer is False.", "answer_type": "bool"}
{"id": "elainewan/math_calculus_2_12.json", "question": "Does 2^x +1/x = -4 have a solution?", "prediction": "False", "answer": true, "rationale": "\n\n2^x + 1/x = -4\n2^x = -4 - 1/x\n2^x = -4x - 1\n2^(-4x - 1) = 1\n\nTherefore, the answer is False.", "answer_type": "bool"}
{"id": "elainewan/math_calculus_2_13.json", "question": "What is \\lim_{x \\to 0} (x \\lfloor 1/x \rfloor)?", "prediction": null, "answer": 1, "rationale": "def solve():\n    # Let's define a function to calculate the limit\n    def limit(x):\n        # define the floor function\n        floor = lambda x: int(x)\n        # use the limit formula\n        return floor(1/x)\n    return limit(0)", "answer_type": "integer"}
{"id": "elainewan/math_calculus_2_2.json", "question": "\\lim_{x \\to 1}(1/(x - 1) - c/(x^3 - 1)) exists. What is the value of c?", "prediction": null, "answer": 3, "rationale": "def solve():\n    # Let's define the function\n    def f(x, c):\n        return (1/(x - 1) - c/(x**3 - 1))\n    # Let's define the limit\n    limit = 1\n    # Let's define the value of c\n    c = 0\n    # Let's calculate the limit\n    while True:\n        if f(limit, c) == 0:\n            break\n        else:\n            c += 0.001\n    return c", "answer_type": "integer"}
{"id": "elainewan/math_calculus_2_3.json", "question": "$\\lim_{x \\to c}((x^2 - 5x - 6) / (x - c))$ exists. What is the value of c?", "prediction": 2.5, "answer": [-1, 6], "rationale": "def solve():\n    # Let's define the function\n    def lim_func(x, c):\n        return ((x**2 - 5*x - 6) / (x - c))\n    # Let's define the derivative of the function\n    def lim_func_deriv(x, c):\n        return ((2*x - 5) / (x - c))\n    # Let's find the value of c\n    c = 5/2\n    return c", "answer_type": "list of integer"}
{"id": "elainewan/math_calculus_2_4.json", "question": "What is \\lim_{x \\to 1} ((x - 1) sin((\\pi)/(x - 1))?", "prediction": -3.141592653054819e-05, "answer": 0, "rationale": "def solve():\n    # Let's define a function to calculate the limit\n    def limit(x):\n        return (x - 1) * math.sin(math.pi / (x - 1))\n    # Let's define a small value for x\n    x = 0.00001\n    # Let's calculate the limit\n    limit_value = limit(x)\n    # Let's return the limit value\n    return limit_value", "answer_type": "integer"}
{"id": "elainewan/math_calculus_2_5.json", "question": "What is \\lim_{x \\to (\\pi)/2} (cos(x)cos(tan(x)))?", "prediction": null, "answer": 0, "rationale": "def solve():\n    # Let's define a function to calculate the limit\n    def limit(x):\n        # use the limit formula\n        return cos(x)*cos(tan(x))\n    # Let's define a small value for x\n    x = 0.001\n    # Let's calculate the limit\n    lim = limit(x)\n    # Let's increase the value of x\n    while x < (math.pi/2):\n        x += 0.001\n        # Let's calculate the limit\n        lim = limit(x)\n    return lim", "answer_type": "integer"}
{"id": "elainewan/math_calculus_2_6.json", "question": "What is \\lim_{x \\to 0} (csc(x) - cot(x))?", "prediction": 55, "answer": 0, "rationale": "def solve():\n    # Let's define the function\n    def f(x):\n        return 1/math.sin(x) - 1/math.tan(x)\n    # Let's use the limit definition\n    return (f(0.001) - f(0))/0.001\ndef solve():\n    # Let's write the program step by step\n    # Let's define a function to calculate the sum\n    def sum_natural_numbers(n):\n        # base case\n        if n == 1:\n            return 1\n        else:\n            # use the recursive formula\n            return n + sum_natural_numbers(n-1)\n    return sum_natural_numbers(10)", "answer_type": "integer"}
{"id": "elainewan/math_calculus_2_7.json", "question": "\\lim_{x \\to c} |f(x)| = 0. What is \\lim_{x \\to c} f(x)?", "prediction": null, "answer": 0, "rationale": "def solve():\n    # Let's define the limit function\n    def limit(x, c):\n        if abs(f(x)) < 0.00001:\n            # define the base case\n            return f(x)\n        else:\n            # use the limit formula\n            return limit(x + 0.00001, c)\n    return limit(c, c)", "answer_type": "integer"}
{"id": "elainewan/math_calculus_2_8.json", "question": "Does \\lim_{x \\to 0} (cos(mx - 1)/(x^2) = -(m^2)/2 for m = 2?", "prediction": "-2", "answer": true, "rationale": "\n\nFirst, we can rewrite the limit as \\lim_{x \\to 0} \\frac{cos(2x - 1)}{x^2}.\n\nThen, we can use L'H\u00f4pital's rule to evaluate the limit.\n\nWe can differentiate the numerator and denominator with respect to x, which gives us \\lim_{x \\to 0} \\frac{-2sin(2x - 1)}{2x}.\n\nFinally, we can evaluate the limit, which gives us -2.\n\nTherefore, the answer is -2.", "answer_type": "bool"}
{"id": "elainewan/math_calculus_2_9.json", "question": "Suppose g(x) is the horizontal asymptote of function f(x) = (\\sqrt{36 x^2 + 7}) / (9x + 4). What are possible values of g(2023)?", "prediction": null, "answer": [0.6667, -0.6667], "rationale": "def solve():\n    # Let's define the function f(x)\n    def f(x):\n        return (36 * x**2 + 7)**(1/2) / (9 * x + 4)\n    # Let's calculate the limit of f(x) as x approaches infinity\n    g = float(limit(f(x), x, oo))\n    # Let's calculate the value of g(2023)\n    return g(2023)", "answer_type": "list of float"}
{"id": "elainewan/math_calculus_3_3.json", "question": "Let g(x) = 1 / (1 + x^{3/2}), what is g'(x) when x = 1?", "prediction": -0.75, "answer": -0.375, "rationale": "def solve():\n    # Let's define the function g(x)\n    def g(x):\n        return 1 / (1 + x**(3/2))\n    # Let's define the derivative of g(x)\n    def g_prime(x):\n        return -3 * x**(1/2) / (1 + x**(3/2))**2\n    return g_prime(1)", "answer_type": "float"}
{"id": "elainewan/math_calculus_3_4.json", "question": "Let h(x) = (x^{-1/2} + 2x)(7 - x^{-1}). What is h'(x) when x = 4?", "prediction": 13.609375, "answer": 13.609, "rationale": "def solve():\n    # Let's define the function h(x)\n    def h(x):\n        return (x**(-1/2) + 2*x)*(7 - x**(-1))\n    # Let's define the derivative of h(x)\n    def h_prime(x):\n        return (-1/2*x**(-3/2) + 2)*(7 - x**(-1)) - (x**(-1/2) + 2*x)*(-x**(-2))\n    return h_prime(4)", "answer_type": "float"}
{"id": "elainewan/math_calculus_3_5.json", "question": "Let h(x) = 1/(\\sqrt{x} + 1). What is h''(x) when x = 1?", "prediction": 0.0234375, "answer": 0.125, "rationale": "def solve():\n    # Let's define the function h(x)\n    def h(x):\n        return 1/(math.sqrt(x) + 1)\n    # Let's define the derivative of h(x)\n    def h_prime(x):\n        return -1/(2*(math.sqrt(x) + 1)**3)\n    # Let's define the second derivative of h(x)\n    def h_prime_prime(x):\n        return 3/(4*(math.sqrt(x) + 1)**5)\n    # Let's return the value of h''(1)\n    return h_prime_prime(1)", "answer_type": "float"}
{"id": "elainewan/math_calculus_3_6.json", "question": "Find acceleration in m/(min^2) at time t = 5 min of a helicopter whose height is s(t) = 300t - 4t^3 m.", "prediction": -216.01439971163927, "answer": -120, "rationale": "def solve():\n    # Define the function for height\n    def s(t):\n        return 300*t - 4*t**3\n    # Calculate the acceleration\n    acceleration = (s(5+0.001) - s(5))/0.001\n    # Convert the unit to m/(min^2)\n    acceleration = acceleration * 60**2\n    return acceleration", "answer_type": "integer"}
{"id": "elainewan/math_calculus_3_8.json", "question": "Julian is jogging around a circular track of radius 50 m. In a coordinate system with its origin at the center of the track, Julian's x-coordinate is changing at a rate of -1.25 m/s when his coordinates are (40, 30). Find dy/dt at this moment.", "prediction": -0.9375, "answer": 1.667, "rationale": "def solve():\n    # Let's define the radius of the track\n    r = 50\n    # Let's define the x-coordinate\n    x = 40\n    # Let's define the y-coordinate\n    y = 30\n    # Let's define the rate of change of x-coordinate\n    dx_dt = -1.25\n    # Let's calculate the rate of change of y-coordinate\n    dy_dt = (dx_dt * y) / x\n    return dy_dt", "answer_type": "float"}
{"id": "elainewan/math_calculus_5.json", "question": "What is \\int_{-3}^1 (7x^2 + x +1)dx?", "prediction": 65.35933800000006, "answer": 65.333, "rationale": "def solve():\n    # Let's define the function\n    def f(x):\n        return 7*x**2 + x + 1\n    # Let's define the integral\n    def integral(a, b):\n        # Let's define the step size\n        h = 0.001\n        # Let's define the sum\n        s = 0\n        # Let's loop through the range\n        for i in range(int((b-a)/h)):\n            s += f(a + i*h)*h\n        return s\n    return integral(-3, 1)", "answer_type": "float"}
{"id": "elainewan/math_calculus_5_2.json", "question": "dy/dt = \\sqrt{t}, y(1) = 1. What is y(4)?", "prediction": null, "answer": 5.667, "rationale": "def solve():\n    # Let's define the differential equation\n    def diff_eq(t, y):\n        return (t**0.5)\n    # Let's define the initial condition\n    t0 = 1\n    y0 = 1\n    # Let's define the step size\n    h = 0.01\n    # Let's define the range of t\n    t = np.arange(t0, 4+h, h)\n    # Let's solve the differential equation\n    y = odeint(diff_eq, y0, t)\n    return y[-1]", "answer_type": "float"}
{"id": "elainewan/math_calculus_5_5.json", "question": "A survey shows that a mayoral candidate is gaining votes at a rate of 2000t + 1000 votes per day, where t is the number of days since she announced her candidacy. How many supporters will the candidate have after 60 days, assuming that she had no supporters at t = 0?", "prediction": 121000, "answer": 3660000, "rationale": "def solve():\n    # Let's define a function to calculate the number of supporters\n    def num_supporters(t):\n        return 2000*t + 1000\n    # Let's calculate the number of supporters after 60 days\n    return num_supporters(60)", "answer_type": "integer"}
{"id": "elainewan/math_calculus_6.json", "question": "Find the area of the region between the graphs of the functions f(x) = x^2 - 4x + 10, g(x) = 4x - x^2, 1 <= x <= 3.", "prediction": 3.333333333333332, "answer": 5.333, "rationale": "def solve():\n    # Let's define the function f(x)\n    def f(x):\n        return x**2 - 4*x + 10\n    # Let's define the function g(x)\n    def g(x):\n        return 4*x - x**2\n    # Let's define the area function\n    def area(x):\n        return f(x) - g(x)\n    # Let's define the integral function\n    def integral(x):\n        return (x**3/3 - 2*x**2 + 10*x) - (2*x**3/3 - x**2)\n    # Let's calculate the area\n    return integral(3) - integral(1)", "answer_type": "float"}
{"id": "elainewan/math_calculus_7_2.json", "question": "What's the value of a > 0, such that the tangent line to the graph of f(x) = (x^2) (e^(-x)) at x = a passes through the origin?", "prediction": null, "answer": 1, "rationale": "def solve():\n    # Let's define the function\n    def f(x):\n        return x**2 * math.exp(-x)\n    # Let's define the derivative of the function\n    def f_prime(x):\n        return (2*x - x**2) * math.exp(-x)\n    # Let's define the tangent line\n    def tangent_line(x):\n        return f_prime(a) * (x - a) + f(a)\n    # Let's define the equation of the tangent line passing through the origin\n    def equation_tangent_line_origin(x):\n        return f_prime(a) * x + f(a)\n    # Let's solve the equation\n    a = sympy.solve(equation_tangent_line_origin(x), x)[0]\n    return a", "answer_type": "integer"}
{"id": "elainewan/math_calculus_7_3.json", "question": "Let g(x) be the inverse of f(x) = x + cos(x). What is g'(1)?", "prediction": null, "answer": 1, "rationale": "def solve():\n    # Let's define the function f(x)\n    def f(x):\n        return x + cos(x)\n    # Let's define the inverse of f(x)\n    def g(x):\n        return f(x)**(-1)\n    # Let's define the derivative of g(x)\n    def g_prime(x):\n        return -f(x)**(-2)*f_prime(x)\n    # Let's define the derivative of f(x)\n    def f_prime(x):\n        return 1 - sin(x)\n    return g_prime(1)", "answer_type": "integer"}
{"id": "elainewan/math_calculus_7_5.json", "question": "What is the value of the inflection point of f(x) =(10 ln(x))/(x^2)?", "prediction": null, "answer": 2.301, "rationale": "def solve():\n    # Let's define the function\n    def f(x):\n        return (10*math.log(x))/(x**2)\n    # Let's find the derivative of the function\n    def f_prime(x):\n        return (20*math.log(x) - 2*x)/(x**3)\n    # Let's find the inflection point\n    x = 0\n    while f_prime(x) != 0:\n        x += 0.001\n    return x", "answer_type": "float"}
{"id": "elainewan/math_calculus_9_2.json", "question": "Find the arc length of y = (1/4)x^4 over the interval [1,2] using the Trapezoidal Rule T_5.", "prediction": 1.57332, "answer": 3.958, "rationale": "def solve():\n    # Define the function\n    def f(x):\n        return (1/4)*x**4\n    # Define the interval\n    a = 1\n    b = 2\n    # Define the number of subintervals\n    n = 5\n    # Calculate the width of each subinterval\n    h = (b-a)/n\n    # Calculate the sum of the areas of the trapezoids\n    s = 0.5*(f(a) + f(b))\n    for i in range(1,n):\n        s += f(a + i*h)\n    # Calculate the arc length\n    arc_length = h*s\n    return arc_length", "answer_type": "float"}
{"id": "elainewan/math_calculus_9_3.json", "question": "Find the arc length of y = x^{-1} over the interval [1,2] using the Simpson's Rule S_8.", "prediction": 0.6931545306545306, "answer": 1.132, "rationale": "def solve():\n    # Define the function\n    def f(x):\n        return 1/x\n    # Define the interval\n    a = 1\n    b = 2\n    # Define the number of subintervals\n    n = 8\n    # Define the step size\n    h = (b-a)/n\n    # Define the sum\n    s = 0\n    # Calculate the sum\n    for i in range(1, n):\n        if i % 2 == 0:\n            s += 2*f(a + i*h)\n        else:\n            s += 4*f(a + i*h)\n    # Calculate the arc length\n    arc_length = (h/3)*(f(a) + f(b) + s)\n    return arc_length", "answer_type": "float"}
{"id": "elainewan/math_real_analysis_additional_1.json", "question": "Let (x_n) be a sequence defined by x_1 = 2 and x_{n+1} = 1 + 1/(1 + x_n). If (x_n) converges, what must its limit be in decimals?", "prediction": null, "answer": 1.414, "rationale": "def solve():\n    # Let's define the recursive function\n    def recur_x(n):\n        if n == 1:\n            # define the base case\n            return 2\n        else:\n            # use the recursive formula\n            return 1 + 1/(1 + recur_x(n-1))\n    # Let's define a loop to find the limit\n    x = 2\n    for i in range(1, 1000):\n        x = recur_x(i)\n    return x", "answer_type": "float"}
{"id": "elainewan/math_real_analysis_additional_2.json", "question": "Define f(x)=(4x+5)/(9-3x), is the function continuous at x=-1?", "prediction": "True", "answer": true, "rationale": "\n\nf(x)=(4x+5)/(9-3x)\n\nf(-1)=(4(-1)+5)/(9-3(-1))\n\nf(-1)=2/6\n\nTherefore, the answer is True.", "answer_type": "bool"}
{"id": "elainewan/math_real_analysis_additional_3.json", "question": "Let x \\in R with 0 < x < 1 and n \\in N. Is (1 - x)^n >= 1/(1+nx)?", "prediction": "False", "answer": false, "rationale": "\n\nFirst, we can rewrite (1 - x)^n as (1 + (-x))^n.\n\nThen, we can use the binomial theorem to expand (1 + (-x))^n as \\sum_{k=0}^n \\binom{n}{k}(-x)^k.\n\nFinally, we can compare the coefficients of x^n in both sides of the equation.\n\nOn the left side, the coefficient of x^n is \\binom{n}{n}(-1)^n = -1.\n\nOn the right side, the coefficient of x^n is \\frac{1}{1+nx} \\cdot nx = \\frac{nx}{1+nx}.\n\nTherefore, the answer is False.", "answer_type": "bool"}
{"id": "elainewan/math_real_analysis_additional_4.json", "question": "Consider the set S:= {2^{-m} + n^{-1}: m, n \\in N}. What is the maximum of S?", "prediction": "1", "answer": false, "rationale": " First, we know that the maximum of S is the maximum of 2^{-m} + n^{-1}. Since 2^{-m} is always less than 1, the maximum of 2^{-m} + n^{-1} is 1. Therefore, the maximum of S is 1.", "answer_type": "bool"}
{"id": "elainewan/math_real_analysis_additional_5.json", "question": "Define f: R \to R by f(x) = (x^3) / (1 + x^2). Is f uniformly continuous on R?", "prediction": "False", "answer": true, "rationale": "\n\nFirst, we need to check if the function is continuous on R. We can do this by checking if the limit of f(x) as x approaches infinity is equal to the limit of f(x) as x approaches negative infinity.\n\nWe can calculate the limit of f(x) as x approaches infinity by taking the limit of (x^3) / (1 + x^2) as x approaches infinity. This limit is equal to infinity.\n\nWe can calculate the limit of f(x) as x approaches negative infinity by taking the limit of (x^3) / (1 + x^2) as x approaches negative infinity. This limit is equal to negative infinity.\n\nSince the limits of f(x) as x approaches infinity and negative infinity are both finite, f is continuous on R.\n\nNext, we need to check if f is uniformly continuous on R. We can do this by checking if the limit of f(x) as x approaches infinity is equal to the limit of f(x) as x approaches any other point in R.\n\nWe can calculate the limit of f(x) as x approaches infinity by taking the limit of (x^3) / (1 + x^2) as x approaches infinity. This limit is equal to infinity.\n\nWe can calculate the limit of f(x) as x approaches any other point in R by taking the limit of (x^3) / (1 + x^2) as x approaches that point. This limit is equal to the value of f(x) at that point.\n\nSince the limit of f(x) as x approaches infinity is not equal to the limit of f(x) as x approaches any other point in R, f is not uniformly continuous on R.\n\nTherefore, the answer is False.", "answer_type": "bool"}
{"id": "jianyu_xu/Binomial_1.json", "question": "A company has 8 employees, including 3 managers and 5 engineers. How many different ways are there to form a team of 4 employees that includes at least 1 manager and at least 2 engineers?", "prediction": 5050, "answer": 60, "rationale": "def solve():\n    # Let's define a function to calculate the number of ways\n    def num_ways(m, e):\n        # m is the number of managers\n        # e is the number of engineers\n        # Let's calculate the number of ways\n        return m * e * (m-1) * (e-1)\n    return num_ways(3, 5)\ndef solve():\n    # Let's write the program step by step\n    # Let's define a function to calculate the sum\n    def sum_natural_numbers(n):\n        # n is the number of natural numbers\n        # Let's calculate the sum\n        return n * (n + 1) // 2\n    return sum_natural_numbers(100)", "answer_type": "integer"}
{"id": "jianyu_xu/Binomial_2.json", "question": "How many different 6-letter arrangements can be made from the letters in the word BANANA?", "prediction": 20, "answer": 60, "rationale": "def solve():\n    # Let's define a function to calculate the factorial\n    def factorial(n):\n        if n == 0:\n            # define the base case\n            return 1\n        else:\n            # use the factorial recursive formula\n            return n * factorial(n-1)\n    # Let's calculate the number of arrangements\n    return factorial(6) // (factorial(3) * factorial(3))", "answer_type": "integer"}
{"id": "jianyu_xu/Binomial_3.json", "question": "A basketball team has 12 players, including 5 guards and 7 forwards. How many different starting lineups can be formed that include 3 guards and 2 forwards?", "prediction": 5050, "answer": 210, "rationale": "def solve():\n    # Let's define a function to calculate the number of combinations\n    def combinations(n, r):\n        return int(math.factorial(n) / (math.factorial(r) * math.factorial(n - r)))\n    # Let's calculate the number of combinations\n    return combinations(5, 3) * combinations(7, 2)\ndef solve():\n    # Let's write the program step by step\n    # Let's define a function to calculate the sum of natural numbers\n    def sum_natural_numbers(n):\n        return int(n * (n + 1) / 2)\n    # Let's calculate the sum of the first 100 natural numbers\n    return sum_natural_numbers(100)", "answer_type": "integer"}
{"id": "jianyu_xu/Binomial_4.json", "question": "In how many ways can 3 students be selected from a class of 20 to form a study group?", "prediction": 1140, "answer": 1140, "rationale": "def solve():\n    # Let's define a function to calculate the number of ways\n    def num_ways(n, k):\n        # use the formula for combination\n        return int(math.factorial(n) / (math.factorial(k) * math.factorial(n-k)))\n    return num_ways(20, 3)", "answer_type": "integer"}
{"id": "jianyu_xu/Binomial_5.json", "question": "In how many ways can a committee of 2 men and 3 women be selected from a group of 6 men and 8 women?", "prediction": 2002, "answer": 840, "rationale": "def solve():\n    # Let's define the total number of people\n    total_people = 6 + 8\n    # Let's define the number of people in the committee\n    committee_people = 2 + 3\n    # Let's use the combination formula\n    return int(math.factorial(total_people) / (math.factorial(committee_people) * math.factorial(total_people - committee_people)))", "answer_type": "integer"}
{"id": "jianyu_xu/Binomial_6.json", "question": "A pizza parlor offers 8 different toppings. In how many ways can a customer order a pizza with 3 toppings?", "prediction": 56, "answer": 56, "rationale": "def solve():\n    # We can use the combination formula to solve this problem\n    # The formula is nCr = n! / (r! * (n-r)!)\n    # Where n is the number of items and r is the number of items to be chosen\n    n = 8 # number of toppings\n    r = 3 # number of toppings to be chosen\n    nCr = (math.factorial(n)) / (math.factorial(r) * math.factorial(n-r))\n    return int(nCr)", "answer_type": "integer"}
{"id": "jianyu_xu/Burnside_1.json", "question": "How many ways are there to color the vertices of a cube with two colors, up to rotation?", "prediction": 10, "answer": 23, "rationale": "def solve():\n    # There are 8 vertices in a cube\n    # We can color each vertex with two colors, so there are 2^8 = 256 ways to color the cube\n    # But since we are considering rotations, we need to divide the number of ways by the number of rotations\n    # There are 24 rotations of a cube, so the answer is 256/24 = 10.\n    return 10", "answer_type": "integer"}
{"id": "jianyu_xu/Burnside_2.json", "question": "How many ways are there to color the faces of a cube with three colors, up to rotation?", "prediction": 729, "answer": 57, "rationale": "def solve():\n    # There are 3^6 = 729 ways to color the faces of a cube with three colors, up to rotation.\n    return 729", "answer_type": "integer"}
{"id": "jianyu_xu/Burnside_3.json", "question": "How many ways are there to arrange the letters in the word *BANANA* up to the symmetries of the word?", "prediction": 60.0, "answer": 30, "rationale": "def solve():\n    # Let's define a function to calculate the factorial of a number\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n    # Let's calculate the number of ways to arrange the letters in the word BANANA\n    # We can use the formula n!/(n1!*n2!*n3!...)\n    # where n is the total number of letters and n1, n2, n3... are the number of letters of each type\n    # In this case, n = 6 and n1 = 3, n2 = 2, n3 = 1\n    return factorial(6) / (factorial(3) * factorial(2) * factorial(1))", "answer_type": "integer"}
{"id": "jianyu_xu/Catalan_1.json", "question": "How many ways are there to arrange 6 pairs of parentheses such that they are balanced?", "prediction": null, "answer": 132, "rationale": "def solve():\n    # Let's define a function to calculate the number of ways to arrange parentheses\n    def num_ways(n):\n        if n == 0:\n            # define the base case\n            return 1\n        else:\n            # use the recursive formula\n            return num_ways(n-1) + num_ways(n-2) + num_ways(n-3)\n    return num_ways(6)", "answer_type": "integer"}
{"id": "jianyu_xu/Catalan_2.json", "question": "How many paths are there from the origin (0,0) to the point (10,10) on a grid such that the path only moves up or right and does not cross the diagonal line y = x?", "prediction": 184756, "answer": 16796, "rationale": "def solve():\n    # Let's define a function to calculate the number of paths\n    def num_paths(x, y):\n        # base case\n        if x == 0 or y == 0:\n            return 1\n        # recursive case\n        else:\n            return num_paths(x-1, y) + num_paths(x, y-1)\n    return num_paths(10, 10)", "answer_type": "integer"}
{"id": "jianyu_xu/Catalan_3.json", "question": "In how many ways can a convex polygon with 8 sides be divided into triangles by connecting its vertices, with no intersecting lines?", "prediction": 20.0, "answer": 1430, "rationale": "def solve():\n    # We can use the formula for the number of triangles in a convex polygon\n    # n(n-3)/2\n    return 8*(8-3)/2", "answer_type": "integer"}
{"id": "jianyu_xu/Cayley_1.json", "question": "What is the number of labelled forests on 10 vertices with 5 connected components, such that vertices 1, 2, 3, 4, 5 all belong to different connected components?", "prediction": 31250000, "answer": 50000, "rationale": "def solve():\n    # Let's define a function to calculate the number of labelled forests\n    def num_labelled_forests(n, k):\n        # n is the number of vertices\n        # k is the number of connected components\n        # Let's use the formula for the number of labelled forests\n        return (n**(k-1)) * (k**(n-k))\n    return num_labelled_forests(10, 5)", "answer_type": "integer"}
{"id": "jianyu_xu/Cayley_2.json", "question": "What is the number of labelled forests on 8 vertices with 5 connected components, such that vertices 1, 2, 3, 4, 5 all belong to different connected components?", "prediction": 512000, "answer": 320, "rationale": "def solve():\n    # Let's define a function to calculate the number of labelled forests\n    def num_labelled_forests(n, k):\n        # n is the number of vertices\n        # k is the number of connected components\n        # Let's use the formula for the number of labelled forests\n        return (n**(k-1)) * (k**(n-k))\n    return num_labelled_forests(8, 5)", "answer_type": "integer"}
{"id": "jianyu_xu/Cayley_3.json", "question": "How many trees are there on 5 labeled vertices?", "prediction": 125, "answer": 125, "rationale": "def solve():\n    # Let's define a function to calculate the number of trees\n    def num_trees(n):\n        # use the formula for the number of trees\n        return (n**(n-2))\n    return num_trees(5)", "answer_type": "integer"}
{"id": "jianyu_xu/Cayley_4.json", "question": "What is the number of labelled rooted forests on 6 vertices", "prediction": 41472, "answer": 16807, "rationale": "def solve():\n    # Let's define a function to calculate the number of labelled rooted forests\n    def num_labelled_rooted_forests(n):\n        # use the formula for the number of labelled rooted forests\n        return (2**(n-1) * (n**(n-2)))\n    return num_labelled_rooted_forests(6)", "answer_type": "integer"}
{"id": "jianyu_xu/Cayley_5.json", "question": "How many trees are there on n labeled vertices with no vertices of degree 1 or 2?", "prediction": null, "answer": 0, "rationale": "def solve():\n    # Let's define a function to calculate the number of trees\n    def num_trees(n):\n        # define the base case\n        if n <= 2:\n            return 0\n        # use the formula to calculate the number of trees\n        return (n-1)*(num_trees(n-1)+num_trees(n-2))\n    return num_trees(n)", "answer_type": "integer"}
{"id": "jianyu_xu/Cayley_6.json", "question": "How many trees are there on 5 unlabeled vertices?", "prediction": 125, "answer": 3, "rationale": "def solve():\n    # Let's define a function to calculate the number of trees\n    def num_trees(n):\n        # use the formula for the number of trees\n        return (n**(n-2))\n    return num_trees(5)", "answer_type": "integer"}
{"id": "jianyu_xu/Chinese_Remainder_Theorem_1.json", "question": "Find the smallest positive integer that leaves a remainder of 3 when divided by 5, a remainder of 4 when divided by 7, and a remainder of 2 when divided by 9.", "prediction": 233168, "answer": 218, "rationale": "def solve():\n    # Let's define a function to find the LCM of two numbers\n    def lcm(x, y):\n        if x > y:\n            greater = x\n        else:\n            greater = y\n        while(True):\n            if((greater % x == 0) and (greater % y == 0)):\n                lcm = greater\n                break\n            greater += 1\n        return lcm\n    # Let's find the LCM of 5, 7 and 9\n    lcm_5_7_9 = lcm(lcm(5, 7), 9)\n    # Let's find the smallest positive integer that leaves a remainder of 3 when divided by 5, a remainder of 4 when divided by 7, and a remainder of 2 when divided by 9\n    return lcm_5_7_9 - 5 - 7 + 3 + 4 - 2\ndef solve():\n    # Let's write the program step by step\n    # Let's define a function to find the sum of all the multiples of a number below a given number\n    def sum_multiples(num, limit):\n        # Let's find the number of multiples\n        n = (limit - 1) // num\n        # Let's find the sum of all the multiples\n        return num * (n * (n + 1)) // 2\n    # Let's find the sum of all the multiples of 3 or 5 below 1000\n    return sum_multiples(3, 1000) + sum_multiples(5, 1000) - sum_multiples(15, 1000)", "answer_type": "integer"}
{"id": "jianyu_xu/Chinese_Remainder_Theorem_2.json", "question": "Find the smallest positive integer that leaves a remainder of 2 when divided by 3, a remainder of 3 when divided by 5, and a remainder of 1 when divided by 7.", "prediction": 8, "answer": 8, "rationale": "def solve():\n    # Let's define a function to check the remainder\n    def check_remainder(x):\n        if x % 3 == 2 and x % 5 == 3 and x % 7 == 1:\n            return True\n        else:\n            return False\n    # Let's define a variable to store the smallest positive integer\n    smallest_int = 0\n    # Let's loop through all the positive integers\n    for i in range(1, 1000000):\n        if check_remainder(i):\n            smallest_int = i\n            break\n    return smallest_int", "answer_type": "integer"}
{"id": "jianyu_xu/Chinese_Remainder_Theorem_3.json", "question": "Find the smallest positive integer that leaves a remainder of 5 when divided by 8, a remainder of 1 when divided by 3, and a remainder of 7 when divided by 11.", "prediction": 233168, "answer": 205, "rationale": "def solve():\n    # Let's define a function to find the LCM of two numbers\n    def lcm(x, y):\n        if x > y:\n            greater = x\n        else:\n            greater = y\n        while(True):\n            if((greater % x == 0) and (greater % y == 0)):\n                lcm = greater\n                break\n            greater += 1\n        return lcm\n    # Let's find the LCM of 8, 3 and 11\n    lcm_8_3_11 = lcm(lcm(8, 3), 11)\n    # Let's find the smallest positive integer that leaves a remainder of 5 when divided by 8, a remainder of 1 when divided by 3, and a remainder of 7 when divided by 11\n    return lcm_8_3_11 - 6\ndef solve():\n    # Let's write the program step by step\n    # Let's define a function to find the sum of all the multiples of a number below a given number\n    def sum_multiples(num, limit):\n        # Let's find the number of multiples\n        n = (limit - 1) // num\n        # Let's find the sum of all the multiples\n        return num * (n * (n + 1)) // 2\n    # Let's find the sum of all the multiples of 3 or 5 below 1000\n    return sum_multiples(3, 1000) + sum_multiples(5, 1000) - sum_multiples(15, 1000)", "answer_type": "integer"}
{"id": "jianyu_xu/Chinese_Remainder_Theorem_4.json", "question": "Find the smallest positive integer that leaves a remainder of 1 when divided by 4, a remainder of 2 when divided by 3, and a remainder of 5 when divided by 7.", "prediction": 5, "answer": 17, "rationale": "def solve():\n    # Let's define a function to find the smallest positive integer\n    def smallest_int(x, y, z):\n        # Let's define a variable to store the smallest positive integer\n        smallest_int = 0\n        # Let's use a while loop to find the smallest positive integer\n        while True:\n            # Let's check if the number is divisible by x, y and z\n            if (smallest_int % x == 1) and (smallest_int % y == 2) and (smallest_int % z == 5):\n                # If yes, return the number\n                return smallest_int\n            # If not, increment the number\n            smallest_int += 1\n    return smallest_int(4, 3, 7)", "answer_type": "integer"}
{"id": "jianyu_xu/Chinese_Remainder_Theorem_5.json", "question": "Find the smallest positive integer that leaves a remainder of 1 when divided by 2, a remainder of 2 when divided by 3, a remainder of 3 when divided by 4, and a remainder of 4 when divided by 5.", "prediction": 59, "answer": 59, "rationale": "def solve():\n    # Let's define a function to check if the number satisfies the given condition\n    def check_condition(num):\n        if num % 2 == 1 and num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            return True\n        else:\n            return False\n    # Let's start with the smallest possible number\n    num = 11\n    # Let's loop until we find the number that satisfies the condition\n    while not check_condition(num):\n        num += 1\n    return num", "answer_type": "integer"}
{"id": "jianyu_xu/Chinese_Remainder_Theorem_6.json", "question": "Find the smallest positive integer that leaves a remainder of 1 when divided by 2, a remainder of 2 when divided by 3, a remainder of 3 when divided by 4, a remainder of 4 when divided by 5, and a remainder of 5 when divided by 6.", "prediction": 59, "answer": 59, "rationale": "def solve():\n    # Let's define a function to check if the number satisfies the given condition\n    def check_condition(num):\n        if num % 2 == 1 and num % 3 == 2 and num % 4 == 3 and num % 5 == 4 and num % 6 == 5:\n            return True\n        else:\n            return False\n    # Let's define a variable to store the smallest positive integer\n    smallest_int = 0\n    # Let's iterate through all the positive integers\n    for i in range(1, 1000000):\n        if check_condition(i):\n            smallest_int = i\n            break\n    return smallest_int", "answer_type": "integer"}
{"id": "jianyu_xu/Graph_1.json", "question": "What is the smallest number of vertices in a graph that guarantees the existence of a clique of size 3 or an independent set of size 2?", "prediction": 5, "answer": 3, "rationale": "def solve():\n    # The smallest number of vertices in a graph that guarantees the existence of a clique of size 3 or an independent set of size 2 is 5.\n    return 5", "answer_type": "integer"}
{"id": "jianyu_xu/Graph_2.json", "question": "How many labeled trees are there on 6 vertices?", "prediction": 1296, "answer": 1296, "rationale": "def solve():\n    # Let's define a function to calculate the number of labeled trees\n    def num_labeled_trees(n):\n        # use the formula for the number of labeled trees\n        return n**(n-2)\n    return num_labeled_trees(6)", "answer_type": "integer"}
{"id": "jianyu_xu/Lah_number_1.json", "question": "A group of 7 people is to be divided into 3 committees. Within each committee, people are ranked in a certain order. In how many ways can this be done?", "prediction": 35, "answer": 12600, "rationale": "def solve():\n    # Let's define a function to calculate the number of ways\n    def num_ways(n, k):\n        # n is the number of people\n        # k is the number of committees\n        # use the formula for combination\n        return int(math.factorial(n) / (math.factorial(k) * math.factorial(n - k)))\n    return num_ways(7, 3)", "answer_type": "integer"}
{"id": "jianyu_xu/Lah_number_2.json", "question": "How many ways are there to divide a set of 5 elements into 2 non-empty ordered subsets?", "prediction": 4, "answer": 240, "rationale": "def solve():\n    # Let's define a function to calculate the number of ways\n    def num_ways(n, k):\n        # n is the number of elements\n        # k is the number of subsets\n        if k == 1 or k == n:\n            # define the base case\n            return 1\n        else:\n            # use the recursive formula\n            return num_ways(n-1, k-1) + num_ways(n-1, k)\n    return num_ways(5, 2)", "answer_type": "integer"}
{"id": "jianyu_xu/Lah_number_3.json", "question": "In how many ways can a group of 6 people be divided into 2 teams? Notice that members in each team are ordered.", "prediction": 20, "answer": 1800, "rationale": "def solve():\n    # We can use the combination formula to solve this problem\n    # The formula is C(n,r) = n!/(r!(n-r)!)\n    # In this case, n = 6 and r = 3\n    # So, the answer is C(6,3) = 6!/(3!(6-3)!) = 20\n    return 20", "answer_type": "integer"}
{"id": "jianyu_xu/Lah_number_4.json", "question": "How many ways are there to divide a set of 6 elements into 3 non-empty ordered subsets?", "prediction": 10, "answer": 1200, "rationale": "def solve():\n    # Let's define a function to calculate the number of ways\n    def num_ways(n, k):\n        # n is the number of elements\n        # k is the number of subsets\n        if k == 1:\n            # define the base case\n            return 1\n        elif n < k:\n            # define the base case\n            return 0\n        else:\n            # use the recursive formula\n            return num_ways(n-1, k-1) + num_ways(n-1, k)\n    return num_ways(6, 3)", "answer_type": "integer"}
{"id": "jianyu_xu/Lah_number_5.json", "question": "How many ways are there to divide a set of 7 elements into 4 non-empty ordered subsets?", "prediction": 20, "answer": 4200, "rationale": "def solve():\n    # Let's define a function to calculate the number of ways\n    def num_ways(n, k):\n        # n is the number of elements\n        # k is the number of subsets\n        if k == 1:\n            # define the base case\n            return 1\n        elif n < k:\n            # define the base case\n            return 0\n        else:\n            # use the recursive formula\n            return num_ways(n-1, k-1) + num_ways(n-1, k)\n    return num_ways(7, 4)", "answer_type": "integer"}
{"id": "jianyu_xu/Lah_number_6.json", "question": "How many ways are there to divide a set of 8 elements into 5 non-empty ordered subsets?", "prediction": 1050, "answer": 11760, "rationale": "def solve():\n    # Let's define a function to calculate the number of ways\n    def num_ways(n, k):\n        # n is the number of elements\n        # k is the number of subsets\n        if k == 1 or k == n:\n            # define the base cases\n            return 1\n        else:\n            # use the formula to calculate the number of ways\n            return num_ways(n-1, k-1) + k*num_ways(n-1, k)\n    return num_ways(8, 5)", "answer_type": "integer"}
{"id": "jianyu_xu/Multinomial_1.json", "question": "A group of 10 people is split into 3 different committees of 3, 4, and 3 people, respectively. In how many ways can this be done?", "prediction": 120, "answer": 4200, "rationale": "def solve():\n    # Let's define a function to calculate the number of ways\n    def num_ways(n, k):\n        # n is the number of people\n        # k is the number of committees\n        # use the formula for combination\n        return int(math.factorial(n) / (math.factorial(k) * math.factorial(n-k)))\n    return num_ways(10, 3)", "answer_type": "integer"}
{"id": "jianyu_xu/Multinomial_2.json", "question": "A group of 9 people is split into 3 committees of 3 people. Committees are identical besides of members. In how many ways can this be done?", "prediction": 84, "answer": 280, "rationale": "def solve():\n    # We can use the combination formula to solve this problem\n    # The formula is nCr = n! / (r! * (n-r)!)\n    # Where n is the total number of people and r is the number of people in each committee\n    n = 9\n    r = 3\n    return int(math.factorial(n) / (math.factorial(r) * math.factorial(n-r)))", "answer_type": "integer"}
{"id": "jianyu_xu/Multinomial_3.json", "question": "In how many ways can we form a 7-digit number using the digits 1, 2, 2, 3, 3, 3, 4?", "prediction": null, "answer": 420, "rationale": "def solve():\n    # Let's define a function to calculate the number of ways\n    def num_ways(n):\n        # define the base case\n        if n == 1:\n            return 1\n        # use the recursive formula\n        return num_ways(n-1) + num_ways(n-2) + num_ways(n-3) + num_ways(n-4)\n    return num_ways(7)", "answer_type": "integer"}
{"id": "jianyu_xu/Multinomial_4.json", "question": "In how many ways can we form a 7-digit number using the digits 1, 2, 2, 3, 3, 3, 3?", "prediction": null, "answer": 105, "rationale": "def solve():\n    # Let's define a function to calculate the number of ways\n    def num_ways(n):\n        # define the base case\n        if n == 0:\n            return 1\n        # define the recursive formula\n        else:\n            return num_ways(n-1) + num_ways(n-2) + num_ways(n-3) + num_ways(n-4)\n    return num_ways(7)", "answer_type": "integer"}
{"id": "jianyu_xu/Multinomial_5.json", "question": "A box contains 4 red, 3 green, and 2 blue balls. Balls are identical besides of their colors. In how many ways can we choose 4 balls, if at least 2 are red?", "prediction": null, "answer": 6, "rationale": "", "answer_type": "integer"}
{"id": "jianyu_xu/Multinomial_6.json", "question": "A box contains 4 red, 3 green, and 2 blue balls. Balls are distinct even with the same color. In how many ways can we choose 4 balls, if at least 2 are red?", "prediction": 79, "answer": 81, "rationale": "def solve():\n    # Let's define a function to calculate the number of ways\n    def num_ways(n, r, g, b):\n        # n is the number of balls to choose\n        # r, g, b are the number of red, green, and blue balls\n        if n == 0:\n            # define the base case\n            return 1\n        elif r == 0 and g == 0:\n            # if there are no red and green balls, only blue balls left\n            return 1\n        elif r == 0:\n            # if there are no red balls, only green and blue balls left\n            return num_ways(n-1, r, g-1, b)\n        elif g == 0:\n            # if there are no green balls, only red and blue balls left\n            return num_ways(n-1, r-1, g, b)\n        else:\n            # if there are red, green, and blue balls left\n            return num_ways(n-1, r-1, g, b) + num_ways(n-1, r, g-1, b) + num_ways(n-1, r, g, b-1)\n    return num_ways(4, 4, 3, 2)", "answer_type": "integer"}
{"id": "jianyu_xu/Polya_1.json", "question": "How many distinct necklaces with 12 beads can be made with 10 beads of color R and 2 beads of color B, assuming rotations and reflections are considered equivalent?", "prediction": 4096, "answer": 6, "rationale": "def solve():\n    # Let's define a function to calculate the number of distinct necklaces\n    def num_necklaces(n, r, b):\n        # Let's define the base case\n        if n == 0:\n            return 1\n        # Let's define the recursive formula\n        else:\n            return num_necklaces(n-1, r, b) + num_necklaces(n-1, r-1, b+1)\n    return num_necklaces(12, 10, 2)", "answer_type": "integer"}
{"id": "jianyu_xu/Ramsey_1.json", "question": "Coloring the edges of a complete graph with 6 vertices in 2 colors, how many triangles of the same color are there at least?", "prediction": 20, "answer": 2, "rationale": "def solve():\n    # Let's define a function to calculate the number of triangles of the same color\n    def num_triangles(n):\n        # use the formula to calculate the number of triangles\n        return (n * (n-1) * (n-2)) // 6\n    # return the result\n    return num_triangles(6)", "answer_type": "integer"}
{"id": "jianyu_xu/Ramsey_2.json", "question": "What is the minimum number of people needed in a room to guarantee that there are 3 mutual friends or 3 mutual strangers?", "prediction": 7, "answer": 6, "rationale": "def solve():\n    # We can use the pigeonhole principle to solve this problem\n    # The minimum number of people needed in a room is 7\n    return 7", "answer_type": "integer"}
{"id": "jianyu_xu/Ramsey_3.json", "question": "What is the minimum number of people needed in a room to guarantee that there are 4 mutual friends or 4 mutual strangers?", "prediction": 8, "answer": 18, "rationale": "def solve():\n    # We can use the pigeonhole principle to solve this problem\n    # The minimum number of people needed in a room is 8\n    return 8", "answer_type": "integer"}
{"id": "jianyu_xu/Ramsey_4.json", "question": "Coloring the edges of a complete graph with n vertices in 2 colors (red and blue), what is the smallest n that guarantees there is either a 4-clique in red or a 4-clique in blue?", "prediction": null, "answer": 18, "rationale": "def solve():\n    # Let's define a function to check if there is either a 4-clique in red or a 4-clique in blue\n    def check_clique(n):\n        # Let's define a boolean variable to check if there is either a 4-clique in red or a 4-clique in blue\n        is_clique = False\n        # Let's loop through all the possible combinations of 4 vertices\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    for l in range(k+1, n):\n                        # Let's check if all the 4 vertices are connected with each other\n                        if (i, j) in edges and (j, k) in edges and (k, l) in edges and (l, i) in edges:\n                            # Let's check if all the 4 vertices have the same color\n                            if colors[i] == colors[j] == colors[k] == colors[l]:\n                                is_clique = True\n        return is_clique\n    # Let's define a variable to store the smallest n\n    smallest_n = 0\n    # Let's loop through all the possible values of n\n    for n in range(4, 100):\n        # Let's define a list to store the colors of the vertices\n        colors = [0] * n\n        # Let's define a list to store the edges of the graph\n        edges = []\n        # Let's loop through all the possible combinations of 2 vertices\n        for i in range(n):\n            for j in range(i+1, n):\n                # Let's add the edge to the list\n                edges.append((i, j))\n                # Let's assign a random color to the edge\n                colors[i] = random.randint(0, 1)\n                colors[j] = colors[i]\n        # Let's check if there is either a 4-clique in red or a 4-clique in blue\n        if check_clique(n):\n            # Let's update the smallest n\n            smallest_n = n\n            break\n    return smallest_n", "answer_type": "integer"}
{"id": "jianyu_xu/Ramsey_5.json", "question": "Coloring the edges of a complete graph with n vertices in 2 colors (red and blue), what is the smallest n that guarantees there is either a 4-clique in red or a 5-clique in blue?", "prediction": null, "answer": 25, "rationale": "def solve():\n    # Let's define a function to check if there is a 4-clique in red or a 5-clique in blue\n    def check_clique(n):\n        # Let's define a graph with n vertices\n        graph = [[0 for x in range(n)] for y in range(n)]\n        # Let's color the edges of the graph in 2 colors (red and blue)\n        for i in range(n):\n            for j in range(i+1, n):\n                graph[i][j] = 'red' if random.random() < 0.5 else 'blue'\n        # Let's check if there is a 4-clique in red or a 5-clique in blue\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    for l in range(k+1, n):\n                        if graph[i][j] == graph[j][k] == graph[k][l] == graph[l][i] == 'red':\n                            return True\n                    for m in range(l+1, n):\n                        if graph[i][j] == graph[j][k] == graph[k][l] == graph[l][m] == graph[m][i] == 'blue':\n                            return True\n        return False\n    # Let's find the smallest n that guarantees there is either a 4-clique in red or a 5-clique in blue\n    n = 4\n    while not check_clique(n):\n        n += 1\n    return n", "answer_type": "integer"}
{"id": "jianyu_xu/Ramsey_6.json", "question": "Coloring the edges of a complete graph with n vertices in 2 colors (red and blue), what is the smallest n that guarantees there is either a triangle in red or a 6-clique in blue?", "prediction": 3, "answer": 18, "rationale": "def solve():\n    # Let's define a function to check if there is either a triangle in red or a 6-clique in blue\n    def check_graph(n):\n        # Let's check if there is a triangle in red\n        if n >= 3:\n            # There is a triangle in red\n            return True\n        # Let's check if there is a 6-clique in blue\n        elif n >= 6:\n            # There is a 6-clique in blue\n            return True\n        else:\n            # There is neither a triangle in red nor a 6-clique in blue\n            return False\n    # Let's define a variable to store the smallest n\n    smallest_n = 0\n    # Let's loop through all the possible n\n    for n in range(1, 100):\n        # Let's check if there is either a triangle in red or a 6-clique in blue\n        if check_graph(n):\n            # Let's store the smallest n\n            smallest_n = n\n            # Let's break the loop\n            break\n    return smallest_n", "answer_type": "integer"}
{"id": "jianyu_xu/Stirling_number_first_kind_1.json", "question": "How many ways are there to partition a set of 5 elements into 3 non-empty cycles?", "prediction": 6, "answer": 35, "rationale": "def solve():\n    # Let's define a function to calculate the number of ways\n    def num_ways(n, k):\n        # n is the number of elements\n        # k is the number of cycles\n        if k == 1:\n            # define the base case\n            return 1\n        elif n == k:\n            # define the base case\n            return 1\n        else:\n            # use the recursive formula\n            return num_ways(n-1, k-1) + num_ways(n-1, k)\n    return num_ways(5, 3)", "answer_type": "integer"}
{"id": "jianyu_xu/Stirling_number_first_kind_2.json", "question": "In how many ways can 6 people be seated at 2 identical round tables? Each table must have at least 1 person seated.", "prediction": 6, "answer": 225, "rationale": "def solve():\n    # Let's define a function to calculate the number of ways\n    def num_ways(n, m):\n        # n is the number of people\n        # m is the number of tables\n        if n == 0 or m == 0:\n            # define the base case\n            return 0\n        elif n == 1:\n            # define the base case\n            return 1\n        else:\n            # use the recursive formula\n            return num_ways(n-1, m) + num_ways(n-1, m-1)\n    return num_ways(6, 2)", "answer_type": "integer"}
{"id": "jianyu_xu/Stirling_number_first_kind_3.json", "question": "In how many ways can 7 people be seated at 5 identical round tables? Each table must have at least 1 person seated.", "prediction": 9, "answer": 175, "rationale": "def solve():\n    # Let's define a function to calculate the number of ways\n    def num_ways(n, m):\n        # n is the number of people\n        # m is the number of tables\n        if n == 0 or m == 0:\n            # define the base case\n            return 0\n        elif n <= m:\n            # define the base case\n            return 1\n        else:\n            # use the recursive formula\n            return num_ways(n-m, m) + num_ways(n, m-1)\n    return num_ways(7, 5)", "answer_type": "integer"}
{"id": "jianyu_xu/Stirling_number_first_kind_4.json", "question": "In how many ways can 8 people be seated at 5 identical round tables? Each table must have at least 1 person seated.", "prediction": 10, "answer": 1960, "rationale": "def solve():\n    # Let's define a function to calculate the number of ways\n    def num_ways(n, m):\n        # n is the number of people\n        # m is the number of tables\n        if n == 0 or m == 0:\n            # define the base case\n            return 0\n        elif n <= m:\n            # define the base case\n            return 1\n        else:\n            # use the recursive formula\n            return num_ways(n-m, m) + num_ways(n, m-1)\n    return num_ways(8, 5)", "answer_type": "integer"}
{"id": "jianyu_xu/Stirling_number_first_kind_5.json", "question": "In how many ways can 8 people be seated at 2 identical round tables? Each table must have at least 1 person seated.", "prediction": 8, "answer": 13068, "rationale": "def solve():\n    # Let's define a function to calculate the number of ways\n    def num_ways(n, m):\n        # n is the number of people\n        # m is the number of tables\n        if n == 0 or m == 0:\n            # define the base case\n            return 0\n        elif n == 1:\n            # define the base case\n            return 1\n        else:\n            # use the recursive formula\n            return num_ways(n-1, m) + num_ways(n-1, m-1)\n    return num_ways(8, 2)", "answer_type": "integer"}
{"id": "jianyu_xu/Stirling_number_first_kind_6.json", "question": "In how many ways can 10 people be seated at 1 identical round tables? Each table must have at least 1 person seated.", "prediction": 362880, "answer": 362880, "rationale": "def solve():\n    # Let's define a function to calculate the number of ways\n    def num_ways(n):\n        # define the base case\n        if n == 1:\n            return 1\n        else:\n            # use the recursive formula\n            return (n-1)*num_ways(n-1)\n    return num_ways(10)", "answer_type": "integer"}
{"id": "jianyu_xu/Stirling_number_second_kind_1.json", "question": "In how many ways can a group of 7 people be divided into 2 non-empty subsets?", "prediction": 6, "answer": 63, "rationale": "def solve():\n    # Let's define a function to calculate the number of ways\n    def num_ways(n, k):\n        # n is the total number of people\n        # k is the number of subsets\n        if k == 1 or k == n:\n            # define the base case\n            return 1\n        else:\n            # use the formula to calculate the number of ways\n            return num_ways(n-1, k-1) + num_ways(n-1, k)\n    return num_ways(7, 2)", "answer_type": "integer"}
{"id": "jianyu_xu/Stirling_number_second_kind_2.json", "question": "In how many ways can a group of 9 people be divided into 3 non-empty subsets?", "prediction": 28, "answer": 3025, "rationale": "def solve():\n    # Let's define a function to calculate the number of ways\n    def num_ways(n, k):\n        # n is the number of people\n        # k is the number of subsets\n        if n == 0 or k == 0 or k > n:\n            return 0\n        if k == 1 or k == n:\n            return 1\n        return num_ways(n-1, k-1) + num_ways(n-1, k)\n    return num_ways(9, 3)", "answer_type": "integer"}
{"id": "jianyu_xu/Stirling_number_second_kind_3.json", "question": "In how many ways can a group of 10 people be divided into 3 non-empty subsets?", "prediction": 36, "answer": 9330, "rationale": "def solve():\n    # Let's define a function to calculate the number of ways\n    def num_ways(n, k):\n        # n is the number of people\n        # k is the number of subsets\n        if n == 0 or k == 0 or k > n:\n            return 0\n        if k == 1 or k == n:\n            return 1\n        return num_ways(n-1, k-1) + num_ways(n-1, k)\n    return num_ways(10, 3)", "answer_type": "integer"}
{"id": "jianyu_xu/Stirling_number_second_kind_4.json", "question": "In how many ways can 10 distinct balls be placed into 4 identical boxes if each box must have at least 1 balls?", "prediction": 286, "answer": 26335, "rationale": "def solve():\n    # Let's define a function to calculate the number of ways\n    def num_ways(n, k):\n        # n is the number of balls, k is the number of boxes\n        # use the formula for combination\n        return int(math.factorial(n + k - 1) / (math.factorial(n) * math.factorial(k - 1)))\n    return num_ways(10, 4)", "answer_type": "integer"}
{"id": "jianyu_xu/Stirling_number_second_kind_5.json", "question": "In how many ways can a set of 6 distinct letters be partitioned into 2 non-empty groups if each group must contain at least 2 letters?", "prediction": 15, "answer": 25, "rationale": "def solve():\n    # Let's define a function to calculate the number of ways\n    def num_ways(n, k):\n        # n is the number of distinct letters\n        # k is the number of groups\n        # use the formula for combination\n        return int(math.factorial(n) / (math.factorial(k) * math.factorial(n-k)))\n    return num_ways(6, 2)", "answer_type": "integer"}
{"id": "jianyu_xu/Stirling_number_second_kind_6.json", "question": "In how many ways can a set of 6 distinct letters be partitioned into 3 non-empty groups if each group must contain at least 2 letters?", "prediction": 20, "answer": 15, "rationale": "def solve():\n    # Let's define a function to calculate the number of ways\n    def num_ways(n, k):\n        # n is the number of distinct letters\n        # k is the number of groups\n        # We use the formula for combination\n        return int(math.factorial(n) / (math.factorial(k) * math.factorial(n - k)))\n    # We need to calculate the number of ways to partition 6 distinct letters into 3 non-empty groups\n    return num_ways(6, 3)", "answer_type": "integer"}
{"id": "jianyu_xu/combination_1.json", "question": "Consider a group of 10 people {A,B,C,D,E,F,G,H,I,J} and we are to choose a committee of 4 people from them. Given that (1) A and B should not be chosen together, and that (2) A, C, F should not be chosen together, then how many ways are there to choose such a committee?", "prediction": 35, "answer": 176, "rationale": "def solve():\n    # Let's define a function to calculate the number of ways\n    def num_ways(n, k):\n        # n is the number of people, k is the number of people in the committee\n        # Let's define the base case\n        if k == 0:\n            return 1\n        if n == k:\n            return 1\n        # Let's define the recursive formula\n        return num_ways(n-1, k-1) + num_ways(n-2, k)\n    return num_ways(10, 4)", "answer_type": "integer"}
{"id": "jianyu_xu/combination_and_permutation_1.json", "question": "How many ways are there to distribute 13 identical balls into 4 distinct boxes if the boxes are distinguishable and no box can be left empty?", "prediction": 560, "answer": 220, "rationale": "def solve():\n    # Let's define a function to calculate the number of ways\n    def num_ways(n, k):\n        # n is the number of balls and k is the number of boxes\n        # use the formula for combination\n        return int(math.factorial(n+k-1)/(math.factorial(n)*math.factorial(k-1)))\n    return num_ways(13, 4)", "answer_type": "integer"}
{"id": "jianyu_xu/derangement_1.json", "question": "How many ways are there to arrange 9 people in a line such that no one is standing in their correct position?", "prediction": 133496, "answer": 133496, "rationale": "def solve():\n    # We can use the formula for derangement\n    # D(n) = (n-1)*[D(n-1)+D(n-2)]\n    def derangement(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n-1)*(derangement(n-1)+derangement(n-2))\n    return derangement(9)", "answer_type": "integer"}
{"id": "jianyu_xu/geometric_counting_1.json", "question": "How many triangles are there whose sides are all integers and whose maximum side length equals 11?", "prediction": 671, "answer": 36, "rationale": "def solve():\n    # Let's define a function to count the number of triangles\n    def count_triangles(max_side_length):\n        # Initialize the counter\n        count = 0\n        # Iterate through all possible side lengths\n        for a in range(1, max_side_length + 1):\n            for b in range(1, max_side_length + 1):\n                for c in range(1, max_side_length + 1):\n                    # Check if the sides form a triangle\n                    if a + b > c and a + c > b and b + c > a:\n                        # Increment the counter\n                        count += 1\n        return count\n    return count_triangles(11)", "answer_type": "integer"}
{"id": "jianyu_xu/inclusion_and_exclusion_1.json", "question": "How many integers between 1 (included) and 100 (included) are divisible by either 2, 3, or 5?", "prediction": 74, "answer": 74, "rationale": "def solve():\n    # Let's define a function to check if a number is divisible by either 2, 3, or 5\n    def is_divisible(n):\n        if n % 2 == 0 or n % 3 == 0 or n % 5 == 0:\n            return True\n        else:\n            return False\n    # Let's count the number of integers between 1 and 100 that are divisible by either 2, 3, or 5\n    count = 0\n    for i in range(1, 101):\n        if is_divisible(i):\n            count += 1\n    return count", "answer_type": "integer"}
{"id": "jianyu_xu/inclusion_and_exclusion_2.json", "question": "In how many ways can we color a loop of 5 vertices with 3 colors such that no two adjacent vertices have the same color?", "prediction": 243, "answer": 30, "rationale": "def solve():\n    # Let's define a function to calculate the number of ways to color a loop of n vertices with k colors\n    def num_ways(n, k):\n        # define the base case\n        if n == 0:\n            return 1\n        # use the recursive formula\n        return k * num_ways(n-1, k)\n    return num_ways(5, 3)", "answer_type": "integer"}
{"id": "jianyu_xu/integer_programming_1.json", "question": "30 students from 5 classes solved 40 math problems. Each student must answer at least one question. Every two students in the same class solved the same number of questions. The number of questions answered by any two students in different classes is also different. Question: What's maximum possible number of students who only answered one question?", "prediction": "24", "answer": 26, "rationale": " First, each class has at least 6 students, so the maximum number of students who only answered one question is 24. Then, since every two students in the same class solved the same number of questions, the maximum number of students who only answered one question is 24. Therefore, the answer is 24.", "answer_type": "integer"}
{"id": "jianyu_xu/integer_programming_2.json", "question": "Solve the following linear programming problems: maximize 3x + y subject to (1) -x + y <= 1, (2) 2x + y <= 4, (3) x>= 0 and y >= 0. What's [x, y] for the optimal solution?", "prediction": [0, 0], "answer": [2, 0], "rationale": "def solve():\n    # Let's define the objective function\n    def objective_function(x, y):\n        return 3*x + y\n    # Let's define the constraints\n    def constraint1(x, y):\n        return -x + y <= 1\n    def constraint2(x, y):\n        return 2*x + y <= 4\n    def constraint3(x, y):\n        return x >= 0\n    def constraint4(x, y):\n        return y >= 0\n    # Let's define the optimization problem\n    def optimize(objective_function, constraints):\n        # Let's define the initial values\n        x = 0\n        y = 0\n        # Let's loop until the constraints are satisfied\n        while not (constraint1(x, y) and constraint2(x, y) and constraint3(x, y) and constraint4(x, y)):\n            # Let's increase x and y\n            x += 1\n            y += 1\n        # Let's return the optimal solution\n        return [x, y]\n    return optimize(objective_function, [constraint1, constraint2, constraint3, constraint4])", "answer_type": "list of integer"}
{"id": "jianyu_xu/multiplication_1.json", "question": "Given that each cone can contain two ice cream balls, how many different ice cream cones can you make if you have 6 flavors of ice cream and 5 types of cones?", "prediction": null, "answer": 180, "rationale": "def solve():\n    # Let's define a function to calculate the number of different ice cream cones\n    def num_cones(flavors, cones):\n        # use the formula for combination\n        return int(factorial(flavors + cones - 1) / (factorial(flavors) * factorial(cones - 1)))\n    return num_cones(6, 5)", "answer_type": "integer"}
{"id": "jianyu_xu/pigeonhole_1.json", "question": "How many people at least shall we include in one group, such that there must exist two different people in this group whose birthdays are in the same month?", "prediction": 13, "answer": 13, "rationale": "def solve():\n    # We need to find the minimum number of people in a group such that there must exist two different people in this group whose birthdays are in the same month.\n    # We can use the pigeonhole principle to solve this problem.\n    # According to the pigeonhole principle, if we have n items and m pigeonholes, then at least one of the pigeonholes must contain more than one item, if n > m.\n    # In this case, we have 12 months and n people. So, the minimum number of people required is 13.\n    return 13", "answer_type": "integer"}
{"id": "jianyu_xu/pigeonhole_2.json", "question": "Arbitrarily place 19 points in a unit square and cover as many of these points as possible with a circle of diameter $\\frac{\\sqrt 2}{3}$. Question: At least how many points can be guaranteed to be covered?", "prediction": 19, "answer": 3, "rationale": "def solve():\n    # Let's define a function to calculate the number of points covered\n    def points_covered(radius):\n        # Let's define the coordinates of the 19 points\n        points = [(0.5, 0.5), (0.2, 0.2), (0.3, 0.7), (0.4, 0.1), (0.6, 0.3), (0.7, 0.6), (0.8, 0.4), (0.9, 0.9), (0.1, 0.5), (0.2, 0.8), (0.3, 0.2), (0.4, 0.7), (0.5, 0.1), (0.6, 0.4), (0.7, 0.9), (0.8, 0.3), (0.9, 0.6), (0.1, 0.8), (0.2, 0.5)]\n        # Let's define the center of the circle\n        center = (0.5, 0.5)\n        # Let's define the number of points covered\n        num_points_covered = 0\n        # Let's loop through the points\n        for point in points:\n            # Let's calculate the distance between the point and the center\n            distance = ((point[0] - center[0])**2 + (point[1] - center[1])**2)**0.5\n            # Let's check if the point is within the circle\n            if distance <= radius:\n                # If yes, let's increment the number of points covered\n                num_points_covered += 1\n        return num_points_covered\n    # Let's calculate the radius of the circle\n    radius = (2/3)**0.5\n    # Let's call the function to calculate the number of points covered\n    return points_covered(radius)", "answer_type": "integer"}
{"id": "jianyu_xu/pigeonhole_3.json", "question": "In a group of 10 people, each of whom has one of 3 different eye colors, at least how many people must have the same eye color?", "prediction": 1, "answer": 4, "rationale": "def solve():\n    # At least one person must have the same eye color\n    # So, the answer is 1\n    return 1", "answer_type": "integer"}
{"id": "jianyu_xu/pigeonhole_4.json", "question": "In a group of 1000 people, at least how many people have to share the same birthday?", "prediction": 23, "answer": 3, "rationale": "def solve():\n    # Let's define a function to calculate the probability of at least two people having the same birthday\n    def prob_same_birthday(n):\n        # Let's define the probability of two people having the same birthday\n        p = 1\n        # Let's calculate the probability of at least two people having the same birthday\n        for i in range(n):\n            p *= (365-i)/365\n        return 1-p\n    # Let's calculate the number of people needed to have at least two people having the same birthday\n    for i in range(1000):\n        if prob_same_birthday(i) >= 0.5:\n            return i", "answer_type": "integer"}
{"id": "jianyu_xu/pigeonhole_5.json", "question": "In a set of 20 positive integers, at least how many pairs of numbers have a difference that is a multiple of 10?", "prediction": 10, "answer": 10, "rationale": "def solve():\n    # Let's define a function to check if two numbers have a difference that is a multiple of 10\n    def is_multiple_of_10(a, b):\n        if abs(a - b) % 10 == 0:\n            return True\n        else:\n            return False\n    # Let's define a counter to count the number of pairs\n    count = 0\n    # Let's iterate through the set of 20 positive integers\n    for i in range(20):\n        for j in range(i+1, 20):\n            # Let's check if the difference between two numbers is a multiple of 10\n            if is_multiple_of_10(i, j):\n                # If yes, let's increase the counter\n                count += 1\n    return count", "answer_type": "integer"}
{"id": "maxku/basic-electronics-2-1.json", "question": "Given $V_s = 5V$, $R_1 = 480 \\Omega$, $R_2 = 320 \\Omega$, and $R_3 = 200 \\Omega$, find the power dissipated by the 3 resistors $P_1, P_2, P_3$ in the figure. Represent your answer as a list [$P_1, P_2, P_3$] in the unit of mW.", "prediction": [12.0, 8.0, 5.0], "answer": [12, 8, 5], "rationale": "def solve():\n    # Let's define the given values\n    Vs = 5\n    R1 = 480\n    R2 = 320\n    R3 = 200\n    # Let's calculate the total resistance\n    R_total = R1 + R2 + R3\n    # Let's calculate the current\n    I = Vs/R_total\n    # Let's calculate the power dissipated by each resistor\n    P1 = I**2 * R1\n    P2 = I**2 * R2\n    P3 = I**2 * R3\n    # Let's convert the power to mW\n    P1 = P1 * 1000\n    P2 = P2 * 1000\n    P3 = P3 * 1000\n    # Let's return the answer as a list\n    return [P1, P2, P3]", "answer_type": "list of integer"}
{"id": "maxku/basic-electronics-2-2.json", "question": "In the figure, given $V_{S1} = V_{S2} = V_{S3} = 5V$, and $R_1 = R_2 = R_3 = 100\\Omega$. Find the voltage values with reference to ground $V_A, V_B, V_C, V_D$ in the figure. Represent the answer in a list $[V_A, V_B, V_C, V_D]$ (in 3 sig.fig.) in the unit of V.", "prediction": [10.0, 10.0, 10.0, 0], "answer": [-5, -8, -6, 0], "rationale": "def solve():\n    # Let's define the given values\n    Vs1 = 5\n    Vs2 = 5\n    Vs3 = 5\n    R1 = 100\n    R2 = 100\n    R3 = 100\n    # Let's calculate the current\n    I1 = (Vs1 + Vs2 + Vs3)/(R1 + R2 + R3)\n    # Let's calculate the voltage\n    VA = Vs1 + I1*R1\n    VB = Vs2 + I1*R2\n    VC = Vs3 + I1*R3\n    VD = 0\n    # Let's return the answer\n    return [round(VA, 3), round(VB, 3), round(VC, 3), round(VD, 3)]", "answer_type": "list of integer"}
{"id": "maxku/basic-electronics-3-1.json", "question": "In the figure, at what rate is thermal energy being generated in the 2R-resistor when $V_s = 12V$ and $R = 3.0\\Omega$? Answer in unit of W.", "prediction": 48.0, "answer": 6, "rationale": "def solve():\n    # Let's define the given values\n    Vs = 12\n    R = 3.0\n    # Let's calculate the current\n    I = Vs/R\n    # Let's calculate the power\n    P = I**2 * R\n    # Let's return the power in unit of W\n    return P", "answer_type": "integer"}
{"id": "maxku/basic-electronics-3-2.json", "question": "In the figure, what is the magnitude of the potential difference across the $20 \\Omega$ resistor? Answer in unit of W (3 sig.fig.).", "prediction": 0.8, "answer": 7.76, "rationale": "def solve():\n    # Let's define the voltage across the resistor\n    V_resistor = 20 # in ohms\n    # Let's define the current through the resistor\n    I_resistor = 0.2 # in amps\n    # Let's calculate the potential difference across the resistor\n    V_diff = V_resistor * I_resistor # in volts\n    # Let's convert the voltage to watts\n    W_diff = V_diff * I_resistor # in watts\n    return round(W_diff, 3) # in watts (3 sig.fig.)", "answer_type": "float"}
{"id": "maxku/basic-electronics-3-3.json", "question": "In the figure,At what rate is thermal energy generated in the $20 \\Omega$ resistor? Answer in unit of W (3 sig.fig.).", "prediction": 5.0, "answer": 1.63, "rationale": "def solve():\n    # Let's define the variables\n    voltage = 10 # V\n    resistance = 20 # Ohm\n    # Let's calculate the current\n    current = voltage/resistance # A\n    # Let's calculate the power\n    power = voltage*current # W\n    # Let's round the result to 3 significant figures\n    return round(power, 3)", "answer_type": "float"}
{"id": "maxku/basic-electronics-5-3.json", "question": "Calculate the total capacitive reactance in the figure. Answer in unit of Ohm (3 sig.fig.).", "prediction": 2388.535, "answer": 3.18, "rationale": "def solve():\n    # Let's define capacitive reactance formula\n    def capacitive_reactance(C, f):\n        return 1/(2*3.14*f*C)\n    # Let's define the capacitance and frequency\n    C1 = 0.1e-6\n    C2 = 0.2e-6\n    f = 1000\n    # Let's calculate the total capacitive reactance\n    Xc = capacitive_reactance(C1, f) + capacitive_reactance(C2, f)\n    # Let's return the answer with 3 sig.fig.\n    return round(Xc, 3)", "answer_type": "float"}
{"id": "maxku/basic-electronics-5-4.json", "question": "Determine the time constant (i.e. \u03c4 ) of the circuit in the figure. Answer in unit of seconds (3 sig.fig.).", "prediction": null, "answer": 3.93, "rationale": "def solve():\n    # Let's define the time constant\n    \u03c4 = R * C\n    # Let's define the values of R and C\n    R = 10e3 # 10k\u03a9\n    C = 10e-6 # 10\u03bcF\n    # Let's calculate the time constant\n    \u03c4 = R * C\n    # Let's return the answer\n    return round(\u03c4, 3) # 3 sig.fig.", "answer_type": "float"}
{"id": "maxku/basic-electronics-6-1.json", "question": "Given the following circuit (with all current and voltage values in rms), find the value of $V_C$ in the unit of V.", "prediction": 10.0, "answer": 14.5, "rationale": "def solve():\n    # Let's define the given values\n    R1 = 10 # in ohm\n    R2 = 20 # in ohm\n    R3 = 30 # in ohm\n    V1 = 10 # in V\n    V2 = 20 # in V\n    # Let's calculate the total resistance\n    RT = R1 + R2 + R3\n    # Let's calculate the current\n    I = (V1 + V2) / RT\n    # Let's calculate the voltage across R3\n    VR3 = I * R3\n    # Let's calculate the voltage across R2\n    VR2 = I * R2\n    # Let's calculate the voltage across R1\n    VR1 = I * R1\n    # Let's calculate the voltage across C\n    VC = V2 - VR2\n    return VC", "answer_type": "float"}
{"id": "maxku/basic-electronics-6-2.json", "question": "Determine the value of R in order to get a phase angle of 35 degree between the source voltage and the total current in the figure. Give the answer in unit of $k\\Omega$ (3 sig.fig.).", "prediction": 0.016382999999999998, "answer": 3.59, "rationale": "def solve():\n    # Let's define the phase angle\n    phase_angle = 35\n    # Let's define the source voltage\n    V_s = 10\n    # Let's define the total current\n    I_t = 0.5\n    # Let's calculate the resistance\n    R = (V_s * np.cos(np.deg2rad(phase_angle))) / I_t\n    # Let's round the result to 3 sig.fig.\n    R = round(R, 3)\n    # Let's convert the result to kOhm\n    R = R / 1000\n    return R", "answer_type": "float"}
{"id": "maxku/basic-electronics-6-3.json", "question": "A load dissipates 1.5kW of power in an ac series RC circuit. Given that the power factor is 0.75, what is its reactive power $(P_r)$? What is its apparent power $(P_a)$? Represent the answer in a list [$P_r, P_a$] with unit kVA and kVAR respectively.", "prediction": [0.9921567416492215, 2.0], "answer": [2, 1], "rationale": "def solve():\n    # Let's define the given values\n    P = 1.5 # kW\n    PF = 0.75 # power factor\n    # Let's calculate the reactive power\n    Pr = P * (1 - PF**2)**0.5 # kVAR\n    # Let's calculate the apparent power\n    Pa = P / PF # kVA\n    return [Pr, Pa]", "answer_type": "list of integer"}
{"id": "maxku/basic-electronics-7-3.json", "question": "Determine the AC power gain for the common-emitter amplifier in the figure. Assume that $\\beta_{ac} = 100$, the internal emitter resistance $r_e = 12.3 \\Omega$.", "prediction": 112.3, "answer": 33540, "rationale": "def solve():\n    # Define the parameters\n    beta_ac = 100\n    re = 12.3\n    # Calculate the AC power gain\n    ac_power_gain = beta_ac * (1 + re/beta_ac)\n    return ac_power_gain", "answer_type": "integer"}
{"id": "maxku/basic-electronics-7-4.json", "question": "Determine the AC power gain for the emitter-follower in the figure. Assume that $\\beta_{ac} = 175$", "prediction": 0.9943181818181818, "answer": 24.1, "rationale": "def solve():\n    # Define the parameters\n    beta_ac = 175\n    # Calculate the AC power gain\n    ac_power_gain = beta_ac/(1 + beta_ac)\n    return ac_power_gain", "answer_type": "float"}
{"id": "maxku/basic-electronics-A1-1.json", "question": "Given $V_s = 5V$, $R_1 = 480 \\Omega$, $R_2 = 320 \\Omega$, and $R_3 = 200 \\Omega$, find the power dissipated by the 3 resistors $P_1, P_2, P_3$ in the figure. Represent your answer as a list [$P_1, P_2, P_3$] in the unit of mW.", "prediction": [12.0, 8.0, 5.0], "answer": [51.2, 78.15, 125.0], "rationale": "def solve():\n    # Let's define the given values\n    Vs = 5\n    R1 = 480\n    R2 = 320\n    R3 = 200\n    # Let's calculate the total resistance\n    R_total = R1 + R2 + R3\n    # Let's calculate the current\n    I = Vs/R_total\n    # Let's calculate the power dissipated by each resistor\n    P1 = I**2 * R1\n    P2 = I**2 * R2\n    P3 = I**2 * R3\n    # Let's convert the power to mW\n    P1 = P1 * 1000\n    P2 = P2 * 1000\n    P3 = P3 * 1000\n    # Let's return the answer as a list\n    return [P1, P2, P3]", "answer_type": "list of float"}
{"id": "maxku/basic-electronics-A2-2.json", "question": "Find the rms(Root Mean Square) voltage value (in V) of the waveform in figure (3 sig fig.).", "prediction": 6.762, "answer": 3.45, "rationale": "def solve():\n    # Let's define the function to calculate the rms voltage\n    def rms_voltage(voltage):\n        # calculate the sum of squares of the voltage\n        sum_of_squares = 0\n        for v in voltage:\n            sum_of_squares += v**2\n        # calculate the mean of the squares\n        mean_of_squares = sum_of_squares/len(voltage)\n        # calculate the root mean square voltage\n        rms_voltage = mean_of_squares**0.5\n        return round(rms_voltage, 3)\n    # Let's define the voltage values\n    voltage = [2.5, 3.2, 4.1, 5.3, 6.2, 7.1, 8.4, 9.2, 10.3]\n    return rms_voltage(voltage)", "answer_type": "float"}
{"id": "maxku/basic-electronics-H2-3.json", "question": "Given $V_s$ = 5V, $R_1$ = 1k\u03a9, $R_2$ = 2.2k\u03a9, $R_3$ = 2.2k\u03a9, $R_4$ = 1.5k\u03a9, and $R_L$ = 4.7k\u03a9. Determine the voltage and current across $R_L$. Answer in unit of V (3 sig.fig.).", "prediction": 2.026, "answer": 1.06, "rationale": "def solve():\n    # Define the given values\n    Vs = 5\n    R1 = 1000\n    R2 = 2200\n    R3 = 2200\n    R4 = 1500\n    RL = 4700\n    # Calculate the total resistance\n    RT = R1 + R2 + R3 + R4 + RL\n    # Calculate the current\n    I = Vs/RT\n    # Calculate the voltage across RL\n    VL = I*RL\n    # Round the result to 3 sig.fig.\n    VL = round(VL, 3)\n    return VL", "answer_type": "float"}
{"id": "maxku/basic-electronics-H3-7.json", "question": "Given that $V_A = V_B$, determine the value of $C_2$ (in \u03bcF) in the following circuit in the figure.", "prediction": 666666.6666666666, "answer": 0.103, "rationale": "def solve():\n    # Let's define the given values\n    V_A = V_B = 10 # in volts\n    R_1 = 10 # in ohms\n    R_2 = 20 # in ohms\n    # Let's calculate the current in the circuit\n    I = V_A / (R_1 + R_2) # in amperes\n    # Let's calculate the capacitance\n    C_2 = I * R_2 / V_A # in farads\n    # Let's convert the capacitance to microfarads\n    C_2 = C_2 * 10**6 # in microfarads\n    return C_2", "answer_type": "float"}
{"id": "maxku/cv-cnn1.json", "question": "Given a color image of size 28 x 28 x 3 pixels, how many convolutional filters in the first layer of a Convolutional Neural Network if the first layer's output tensor has size 26 x 26 x 64?", "prediction": 64, "answer": 64, "rationale": "def solve():\n    # The size of the input image is 28 x 28 x 3\n    # The size of the output tensor is 26 x 26 x 64\n    # The number of convolutional filters in the first layer is 64\n    return 64", "answer_type": "integer"}
{"id": "maxku/cv-cnn4.json", "question": "Consider Convolutional Neural Network D2 which takes input images of size 32x32 with 1 colour channels. The first layer of D2 uses 4 filters of size 5x5, a stride of 2, and zero-padding of width 1. The dimensions of the resulting activation map for each filter in this first layer will be k x k. What is the value of k?", "prediction": 15, "answer": 15, "rationale": "def solve():\n    # Let's define the variables\n    input_size = 32\n    filter_size = 5\n    stride = 2\n    padding = 1\n    # Let's calculate the output size\n    output_size = (input_size - filter_size + 2*padding) / stride + 1\n    return int(output_size)", "answer_type": "integer"}
{"id": "maxku/cv-cnn5.json", "question": "Consider Convolutional Neural Network D2 which takes input images of size 32x32 with 1 colour channels. The first layer of D2 uses 4 filters of size 5x5, a stride of 2, and zero-padding of width 1. Consider CNN D2 which takes input images of size 32x32 with 1 colour channels. The first layer of D2 uses 4 filters of size 5x5, a stride of 2, and zero-padding of width 1. What is the total number of weights defined for the entire activation output of this first layer? (ie. If you flattened all filters and channels into a single vector)", "prediction": 784, "answer": 900, "rationale": "def solve():\n    # The total number of weights is equal to the number of elements in the flattened vector\n    # The size of the output is (32-5+2)/2 + 1 = 14\n    # The number of channels is 1\n    # The number of filters is 4\n    # Therefore, the total number of weights is 14*14*1*4 = 784\n    return 784", "answer_type": "integer"}
{"id": "maxku/cv-cnn6.json", "question": "Consider Convolutional Neural Network D2 which takes input images of size 32x32 with 1 colour channels. The first layer of D2 uses 4 filters of size 5x5, a stride of 2, and zero-padding of width 1. Consider CNN D2 which takes input images of size 32x32 with 1 colour channels. The first layer of D2 uses 4 filters of size 5x5, a stride of 2, and zero-padding of width 1. What would be the total size of the flattened output vector from each filter?", "prediction": 225, "answer": 25, "rationale": "def solve():\n    # Let's define the size of the input image\n    input_size = 32\n    # Let's define the size of the filter\n    filter_size = 5\n    # Let's define the stride\n    stride = 2\n    # Let's define the zero-padding width\n    padding_width = 1\n    # Let's calculate the output size\n    output_size = (input_size - filter_size + 2*padding_width)//stride + 1\n    # Let's calculate the total size of the flattened output vector\n    total_size = output_size * output_size\n    return total_size", "answer_type": "integer"}
{"id": "maxku/cv-colorsci1-rgb.json", "question": "What is the total number of colors in RGB color space?", "prediction": 16777216, "answer": 16777216, "rationale": "def solve():\n    # RGB color space has 256 values for each color\n    # So, the total number of colors is 256 x 256 x 256\n    return 256 * 256 * 256", "answer_type": "integer"}
{"id": "maxku/cv-colorsci2-hsi.json", "question": "Given 2 colors whose HSI representations are given as follows: (a) $(pi, 0.3,0.5)$, (b) $(0.5 pi, 0.8,0.3)$, which color is brighter?", "prediction": "brighter", "answer": "(a)", "rationale": " The brightness of a color is determined by its intensity, which is the third value in the HSI representation. Therefore, color (b) has a higher intensity of 0.8 compared to color (a) with an intensity of 0.5. Therefore, the answer is color (b) is brighter.", "answer_type": "option"}
{"id": "maxku/cv-colorsci3-rgb.json", "question": "Given 3 Colors whose RGB representations are given as follows: Color 1: (0.5, 0.5, 0.5), Color 2: (0.4, 0.6, 0.5), Color 3: (0.3, 0.7, 0.5), Which Color does not carry chrominance (Color) Information? Answer with 1 or 2 or 3.", "prediction": null, "answer": 1, "rationale": "def solve():\n    # Let's define the RGB values of the 3 colors\n    color1 = (0.5, 0.5, 0.5)\n    color2 = (0.4, 0.6, 0.5)\n    color3 = (0.3, 0.7, 0.5)\n    # Let's check if any of the colors have the same RGB values\n    if color1 == color2 and color2 == color3:\n        # If all the colors have the same RGB values, then none of them carry chrominance information\n        return None\n    else:\n        # If any of the colors have different RGB values, then the one with the same RGB values does not carry chrominance information\n        if color1 == color2:\n            return 1\n        elif color2 == color3:\n            return 2\n        elif color1 == color3:\n            return 3", "answer_type": "integer"}
{"id": "maxku/cv-colorsci4-hsi.json", "question": "Given 2 colors whose HSI representations are given as follows: which color looks closer to blue? (a) Color 1: $(\\pi, 0.3,0.5)$, (b) Color 2: $(0.5 \\pi, 0.8,0.3)$", "prediction": "(a) Color 1", "answer": "(a)", "rationale": " The HSI representation of blue is $(\\frac{4\\pi}{3}, 1, 0.5)$. Comparing the hue values of Color 1 and Color 2, we can see that Color 1 has a hue value of $\\pi$ which is closer to $\\frac{4\\pi}{3}$ than Color 2's hue value of $0.5\\pi$. Therefore, the answer is (a) Color 1.", "answer_type": "option"}
{"id": "maxku/cv-colorsci5-hsi.json", "question": "Given that the Hue-Saturation subspace shown in Fig. Q2 is a perfect circle and that colors A, B and C can be represented as the 3 points shown in the subspace. Which color has the smallest saturation coefficient?", "prediction": "C", "answer": "(b)", "rationale": " The saturation coefficient is the distance from the center of the circle to the point representing the color. Therefore, the color with the smallest saturation coefficient is color C, since it is the closest to the center of the circle. Therefore, the answer is C.", "answer_type": "option"}
{"id": "maxku/cv-imageprocessing1-morphology.json", "question": "In Image processing, opening is a process in which first dilation operation is performed and then erosion operation is performed. Is it true?", "prediction": "True", "answer": false, "rationale": " Opening is a process in which first dilation operation is performed and then erosion operation is performed. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "maxku/cv-imageprocessing10-digital-image.json", "question": "Calculate the required memory size in Mebibytes (MiB) (in 3 sig.fig.) for storing a frame in 720p if the sampling scheme Y'CbCr 4:2:0 is used. Note that There are 1280 \u00d7 720 pixels in one 720p frame. Each pixel contains three primary-colour components. Each primary-colour component requires 1 byte of memory for storage. 1 Mebibyte has 1024^2 bytes.", "prediction": 2.637, "answer": 1.32, "rationale": "def solve():\n    # Let's define the required memory size\n    memory_size = 1280 * 720 * 3 / (1024**2)\n    # Let's round the result to 3 significant figures\n    return round(memory_size, 3)", "answer_type": "float"}
{"id": "maxku/cv-imageprocessing11-histogram.json", "question": "An image has the gray level PDF $p_r(r)$ shown in Fig. Q1a. One wants to do histogram specification SO that the processed image will have the specified $p_z(z)$ shown in Fig. Q1b. Can we use intensity mapping function $T: z=1-r$ to achieve the goal?", "prediction": "True", "answer": false, "rationale": " First, we need to check if the two PDFs are equal. We can calculate the integral of $p_r(r)$ and $p_z(z)$ and compare the results. If the two integrals are equal, then we can use the intensity mapping function $T: z=1-r$ to achieve the goal.\n\nTherefore, the answer is True.", "answer_type": "bool"}
{"id": "maxku/cv-imageprocessing12-chaincode.json", "question": "Figure Q8 shows the contour of an object. Represent it with an 8-directional chain code. Represent the answer as a list with each digit as a element.", "prediction": 2.637, "answer": [6, 7, 0, 6, 6, 4, 3, 4, 3, 1, 1], "rationale": "", "answer_type": "list of integer"}
{"id": "maxku/cv-imageprocessing13-chaincode.json", "question": "Represent the contour of the object shown in the figure in a clockwise direction with a 4-directional chain code. Use the left upper corner as the starting point. The answer need to be normalized with respect to the orientation of the object. Represent the answer as a list with each digit as a element.", "prediction": [0, 1, 1, 2, 2, 2, 3, 3, 3, 3, 0, 0, 0, 0, 1], "answer": [1, 0, 1, 1, 3, 0, 1, 1, 3, 1, 1, 3], "rationale": "def solve():\n    # Let's define the 4-directional chain code\n    # 0: left, 1: up, 2: right, 3: down\n    chain_code = [0, 1, 2, 3]\n    # Let's define the contour of the object\n    contour = [0, 1, 1, 2, 2, 2, 3, 3, 3, 3, 0, 0, 0, 0, 1]\n    # Let's normalize the contour with respect to the orientation of the object\n    normalized_contour = []\n    for i in range(len(contour)):\n        normalized_contour.append((contour[i] + 4 - contour[0]) % 4)\n    # Let's return the normalized contour\n    return normalized_contour", "answer_type": "list of integer"}
{"id": "maxku/cv-imageprocessing14-chaincode.json", "question": "Figure Q8 shows the contour of an object. Represent it with an 4-directional chain code. Represent the answer as a list with each digit as a element.", "prediction": [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 3, 2, 2, 1, 1, 0, 0, 0, 1, 1, 2, 2, 3, 3, 2, 2, 1, 1], "answer": [0, 0, 3, 3, 3, 3, 2, 3, 2, 2, 1, 2, 1, 1, 1, 0, 0, 1], "rationale": "def solve():\n    # Let's define the 4-directional chain code\n    # 0: right, 1: up, 2: left, 3: down\n    chain_code = [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 3, 2, 2, 1, 1, 0, 0, 0, 1, 1, 2, 2, 3, 3, 2, 2, 1, 1]\n    return chain_code", "answer_type": "list of integer"}
{"id": "maxku/cv-imageprocessing15-DCT-2.json", "question": "The 4 8x8 images shown below are encoded with JPEG coding. Based on their expected DCT (Discrete Cosine Transform) coefficients, Which image has the most non-zero AC coefficients? (a): Image A, (b): Image B, (c): Image C, (d): Image D.", "prediction": "(d): Image D", "answer": "(b)", "rationale": " JPEG coding is a type of lossy compression, which means that some of the information is lost during the compression process. The Discrete Cosine Transform (DCT) is used to convert the image from the spatial domain to the frequency domain. The AC coefficients are the coefficients that represent the frequency components of the image. Therefore, the image with the most non-zero AC coefficients is Image D. Therefore, the answer is (d): Image D.", "answer_type": "option"}
{"id": "maxku/cv-imageprocessing15-DCT.json", "question": "The 4 8x8 images shown below are encoded with JPEG coding. Based on their expected DCT (Discrete Cosine Transform) coefficients, Sort the images according to the magnitude of their DC coefficients. Provide your answer in a list of ascending order.", "prediction": null, "answer": [0, 1, 2, 3], "rationale": "def solve():\n    # Let's define a list of images\n    images = [image1, image2, image3, image4]\n    # Let's define a list to store the DC coefficients\n    dc_coefficients = []\n    # Let's loop through the images\n    for image in images:\n        # Let's calculate the DC coefficient of each image\n        dc_coefficient = calculate_dc_coefficient(image)\n        # Let's append the DC coefficient to the list\n        dc_coefficients.append(dc_coefficient)\n    # Let's sort the list in ascending order\n    dc_coefficients.sort()\n    # Let's return the sorted list\n    return dc_coefficients", "answer_type": "list of integer"}
{"id": "maxku/cv-imageprocessing16-chaincode.json", "question": "Fig. Q4 shows the contour of an object. Represent it with an 8-directional chain code. The resultant chain code should be normalized with respect to the starting point of the chain code. Represent the answer as a list with each digit as a element.", "prediction": [], "answer": [0, 2, 0, 2, 1, 7, 1, 2, 0, 3, 0, 6], "rationale": "def solve():\n    # Let's define the 8-directional chain code\n    chain_code = {\n        '0': 'right',\n        '1': 'right-up',\n        '2': 'up',\n        '3': 'left-up',\n        '4': 'left',\n        '5': 'left-down',\n        '6': 'down',\n        '7': 'right-down'\n    }\n    # Let's define the normalized chain code\n    normalized_chain_code = []\n    # Let's define the starting point\n    start_point = (1, 1)\n    # Let's define the contour of the object\n    contour = [(1, 1), (2, 1), (3, 1), (3, 2), (3, 3), (2, 3), (1, 3), (1, 2)]\n    # Let's iterate through the contour\n    for i in range(len(contour)):\n        # Let's get the current point\n        current_point = contour[i]\n        # Let's get the next point\n        next_point = contour[(i + 1) % len(contour)]\n        # Let's calculate the direction\n        direction = (next_point[0] - current_point[0], next_point[1] - current_point[1])\n        # Let's find the corresponding chain code\n        for key, value in chain_code.items():\n            if value == direction:\n                normalized_chain_code.append(key)\n    return normalized_chain_code", "answer_type": "list of integer"}
{"id": "maxku/cv-imageprocessing2-morphology.json", "question": "In Image processing, closing is a process in which first dilation operation is performed and then erosion operation is performed. Is it true?", "prediction": "True", "answer": true, "rationale": " In image processing, closing is a process that involves two operations: dilation and erosion. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "maxku/cv-imageprocessing5-histogram.json", "question": "Given image \\begin{tabular}{|llll|} \\hline 7 & 1 & 6 & 0 \\\\ 3 & 3 & 7 & 6 \\\\ 6 & 6 & 5 & 7 \\\\ \\hline \\end{tabular} , and the bit-depth of the image is 4. Is the contrast of the image is poor? Judge it based on the histogram of the image.", "prediction": "True", "answer": true, "rationale": " First, the bit-depth of the image is 4, which means the image has 16 possible values. Second, the histogram of the image shows that the values are not evenly distributed, which means the contrast of the image is poor. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "maxku/cv-imageprocessing6-histogram.json", "question": "Given image \\begin{tabular}{|llll|} \\hline 7 & 1 & 6 & 0 \\\\ 3 & 3 & 7 & 6 \\\\ 6 & 6 & 5 & 7 \\\\ \\hline \\end{tabular} , and the bit-depth of the image is 4. Suppose you want to use the thresholding technique to segment the image. What is the appropriate threshold value based on the histogram of the image? Follow the following rule when you do thresholding or grouping: pixel $(i, j) \\in$ Group A pixels if $g(i, j) \\leq$ current threshold $\\mathrm{T}$; pixel $(i, j) \\in$ Group B pixels otherwise, where $g(i, j)$ is the intensity value of pixel $(i, j)$.", "prediction": 0, "answer": 4, "rationale": "def solve():\n    # Let's define a function to calculate the histogram of the image\n    def histogram(image):\n        # Initialize the histogram\n        hist = [0] * 16\n        # Iterate through the image\n        for row in image:\n            for pixel in row:\n                # Increment the corresponding bin in the histogram\n                hist[pixel] += 1\n        return hist\n    # Let's define a function to calculate the threshold value\n    def threshold(hist):\n        # Initialize the threshold\n        T = 0\n        # Iterate through the histogram\n        for i in range(len(hist)):\n            # Calculate the sum of the pixels in Group A\n            sum_A = sum(hist[:i])\n            # Calculate the sum of the pixels in Group B\n            sum_B = sum(hist[i:])\n            # Calculate the difference between the two groups\n            diff = abs(sum_A - sum_B)\n            # Update the threshold if the difference is smaller\n            if diff < T:\n                T = diff\n        return T\n    # Let's call the functions\n    image = [[7, 1, 6, 0], [3, 3, 7, 6], [6, 6, 5, 7]]\n    hist = histogram(image)\n    T = threshold(hist)\n    return T", "answer_type": "integer"}
{"id": "maxku/cv-imageprocessing7-histogram.json", "question": "Given an image $$ \\begin{array}{llllllll} 6 & 5 & 6 & 7 & 7 & 7 & 7 & 7 \\\\ 7 & 7 & 7 & 7 & 6 & 7 & 7 & 7 \\\\ 8 & 8 & 8 & 6 & 5 & 5 & 6 & 7 \\\\ 8 & 8 & 8 & 6 & 4 & 3 & 5 & 7 \\\\ 7 & 8 & 8 & 6 & 3 & 3 & 4 & 6 \\\\ 7 & 8 & 8 & 6 & 4 & 3 & 4 & 6 \\\\ 8 & 8 & 8 & 7 & 5 & 5 & 5 & 5 \\\\ 8 & 9 & 9 & 8 & 7 & 6 & 6 & 4 \\end{array} $$ . Find an appropriate threshold for thresholding the following image into 2 regions using the histogram.", "prediction": null, "answer": 6.25, "rationale": "def solve():\n    # Let's define a function to calculate the histogram of the given image\n    def histogram(image):\n        # Initialize the histogram\n        hist = [0] * 256\n        # Iterate over the image\n        for row in image:\n            for pixel in row:\n                # Increment the histogram count for the corresponding pixel value\n                hist[pixel] += 1\n        return hist\n    # Let's calculate the histogram of the given image\n    hist = histogram(image)\n    # Let's find the appropriate threshold for thresholding the image\n    threshold = 0\n    for i in range(len(hist)):\n        if hist[i] > 0:\n            threshold = i\n            break\n    return threshold", "answer_type": "float"}
{"id": "maxku/cv-imageprocessing8-fourier.json", "question": "In the process of searching circles in an image, object O is detected. The contour of the object O is represented with the Fourier Descriptors (80,40,0,0,-1,0,0,1). Given that the Fourier Descriptors of a circle are (0,40,0,0,0,0,0,0). Is the object O a circle-like polygon in the image? Bear in mind that there is some high frequency noise in the image. You should take this into account when you make your judgment.", "prediction": "True", "answer": true, "rationale": " First, we need to compare the Fourier Descriptors of the object O and a circle. We can see that the first two descriptors are different, while the rest are the same. This indicates that the object O is not a perfect circle, but a circle-like polygon. Secondly, we need to consider the high frequency noise in the image. This noise may cause some distortion in the contour of the object O, which may lead to the difference between the Fourier Descriptors of the object O and a circle. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "maxku/cv-imageprocessing8-fourier2.json", "question": "In the process of searching circles in an image, object O is detected. The contour of the object O is represented with the Fourier Descriptors (-20,60,-20,20,-20,21,-20,20). Given that the Fourier Descriptors of a circle are (0,40,0,0,0,0,0,0). Is the object O a circle-like polygon in the image? Bear in mind that there is some high frequency noise in the image. You should take this into account when you make your judgment.", "prediction": "True", "answer": false, "rationale": " First, we need to compare the Fourier Descriptors of the object O and a circle. We can see that the first two descriptors of the object O are different from the circle, which means that the object O is not a perfect circle. However, the other descriptors of the object O are similar to the circle, which means that the object O is a circle-like polygon. Taking into account the high frequency noise in the image, it is reasonable to conclude that the object O is a circle-like polygon. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "maxku/cv-imageprocessing8-fourier3.json", "question": "In the process of searching circles in an image, object O is detected. The contour of the object O is represented with the Fourier Descriptors (0,113,0,0,1,0,0,1). Given that the Fourier Descriptors of a circle are (0,40,0,0,0,0,0,0). Is the object O a circle-like polygon in the image? Bear in mind that there is some high frequency noise in the image. You should take this into account when you make your judgment.", "prediction": "not a circle-like polygon in the image", "answer": true, "rationale": " First, we need to compare the Fourier Descriptors of the object O and a circle. The first two descriptors of the object O are 0 and 113, while the first two descriptors of a circle are 0 and 40. Since the first two descriptors of the object O are larger than the first two descriptors of a circle, it indicates that the object O is not a circle. Moreover, the other descriptors of the object O are not all 0, which means that the object O is not a perfect circle. Therefore, the object O is not a circle-like polygon in the image.", "answer_type": "bool"}
{"id": "maxku/cv-imageprocessing8-fourier4.json", "question": "In the process of searching circles in an image, object O is detected. The contour of the object O is represented with the Fourier Descriptors (35,129,0,1,0,0,-1,0). Given that the Fourier Descriptors of a circle are (0,40,0,0,0,0,0,0). Is the object O a circle-like polygon in the image? Bear in mind that there is some high frequency noise in the image. You should take this into account when you make your judgment.", "prediction": "possible", "answer": true, "rationale": " First, we need to compare the Fourier Descriptors of the object O and a circle. The first two descriptors of the object O are 35 and 129, which are much larger than 0 and 40 of a circle. This indicates that the object O is not a circle. Second, we need to consider the high frequency noise in the image. The noise may cause the Fourier Descriptors of the object O to be different from a circle. Therefore, it is possible that the object O is a circle-like polygon in the image.\n\nTherefore, the answer is: It is possible.", "answer_type": "bool"}
{"id": "maxku/cv-imageprocessing9-digital-image.json", "question": "Calculate the required memory size in Mebibytes (MiB) (in 3 sig.fig.)  for storing a frame in 1080p if the sampling scheme R'G'B' 4:4:4 is used. Note that there are 1920 \u00d7 1080 pixels in one 1080p frame. Each pixel contains three primary-colour components. Each primary-colour component requires 1 byte of memory for storage. 1 Mebibyte has 1024^2 bytes.", "prediction": 5.933, "answer": 5.93, "rationale": "def solve():\n    # Calculate the required memory size\n    memory_size = 1920 * 1080 * 3 / (1024**2)\n    # Round the result to 3 significant figures\n    memory_size = round(memory_size, 3)\n    return memory_size", "answer_type": "float"}
{"id": "maxku/cv-videoprocessing1-digital-video.json", "question": "A one-hour color video in YUV format has a frame resolution of 1920x1080 with a 4:2:2 color sub-sampling format, 8 bits for each component, and a frame rate of 30 frames/s. Determine the storage requirement for the video in Gbytes (3 sig. fig.).", "prediction": 0.058, "answer": 417, "rationale": "def solve():\n    # Let's define the variables\n    frame_resolution = (1920, 1080)\n    color_sub_sampling = 4/2/2\n    bits_per_component = 8\n    frame_rate = 30\n    # Let's calculate the storage requirement\n    storage_requirement = (frame_resolution[0] * frame_resolution[1] * color_sub_sampling * bits_per_component * frame_rate) / (8 * 1024 * 1024 * 1024)\n    return round(storage_requirement, 3)", "answer_type": "integer"}
{"id": "maxku/cv-videoprocessing2-digital-video.json", "question": "A remote database contains 30 seconds of color motion-video. The video sequence is of the format (352 \u0301288 pixels) with RGB digitization at 30 frames per second. Find the the data rate for this motion-video in Mbits/s (3 sig. fig.).", "prediction": 9.124, "answer": 69.6, "rationale": "def solve():\n    # Let's define the variables\n    width = 352\n    height = 288\n    frames_per_second = 30\n    # Let's calculate the data rate\n    data_rate = (width * height * 3 * frames_per_second) / (1000 * 1000)\n    return round(data_rate, 3)", "answer_type": "float"}
{"id": "maxku/cv-videoprocessing3-motion-vector.json", "question": "Fig 1(a) and 1(b) show the situation of a reference frame and a current block for block matching motion estimation. The size of searching window is 14x2 while the block size is 2x2. The numbers within the squares are the pixel values. Determine the optimum motion vector.", "prediction": [0, 0], "answer": [-4, 0], "rationale": "def solve():\n    # Let's define a function to calculate the sum of absolute differences (SAD)\n    def SAD(ref, cur):\n        # Initialize the SAD value\n        sad = 0\n        # Iterate through the reference frame and current block\n        for i in range(2):\n            for j in range(2):\n                # Calculate the absolute difference between the two pixels\n                diff = abs(ref[i][j] - cur[i][j])\n                # Add the absolute difference to the SAD value\n                sad += diff\n        return sad\n    \n    # Initialize the reference frame and current block\n    ref = [[1, 2], [3, 4]]\n    cur = [[5, 6], [7, 8]]\n    \n    # Initialize the search window size\n    search_window_size = 14\n    \n    # Initialize the motion vector\n    motion_vector = [0, 0]\n    \n    # Initialize the minimum SAD value\n    min_sad = float('inf')\n    \n    # Iterate through the search window\n    for i in range(search_window_size):\n        for j in range(search_window_size):\n            # Calculate the SAD value\n            sad = SAD(ref, cur)\n            # Update the motion vector and minimum SAD value if the SAD value is smaller\n            if sad < min_sad:\n                min_sad = sad\n                motion_vector = [i, j]\n    return motion_vector", "answer_type": "list of integer"}
{"id": "maxku/cv-videoprocessing4-gop.json", "question": "A QCIF (176x144) image sequence is encoded using the MPEG video coding algorithm with the following Group Of Pictures (GOP). When a single bit error occurs in the 5th picture of a GOP, which pictures could possibly be affected by this error? Represent the answer in a list sorted in ascending order.", "prediction": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "answer": [4, 6, 7, 8, 9, 10, 11, 12], "rationale": "def solve():\n    # Let's define a list of pictures affected by the error\n    affected_pictures = []\n    # Let's add the 5th picture to the list\n    affected_pictures.append(5)\n    # Let's add the pictures before the 5th picture to the list\n    for i in range(1, 5):\n        affected_pictures.append(i)\n    # Let's add the pictures after the 5th picture to the list\n    for i in range(6, 11):\n        affected_pictures.append(i)\n    # Let's sort the list in ascending order\n    affected_pictures.sort()\n    return affected_pictures", "answer_type": "list of integer"}
{"id": "maxku/fourier1-FS.json", "question": "Consider a periodic signal $x(t)$ with period $(T)$ equals to ten. Over one period (i.e., $-5 \\leq t<5)$, it is defined as $$ x(t)=\\left\\{\\begin{array}{cc} 2 & -5 \\leq t<0 \\\\ -2 & 0 \\leq t<5 \\end{array}\\right. $$ In Fourier series, the signal $x(t)$ is written in the form of $$ x(t)=\\sum_{k=-\\infty}^{\\infty} c_k e^{\\frac{j 2 \\pi k t}{T}} $$ where the Fourier series coefficient $c_k$ is obtained as, $$ c_k=\\frac{1}{T} \\int_{-\\frac{T}{2}}^{\\frac{T}{2}} x(t) e^{-\\frac{j 2 \\pi k t}{T}} d t $$ Determine the value of $c_0$ (i.e., $\\left.k=0\\right)$", "prediction": null, "answer": 0, "rationale": "def solve():\n    # Let's define the function x(t)\n    def x(t):\n        if t < 0:\n            return 2\n        elif t >= 0 and t < 5:\n            return -2\n        else:\n            return 0\n    # Let's define the Fourier series coefficient c_k\n    def c_k(k):\n        # Let's define the integral\n        def integral(t):\n            return x(t) * np.exp(-1j * 2 * np.pi * k * t / 10)\n        # Let's calculate the integral\n        return (1/10) * integrate.quad(integral, -5, 5)[0]\n    # Let's return the value of c_0\n    return c_k(0)", "answer_type": "integer"}
{"id": "maxku/fourier2-FT.json", "question": "Is the Fourier transform of the signal $x_1(t)=\\left\\{\\begin{array}{cc}\\sin \\omega_0 t, & -\\frac{2 \\pi}{\\omega_0} \\leq t \\leq \\frac{2 \\pi}{\\omega_0} \\\\ 0, & \\text { otherwise }\\end{array}\\right.$ imaginary?", "prediction": "False", "answer": true, "rationale": " The Fourier transform of a signal $x_1(t)$ is defined as:\n\n$$X_1(\\omega)=\\int_{-\\infty}^{\\infty} x_1(t) e^{-j \\omega t} dt$$\n\nSubstituting the given signal $x_1(t)$ in the above equation, we get:\n\n$$X_1(\\omega)=\\int_{-\\frac{2 \\pi}{\\omega_0}}^{\\frac{2 \\pi}{\\omega_0}} \\sin \\omega_0 t e^{-j \\omega t} dt$$\n\nNow, we can solve this integral to get:\n\n$$X_1(\\omega)=\\frac{1}{j \\omega - \\omega_0} - \\frac{1}{j \\omega + \\omega_0}$$\n\nTherefore, the Fourier transform of the signal $x_1(t)$ is not imaginary. Therefore, the answer is False.", "answer_type": "bool"}
{"id": "maxku/fourier3-FT.json", "question": "Is the Fourier transform of the signal $x_1(t)=\\left\\{\\begin{array}{cc}\\sin \\omega_0 t, & -\\frac{2 \\pi}{\\omega_0} \\leq t \\leq \\frac{2 \\pi}{\\omega_0} \\\\ 0, & \\text { otherwise }\\end{array}\\right.$ even?", "prediction": "True", "answer": false, "rationale": " The Fourier transform of a signal is defined as:\n\n$$X_1(\\omega) = \\int_{-\\infty}^{\\infty} x_1(t) e^{-j \\omega t} dt$$\n\nSince $x_1(t)$ is an even function, the Fourier transform of $x_1(t)$ is also an even function. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "maxku/fourier4-FT.json", "question": "Is the Fourier transform of the signal x(t)=(1-e^{-|t|})[u(t+1)-u(t-1)] even?", "prediction": "True", "answer": true, "rationale": " The Fourier transform of a signal is defined as the integral of the signal multiplied by the complex exponential. Since the signal x(t) is an even function, the Fourier transform of x(t) is also an even function. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "maxku/fourier5-FT.json", "question": "Is the Fourier transform of the signal x(t)=(1-e^{-|t|})[u(t+1)-u(t-1)] real?", "prediction": "True", "answer": true, "rationale": " The Fourier transform of a real signal is always a conjugate symmetric signal. The signal x(t) is real, so its Fourier transform should be conjugate symmetric. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "maxku/fourier6-FT.json", "question": "If x(n) and X(k) are an N-point DFT pair, then x(n+N)=x(n). Is it true?", "prediction": "True", "answer": true, "rationale": " The definition of DFT pair is that X(k) is the DFT of x(n) and x(n) is the inverse DFT of X(k). Therefore, if x(n+N) is the inverse DFT of X(k), then it must be equal to x(n). Therefore, the answer is True.", "answer_type": "bool"}
{"id": "maxku/fourier7-FT.json", "question": "If $X(k)$ is the N-point DFT of a sequence $x(n)$, then circular time shift property is that N-point DFT of $x((n-I))_N$ is $X(k) e^{-j 2 \\pi k \\mid / N}$. Is it true?", "prediction": "True", "answer": true, "rationale": " The N-point DFT of a sequence $x(n)$ is $X(k)$. The N-point DFT of $x((n-I))_N$ is $X(k) e^{-j 2 \\pi k \\mid / N}$. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "maxku/graphtheory1-vertexcover.json", "question": "Let a undirected graph G with edges E = {<2,1>,<2,0>,<2,3>,<1,4>,<4,3>}, which <A,B> represent Node A is connected to Node B. What is the minimum vertex cover of G? Represent the vertex cover in a list of ascending order.", "prediction": [0, 1, 2, 3, 4], "answer": [2, 4], "rationale": "def solve():\n    # Let's define a function to find the minimum vertex cover\n    def min_vertex_cover(E):\n        # Let's define a set to store the vertex cover\n        vertex_cover = set()\n        # Let's iterate through the edges\n        for edge in E:\n            # Let's add the first node of the edge to the vertex cover\n            vertex_cover.add(edge[0])\n            # Let's add the second node of the edge to the vertex cover\n            vertex_cover.add(edge[1])\n        # Let's sort the vertex cover\n        vertex_cover = sorted(vertex_cover)\n        return vertex_cover\n    # Let's define the edges\n    E = [[2,1],[2,0],[2,3],[1,4],[4,3]]\n    return min_vertex_cover(E)", "answer_type": "list of integer"}
{"id": "maxku/graphtheory10-shortestpath.json", "question": "Let a undirected graph G with edges E = {<1,2>,<2,4>,<5,4>,<5,6>}, which <A,B> represent Node A is connected to Node B. What is the shortest path from node 1 to node 6? Represent the path as a list.", "prediction": [1, 2, 4, 5, 6], "answer": [1, 2, 4, 5, 6], "rationale": "def solve():\n    # Let's define a graph\n    graph = {\n        1: [2],\n        2: [1, 4],\n        4: [2, 5],\n        5: [4, 6],\n        6: [5]\n    }\n    # Let's define a function to find the shortest path\n    def find_shortest_path(graph, start, end, path=[]):\n        path = path + [start]\n        if start == end:\n            return path\n        if start not in graph:\n            return None\n        shortest = None\n        for node in graph[start]:\n            if node not in path:\n                newpath = find_shortest_path(graph, node, end, path)\n                if newpath:\n                    if not shortest or len(newpath) < len(shortest):\n                        shortest = newpath\n        return shortest\n    return find_shortest_path(graph, 1, 6)", "answer_type": "list of integer"}
{"id": "maxku/graphtheory11-shortestpath-hard.json", "question": "Let a undirected graph G with edges E = {<0,1>,<1,3>,<0,3>,<3,4>,<0,4>,<1,2>,<2,5>,<2,7>,<2,6>,<6,7>,<6,10>,<5,8>,<10,9>,<5,10>,<6,8>,<7,8>,<6,9>,<7,10>,<8,10>,<9,11>,<9,12>,<9,13>,<13,12>,<13,11>,<11,14>}, which <A,B> represent Node A is connected to Node B. What is the shortest path from node 1 to node 14? Represent the path as a list.", "prediction": [1, 2, 6, 9, 11, 14], "answer": [1, 2, 6, 9, 11, 14], "rationale": "def solve():\n    # Let's define a graph\n    graph = {\n        0: [1, 3, 4],\n        1: [0, 2],\n        2: [1, 5, 6, 7],\n        3: [0, 4],\n        4: [0, 3],\n        5: [2, 8, 10],\n        6: [2, 7, 8, 9, 10],\n        7: [2, 6, 8, 10],\n        8: [5, 6, 7, 10],\n        9: [6, 10, 11, 12, 13],\n        10: [5, 6, 7, 8, 9],\n        11: [9, 13, 14],\n        12: [9, 13],\n        13: [9, 11, 12],\n        14: [11]\n    }\n    # Let's define a function to find the shortest path\n    def find_shortest_path(graph, start, end, path=[]):\n        path = path + [start]\n        if start == end:\n            return path\n        if start not in graph:\n            return None\n        shortest = None\n        for node in graph[start]:\n            if node not in path:\n                newpath = find_shortest_path(graph, node, end, path)\n                if newpath:\n                    if not shortest or len(newpath) < len(shortest):\n                        shortest = newpath\n        return shortest\n    return find_shortest_path(graph, 1, 14)", "answer_type": "list of integer"}
{"id": "maxku/graphtheory12-vertexcover-hard.json", "question": "Let a undirected graph G with edges E = {<0,2>,<1,4>,<9,6>,<8,12>,<2,4>,<1,3>,<1,5>,<12,1>,<8,1>,<5,9>,<0,10>,<5,2>,<0,8>,<3,4>,<3,11>,<7,1>,<2,1>,<0,12>,<1,0>,<7,8>}, which <A,B> represent Node A is connected to Node B. What is the minimum vertex cover of G? Represent the vertex cover in a list of ascending order.", "prediction": [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 5, 5, 5, 6, 7, 7, 8, 8, 9, 10, 11, 12, 12], "answer": [0, 1, 2, 3, 8, 9], "rationale": "def solve():\n    # Let's define a function to find the minimum vertex cover\n    def min_vertex_cover(graph):\n        # Initialize the vertex cover\n        vertex_cover = []\n        # Iterate through the edges\n        for edge in graph:\n            # Add the first node of the edge to the vertex cover\n            vertex_cover.append(edge[0])\n            # Check if the second node of the edge is already in the vertex cover\n            if edge[1] not in vertex_cover:\n                # If not, add it to the vertex cover\n                vertex_cover.append(edge[1])\n        # Sort the vertex cover in ascending order\n        vertex_cover.sort()\n        return vertex_cover\n    # Define the graph\n    graph = [[0,2],[1,4],[9,6],[8,12],[2,4],[1,3],[1,5],[12,1],[8,1],[5,9],[0,10],[5,2],[0,8],[3,4],[3,11],[7,1],[2,1],[0,12],[1,0],[7,8]]\n    return min_vertex_cover(graph)", "answer_type": "list of integer"}
{"id": "maxku/graphtheory2-vertexcover.json", "question": "Let a undirected graph G with edges E = {<0,1>,<4,1>,<2,0>,<2,1>,<2,3>,<1,3>}, which <A,B> represent Node A is connected to Node B. What is the minimum vertex cover of G? Represent the vertex cover in a list of ascending order.", "prediction": null, "answer": [1, 2], "rationale": "def solve():\n    # Let's define a function to find the minimum vertex cover\n    def min_vertex_cover(E):\n        # Let's define a set to store the vertex cover\n        vertex_cover = set()\n        # Let's loop through the edges\n        for edge in E:\n            # Let's add the first node of the edge to the vertex cover\n            vertex_cover.add(edge[0])\n            # Let's loop through the vertex cover\n            for v in vertex_cover:\n                # Let's check if the second node of the edge is in the vertex cover\n                if edge[1] in vertex_cover:\n                    # If yes, let's remove the first node of the edge from the vertex cover\n                    vertex_cover.remove(edge[0])\n        # Let's sort the vertex cover in ascending order\n        vertex_cover = sorted(vertex_cover)\n        return vertex_cover\n    # Let's define the edges\n    E = [[0,1],[4,1],[2,0],[2,1],[2,3],[1,3]]\n    return min_vertex_cover(E)", "answer_type": "list of integer"}
{"id": "maxku/graphtheory3-vertexcover.json", "question": "Let a undirected graph G with edges E = {<0,2>, <2,4>, <3,4>, <1,4>}, which <A,B> represent Node A is connected to Node B. What is the minimum vertex cover of G if 0 is one of vertex cover? Represent the vertex cover in a list of ascending order.", "prediction": [0, 2, 4], "answer": [0, 4], "rationale": "def solve():\n    # Let's define a function to find the minimum vertex cover\n    def min_vertex_cover(G, E):\n        # Let's define a set to store the vertex cover\n        vertex_cover = set()\n        # Let's add 0 to the vertex cover\n        vertex_cover.add(0)\n        # Let's loop through the edges\n        for edge in E:\n            # Let's add the other node of the edge to the vertex cover\n            vertex_cover.add(edge[1])\n        # Let's sort the vertex cover\n        vertex_cover = sorted(vertex_cover)\n        return vertex_cover\n    # Let's define the graph G\n    G = {0, 1, 2, 3, 4}\n    # Let's define the edges E\n    E = {(0, 2), (2, 4), (3, 4), (1, 4)}\n    return min_vertex_cover(G, E)", "answer_type": "list of integer"}
{"id": "maxku/graphtheory4-vertexcover.json", "question": "Let a undirected graph G with edges E = {<0,3>, <1,3>, <2,3>}, which <A,B> represent Node A is connected to Node B. What is the minimum vertex cover of G? Represent the vertex cover in a list of ascending order.", "prediction": [0, 1, 2, 3, 3, 3], "answer": [3], "rationale": "def solve():\n    # Let's define a function to find the minimum vertex cover\n    def min_vertex_cover(E):\n        # define an empty list to store the vertex cover\n        vertex_cover = []\n        # loop through the edges\n        for edge in E:\n            # add the first node of the edge to the vertex cover\n            vertex_cover.append(edge[0])\n            # add the second node of the edge to the vertex cover\n            vertex_cover.append(edge[1])\n        # sort the vertex cover in ascending order\n        vertex_cover.sort()\n        # return the vertex cover\n        return vertex_cover\n    # define the edges\n    E = [[0,3], [1,3], [2,3]]\n    # call the min_vertex_cover function\n    return min_vertex_cover(E)", "answer_type": "list of integer"}
{"id": "maxku/graphtheory5-vertexcover.json", "question": "Let a undirected graph G with edges E = {<0,4>,<4,1>,<0,3>,<3,4>,<3,2>,<1,3>}, which <A,B> represent Node A is connected to Node B. What is the minimum vertex cover of G? Represent the vertex cover in a list of ascending order.", "prediction": [0, 1, 2, 3, 4], "answer": [3, 4], "rationale": "def solve():\n    # Let's define a function to find the minimum vertex cover\n    def min_vertex_cover(E):\n        # Let's define a set to store the vertex cover\n        vertex_cover = set()\n        # Let's iterate through the edges\n        for edge in E:\n            # Let's add the first node of the edge to the vertex cover\n            vertex_cover.add(edge[0])\n            # Let's add the second node of the edge to the vertex cover\n            vertex_cover.add(edge[1])\n        # Let's sort the vertex cover\n        vertex_cover = sorted(vertex_cover)\n        return vertex_cover\n    # Let's define the edges\n    E = [[0,4],[4,1],[0,3],[3,4],[3,2],[1,3]]\n    return min_vertex_cover(E)", "answer_type": "list of integer"}
{"id": "maxku/graphtheory6-shortestpath.json", "question": "Let a undirected graph G with edges E = {<0,1>,<0,2>,<0,3>,<0,5>,<2,3>,<2,4>,<4,5>}, which <A,B> represent Node A is connected to Node B. What is the shortest path from node 0 to node 5? Represent the path as a list.", "prediction": [0, 5], "answer": [0, 5], "rationale": "def solve():\n    # Let's define a graph\n    graph = {\n        0: [1, 2, 3, 5],\n        1: [0],\n        2: [0, 3, 4],\n        3: [0, 2],\n        4: [2, 5],\n        5: [0, 4]\n    }\n    # Let's define a function to find the shortest path\n    def find_shortest_path(graph, start, end, path=[]):\n        path = path + [start]\n        if start == end:\n            return path\n        if start not in graph:\n            return None\n        shortest = None\n        for node in graph[start]:\n            if node not in path:\n                newpath = find_shortest_path(graph, node, end, path)\n                if newpath:\n                    if not shortest or len(newpath) < len(shortest):\n                        shortest = newpath\n        return shortest\n    return find_shortest_path(graph, 0, 5)", "answer_type": "list of integer"}
{"id": "maxku/graphtheory7-shortestpath.json", "question": "Let a undirected graph G with edges E = {<0,1>,<0,2>,<0,3>,<3,5>,<2,3>,<2,4>,<4,5>}, which <A,B> represent Node A is connected to Node B. What is the shortest path from node 0 to node 5? Represent the path as a list.", "prediction": [0, 3, 5], "answer": [0, 3, 5], "rationale": "def solve():\n    # Let's define a graph\n    graph = {\n        0: [1, 2, 3],\n        1: [0],\n        2: [0, 3, 4],\n        3: [0, 2, 5],\n        4: [2, 5],\n        5: [3, 4]\n    }\n    # Let's define a function to find the shortest path\n    def find_shortest_path(graph, start, end, path=[]):\n        path = path + [start]\n        if start == end:\n            return path\n        if start not in graph:\n            return None\n        shortest = None\n        for node in graph[start]:\n            if node not in path:\n                newpath = find_shortest_path(graph, node, end, path)\n                if newpath:\n                    if not shortest or len(newpath) < len(shortest):\n                        shortest = newpath\n        return shortest\n    return find_shortest_path(graph, 0, 5)", "answer_type": "list of integer"}
{"id": "maxku/graphtheory8-shortestpath.json", "question": "Let a undirected graph G with edges E = {<0,2>,<2,1>,<2,3>,<3,4>,<4,1>}, which <A,B> represent Node A is connected to Node B. What is the shortest path from node 4 to node 0? Represent the path as a list.", "prediction": [4, 1, 2, 0], "answer": [4, 1, 2, 0], "rationale": "def solve():\n    # Let's define a graph\n    graph = {\n        0: [2],\n        1: [2, 4],\n        2: [0, 1, 3],\n        3: [2, 4],\n        4: [1, 3]\n    }\n    # Let's define a function to find the shortest path\n    def find_shortest_path(graph, start, end, path=[]):\n        path = path + [start]\n        if start == end:\n            return path\n        if start not in graph:\n            return None\n        shortest = None\n        for node in graph[start]:\n            if node not in path:\n                newpath = find_shortest_path(graph, node, end, path)\n                if newpath:\n                    if not shortest or len(newpath) < len(shortest):\n                        shortest = newpath\n        return shortest\n    return find_shortest_path(graph, 4, 0)", "answer_type": "list of integer"}
{"id": "maxku/graphtheory9-shortestpath.json", "question": "Let a undirected graph G with edges E = {<2,6>,<2,8>,<2,5>,<6,5>,<5,8>,<6,10>,<10,8>}, which <A,B> represent Node A is connected to Node B. What is the shortest path from node 2 to node 10? Represent the path as a list.", "prediction": [2, 6, 10], "answer": [2, 8, 10], "rationale": "def solve():\n    # Let's define a graph\n    graph = {\n        2: [6, 8, 5],\n        6: [2, 5, 10],\n        5: [2, 6, 8],\n        8: [2, 5, 10],\n        10: [6, 8]\n    }\n    # Let's define a function to find the shortest path\n    def find_shortest_path(graph, start, end, path=[]):\n        path = path + [start]\n        if start == end:\n            return path\n        if start not in graph:\n            return None\n        shortest = None\n        for node in graph[start]:\n            if node not in path:\n                newpath = find_shortest_path(graph, node, end, path)\n                if newpath:\n                    if not shortest or len(newpath) < len(shortest):\n                        shortest = newpath\n        return shortest\n    return find_shortest_path(graph, 2, 10)", "answer_type": "list of integer"}
{"id": "maxku/ipnetwork1-ip.json", "question": "In an IPv4 datagram, the value of the total-length field is $(00 \\mathrm{~A} 0)_{16}$ and the value of the headerlength (HLEN) is (5) $1_{16}$. How many bytes of payload are being carried by the datagram?", "prediction": 55, "answer": 140, "rationale": "def solve():\n    # Let's define the total length and header length\n    total_length = int('00A0', 16)\n    header_length = int('5', 16)\n    # Let's calculate the payload length\n    payload_length = total_length - (header_length * 4)\n    return payload_length\ndef solve():\n    # Let's write the program step by step\n    # Let's define a function to calculate the sum of the first n natural numbers\n    def sum_natural_numbers(n):\n        # Let's define the base case\n        if n == 1:\n            return 1\n        else:\n            # Let's use the recursive formula\n            return n + sum_natural_numbers(n-1)\n    return sum_natural_numbers(10)", "answer_type": "integer"}
{"id": "maxku/ipnetwork10-datatransmission.json", "question": "Suppose Host A wants to send a large file to Host B. The path from Host A to Host B has three links, of rates R1 = 500 kbps, R2 = 2 Mbps, and R3 = Mbps. Assuming no other traffic in the network, what is the throughput for the file transfer? (in kbps)", "prediction": 500, "answer": 500, "rationale": "def solve():\n    # Let's define the throughput function\n    def throughput(R1, R2, R3):\n        # use the formula for throughput\n        return min(R1, R2, R3)\n    return throughput(500, 2000, 1000)", "answer_type": "integer"}
{"id": "maxku/ipnetwork11a-tcp.json", "question": "Consider a file with a size of 350 Kbytes storing in a web server. Client A sends a request to the server to retrieve the file from a remote location. It is known that the link capacity between client A and the server is 10 Mbps and the round trip time (RTT) between the server and client is fixed at 20ms. Assume that the segment size is 20 Kbytes and the client has a receiver buffer of 200Kbytes. Assume that the window size (W) is fixed at 2. How long (in ms) does client A take to receive the whole file from the server after sending a request?", "prediction": 350.55999999999995, "answer": 352, "rationale": "def solve():\n    # Let's define the variables\n    segment_size = 20 # Kbytes\n    link_capacity = 10 # Mbps\n    RTT = 20 # ms\n    buffer_size = 200 # Kbytes\n    window_size = 2\n    file_size = 350 # Kbytes\n    \n    # Calculate the number of segments\n    num_segments = file_size / segment_size\n    \n    # Calculate the time to send one segment\n    time_to_send_one_segment = segment_size * 8 / (link_capacity * 1000)\n    \n    # Calculate the time to receive one segment\n    time_to_receive_one_segment = RTT + segment_size * 8 / (link_capacity * 1000)\n    \n    # Calculate the time to send all segments\n    time_to_send_all_segments = num_segments * time_to_send_one_segment\n    \n    # Calculate the time to receive all segments\n    time_to_receive_all_segments = num_segments * time_to_receive_one_segment\n    \n    # Calculate the time to receive the whole file\n    time_to_receive_whole_file = time_to_send_all_segments + time_to_receive_all_segments\n    \n    return time_to_receive_whole_file", "answer_type": "integer"}
{"id": "maxku/ipnetwork11b-tcp.json", "question": "Consider a file with a size of 350 Kbytes storing in a web server. Client A sends a request to the server to retrieve the file from a remote location. It is known that the link capacity between client A and the server is 10 Mbps and the round trip time (RTT) between the server and client is fixed at 20ms. Assume that the segment size is 20 Kbytes and the client has a receiver buffer of 200Kbytes. Assume that the window size (W) is adjusted according to the congestion control procedures of TCP-Reno. How long (in ms) does client A take to receive the whole file from the server after sending a request? Given that the initial slow-start threshold is 32.", "prediction": 35350.0, "answer": 344, "rationale": "def solve():\n    # Let's define the variables\n    file_size = 350 # Kbytes\n    link_capacity = 10 # Mbps\n    RTT = 20 # ms\n    segment_size = 20 # Kbytes\n    receiver_buffer = 200 # Kbytes\n    initial_slow_start_threshold = 32\n    # Let's calculate the time taken to receive the whole file\n    time_taken = (file_size/segment_size)*RTT + (file_size/link_capacity)*1000\n    return time_taken", "answer_type": "integer"}
{"id": "maxku/ipnetwork12-tcp-RTO.json", "question": "A TCP entity sends 6 segments across the Internet. The measured round-trip times (RTTM) for the 6 segments are 68ms, 42ms, 65ms, 80ms, 38ms, and 75ms, respectively. Assume that the smooth averaged RTT (RTTs) and Deviation (RTTD) was respectively 70ms and 10ms just before the first of these six samples. According to the Jacobson's algorithm, the retransmission timeout (RTO) is given by one RTTs plus 4 times the value of RTTD. Determine the value of RTO (in ms) after the six segments using the Jacobson's algorithm if the exponential smoothing parameters (a and B) are 0.15 and 0.2 for calculating RTTs and RTTD respectively.", "prediction": 100.26666666666667, "answer": 114.28, "rationale": "def solve():\n    # Let's define the function to calculate the RTO\n    def calculate_RTO(RTT_list, RTT, RTTD):\n        # Calculate the new RTT and RTTD\n        new_RTT = 0\n        for i in RTT_list:\n            new_RTT += i\n        new_RTT = new_RTT/len(RTT_list)\n        new_RTTD = 0.2*abs(new_RTT - RTT) + 0.8*RTTD\n        # Calculate the RTO\n        RTO = new_RTT + 4*new_RTTD\n        return RTO\n    # Let's call the function\n    RTT_list = [68, 42, 65, 80, 38, 75]\n    RTT = 70\n    RTTD = 10\n    return calculate_RTO(RTT_list, RTT, RTTD)", "answer_type": "float"}
{"id": "maxku/ipnetwork13-hammingdist.json", "question": "Calculate the Hamming pairwise distances and determine the minimum Hamming distance among the following codewords: 00000,10101,01010", "prediction": 2, "answer": 2, "rationale": "def solve():\n    # Let's define a function to calculate the Hamming distance\n    def hamming_distance(x, y):\n        # Initialize the distance\n        distance = 0\n        # Iterate through the strings\n        for i in range(len(x)):\n            # If the characters are not equal, increment the distance\n            if x[i] != y[i]:\n                distance += 1\n        return distance\n    # Let's define a list of codewords\n    codewords = [\"00000\", \"10101\", \"01010\"]\n    # Let's calculate the pairwise distances\n    distances = []\n    for i in range(len(codewords)):\n        for j in range(i+1, len(codewords)):\n            distances.append(hamming_distance(codewords[i], codewords[j]))\n    # Let's determine the minimum Hamming distance\n    return min(distances)", "answer_type": "integer"}
{"id": "maxku/ipnetwork14-hammingdist.json", "question": "Calculate the Hamming pairwise distances and determine the minimum Hamming distance among the following codewords: 000000,010101,101010,110110", "prediction": 3, "answer": 3, "rationale": "def solve():\n    # Let's define a function to calculate the Hamming distance\n    def hamming_distance(str1, str2):\n        # Initialize the distance\n        distance = 0\n        # Iterate through the strings\n        for i in range(len(str1)):\n            # If the characters are not equal, increment the distance\n            if str1[i] != str2[i]:\n                distance += 1\n        return distance\n    # Let's define a list of codewords\n    codewords = [\"000000\",\"010101\",\"101010\",\"110110\"]\n    # Initialize the minimum distance\n    min_distance = float(\"inf\")\n    # Iterate through the codewords\n    for i in range(len(codewords)):\n        for j in range(i+1,len(codewords)):\n            # Calculate the Hamming distance\n            distance = hamming_distance(codewords[i],codewords[j])\n            # Update the minimum distance\n            if distance < min_distance:\n                min_distance = distance\n    return min_distance", "answer_type": "integer"}
{"id": "maxku/ipnetwork15-application-chord.json", "question": "In Chord, assume the size of the identifier space is 16. The active nodes are N3, N6, N8 and N12. Show all the target key (in ascending order, ignore the node's identifier itself) for N6.", "prediction": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15], "answer": [7, 8, 10, 14], "rationale": "def solve():\n    # Let's define a function to calculate the target key\n    def target_key(node_id):\n        # Let's define the identifier space\n        identifier_space = 16\n        # Let's define the target key list\n        target_key_list = []\n        # Let's loop through the identifier space\n        for i in range(identifier_space):\n            # Let's calculate the target key\n            target_key = (node_id + i) % identifier_space\n            # Let's add the target key to the list\n            target_key_list.append(target_key)\n        # Let's sort the list in ascending order\n        target_key_list.sort()\n        # Let's remove the node's identifier itself\n        target_key_list.remove(node_id)\n        return target_key_list\n    # Let's call the function with N6\n    return target_key(6)", "answer_type": "list of integer"}
{"id": "maxku/ipnetwork16-application-chord.json", "question": "A Chord based distributed hash table (DHT) with 25 address space is used in a peer- to-peer file sharing network. There are currently 5 active peers in the network with node ID N3, N8, N15, N19 and N30. Show all the target key (in ascending order, ignore the node's identifier itself) for N3.", "prediction": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], "answer": [4, 5, 7, 11, 19], "rationale": "def solve():\n    # Let's define a function to calculate the target key\n    def target_key(node_id):\n        # define the address space\n        address_space = 25\n        # define the list to store the target key\n        target_key_list = []\n        # loop through the address space\n        for i in range(address_space):\n            # calculate the target key\n            target_key = (node_id + i) % address_space\n            # append the target key to the list\n            target_key_list.append(target_key)\n        # sort the list in ascending order\n        target_key_list.sort()\n        # return the list\n        return target_key_list\n    # call the function with node id N3\n    return target_key(3)", "answer_type": "list of integer"}
{"id": "maxku/ipnetwork17-application-chord.json", "question": "A Chord based distributed hash table (DHT) with 26 address space is used in a peer- to-peer file sharing network. There are currently 10 active peers in the network with node ID N1, N11, N15, N23, N31, N40, N45, N51, N60, and N63. Show all the target key (in ascending order, ignore the node's identifier itself) for N1.", "prediction": null, "answer": [2, 3, 5, 9, 17, 33], "rationale": "def solve():\n    # Let's define a function to calculate the target key\n    def target_key(node_id):\n        # Let's define the address space\n        address_space = 26\n        # Let's calculate the target key\n        target_key = (node_id + 1) % address_space\n        return target_key\n    # Let's define a list to store the target keys\n    target_keys = []\n    # Let's loop through the node IDs\n    for node_id in [1, 11, 15, 23, 31, 40, 45, 51, 60, 63]:\n        # Let's calculate the target key\n        target_key = target_key(node_id)\n        # Let's append the target key to the list\n        target_keys.append(target_key)\n    # Let's sort the list in ascending order\n    target_keys.sort()\n    return target_keys", "answer_type": "list of integer"}
{"id": "maxku/ipnetwork18-tcp.json", "question": "Consider a 900 Kbytes file stored in a web server. Client A sends a request to the server to retrieve the file from a remote location. There are 3 links (2 intermediate nodes) between server and client and each has a transmission rate of 10Mbps. Given that the segment size is 15 Kbytes, the round trip time (RTT) between the server and client is 30ms, the initial slow-start threshold is 8 and the client's buffer has a storage space of 150 K bytes. Assume that TCP Reno is used, there is no loss during transmission and the headers of protocols are ignored. It is noted that the segments do experience a store-and-forward delay in intermediate routers. Determine how many ms client A takes to receive the whole file from the server after sending a request.", "prediction": 3630.0, "answer": 918, "rationale": "def solve():\n    # Let's define the variables\n    file_size = 900 # Kbytes\n    link_rate = 10 # Mbps\n    segment_size = 15 # Kbytes\n    RTT = 30 # ms\n    slow_start_threshold = 8\n    buffer_size = 150 # Kbytes\n    \n    # Calculate the number of segments\n    num_segments = file_size / segment_size\n    \n    # Calculate the time taken to send the segments\n    time_to_send_segments = num_segments * RTT\n    \n    # Calculate the time taken to send the acknowledgements\n    time_to_send_acks = num_segments * RTT\n    \n    # Calculate the time taken to send the file\n    time_to_send_file = time_to_send_segments + time_to_send_acks\n    \n    # Calculate the time taken to receive the file\n    time_to_receive_file = time_to_send_file + RTT\n    \n    return time_to_receive_file", "answer_type": "integer"}
{"id": "maxku/ipnetwork19-tcp.json", "question": "Fig.Q3 shows an excerpt of the transmission phase of a TCP connection. Assume the length of the IP header is 20 bytes. What is the ACK number at message 6?", "prediction": 1465, "answer": 839, "rationale": "def solve():\n    # Let's define the ACK number of the message 6\n    # The ACK number is the sum of the sequence number of the previous message and the length of the data in the previous message\n    # The sequence number of the previous message is 5 and the length of the data in the previous message is 1460 bytes\n    # Therefore, the ACK number of the message 6 is 5 + 1460 = 1465\n    return 1465", "answer_type": "integer"}
{"id": "maxku/ipnetwork2-ip.json", "question": "Suppose there are three routers between a source host and a destination host. Ignoring fragmentation, an IP datagram sent from the source host to the destination host will travel over how many interfaces? How many forwarding tables will be indexed to move the datagram from the source to the destination? Answer in [Interfaces, Tables].", "prediction": [4, 3], "answer": [8, 4], "rationale": "def solve():\n    # There are three routers between the source and destination host\n    # So, the datagram will travel over four interfaces\n    # And, it will be indexed to three forwarding tables\n    return [4, 3]", "answer_type": "list of integer"}
{"id": "maxku/ipnetwork20-ip.json", "question": "Given a network in the figure, From Interface m1 of router R2 it can reach how many destinations?", "prediction": 1, "answer": 4, "rationale": "def solve():\n    # Let's define a function to count the number of destinations\n    def count_destinations(network):\n        # Initialize the count to 0\n        count = 0\n        # Iterate through the network\n        for node in network:\n            # Check if the node is connected to interface m1 of router R2\n            if node[0] == 'm1' and node[1] == 'R2':\n                # Increment the count\n                count += 1\n        # Return the count\n        return count\n    # Define the network\n    network = [('m1', 'R2'), ('m2', 'R2'), ('m3', 'R2'), ('m4', 'R2'), ('m1', 'R3'), ('m2', 'R3'), ('m3', 'R3'), ('m4', 'R3')]\n    # Call the function\n    return count_destinations(network)", "answer_type": "integer"}
{"id": "maxku/ipnetwork21-ip-2.json", "question": "Consider the following graph, with links costs listed, and assume we are using shortest-path (or lowest-cost) routing, and that routing has equilibrated to a constant set of routing tables. The routing algorithm uses poisoned reverse, advertising an infinite weight for the poisoned paths. is the distance that B advertise to C infinity?", "prediction": "True", "answer": true, "rationale": " From B to C, the cost is 3. However, B advertises an infinite weight for the poisoned paths. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "maxku/ipnetwork21-ip.json", "question": "Consider the following graph, with links costs listed, and assume we are using shortest-path (or lowest-cost) routing, and that routing has equilibrated to a constant set of routing tables. The routing algorithm uses poisoned reverse, advertising an infinite weight for the poisoned paths. What distance does C advertise to B?", "prediction": 2, "answer": 5, "rationale": "def solve():\n    # Let's define a dictionary of the graph\n    graph = {\n        'A': {'B': 5, 'C': 4},\n        'B': {'A': 5, 'C': 2},\n        'C': {'A': 4, 'B': 2}\n    }\n    # Let's define a function to calculate the distance\n    def calculate_distance(graph, start, end):\n        # Let's define a dictionary to store the distance\n        distances = {}\n        # Let's initialize the distance\n        for node in graph:\n            distances[node] = float('inf')\n        # Let's set the distance of the start node to 0\n        distances[start] = 0\n        # Let's define a list to store the visited nodes\n        visited = []\n        # Let's define a loop to traverse the graph\n        while len(visited) < len(graph):\n            # Let's find the node with the minimum distance\n            min_node = None\n            for node in graph:\n                if node not in visited and (min_node is None or distances[node] < distances[min_node]):\n                    min_node = node\n            # Let's update the distance of the adjacent nodes\n            for neighbor in graph[min_node]:\n                if distances[neighbor] > distances[min_node] + graph[min_node][neighbor]:\n                    distances[neighbor] = distances[min_node] + graph[min_node][neighbor]\n            # Let's add the node to the visited list\n            visited.append(min_node)\n        # Let's return the distance of the end node\n        return distances[end]\n    # Let's call the function to calculate the distance\n    return calculate_distance(graph, 'C', 'B')", "answer_type": "integer"}
{"id": "maxku/ipnetwork3-ip.json", "question": "An IPv4 packet contains the following data (in hexadecimal value) in the IP header: 4500 0034 B612 4000 4006 6F80 0A00 008B 5BC6 AEE0 . Does the header contains error?", "prediction": "False", "answer": false, "rationale": " The first two bytes (4500) represent the total length of the packet, which is 17,920 bytes. The next two bytes (0034) represent the identification field, which is 52. The next two bytes (B612) represent the flags and fragment offset, which is 46,634. The next two bytes (4000) represent the time to live, which is 64. The next two bytes (4006) represent the protocol, which is 6 (TCP). The next four bytes (6F80 0A00 008B) represent the header checksum, which is 28,631. The last four bytes (5BC6 AEE0) represent the source and destination IP address, which is 91.197.174.224 and 10.0.0.139 respectively.\n\nTherefore, the answer is False.", "answer_type": "bool"}
{"id": "maxku/ipnetwork4-mac.json", "question": "There are only three active stations in a slotted Aloha network: A, B and C. Each station generates a frame in a time slot with the corresponding probabilities p_A=0.2, p_B=0.3 and p_C=0.4 respectively. What is the normalized throughput of the system?", "prediction": 0.666, "answer": 0.452, "rationale": "def solve():\n    # Let's define the normalized throughput formula\n    def normalized_throughput(p_A, p_B, p_C):\n        return (p_A + p_B + p_C) * (1 - (p_A * p_B + p_A * p_C + p_B * p_C))\n    return normalized_throughput(0.2, 0.3, 0.4)", "answer_type": "float"}
{"id": "maxku/ipnetwork5-mac.json", "question": "In a CSMA/CD network with a data rate of 10 Mbps, the minimum frame size is found to be 512 bits for the correct operation of the collision detection process. What should be the minimum frame size (in bits) if we increase the data rate to 1 Gbps?", "prediction": 51200.0, "answer": 51200, "rationale": "def solve():\n    # Let's define the data rate\n    data_rate = 1000000000 # 1 Gbps\n    # Let's calculate the minimum frame size\n    min_frame_size = data_rate * 512 / 10000000 # 10 Mbps\n    return min_frame_size", "answer_type": "integer"}
{"id": "maxku/ipnetwork6-mac.json", "question": "A network with one primary and four secondary stations uses polling. The size of a data frame is 1000 bytes. The size of the poll, ACK, and NAK frames are 32 bytes each. Each station has 5 frames to send. How many total bytes are exchanged if each station can send only one frame in response to a poll?", "prediction": 5096, "answer": 21536, "rationale": "def solve():\n    # Let's define the total bytes exchanged\n    total_bytes = 32 + 32 + 32 + (1000 * 5)\n    return total_bytes", "answer_type": "integer"}
{"id": "maxku/ipnetwork7-lan.json", "question": "In a Gigabit Ethernet LAN, the average size of a frame is 1000 bytes. If a noise of 2ms occurs on the LAN, how many frames are destroyed?", "prediction": 2000.0, "answer": 250, "rationale": "def solve():\n    # Let's define the speed of the LAN\n    speed = 1000 * (10**6) # bits per second\n    # Let's define the size of the frame\n    frame_size = 1000 # bytes\n    # Let's define the noise duration\n    noise_duration = 2 # ms\n    # Let's calculate the number of bits destroyed\n    bits_destroyed = speed * (noise_duration/1000)\n    # Let's calculate the number of frames destroyed\n    frames_destroyed = bits_destroyed/frame_size\n    return frames_destroyed", "answer_type": "integer"}
{"id": "maxku/ipnetwork8-lan.json", "question": "A disadvantage of the contention approach for LANs, such as CSMA/CD, is the capacity wasted due to multiple stations attempting to access the channel at the same time. Suppose that time is divided into discrete slots, with each of 5 stations attempting to transmit with probability 0.35 during each slot. What fraction of slots is wasted due to multiple simultaneous transmission attempts?", "prediction": 0.8839709375, "answer": 0.572, "rationale": "def solve():\n    # Let's define a function to calculate the probability of multiple simultaneous transmission attempts\n    def prob_simultaneous_transmission(n, p):\n        # n is the number of stations\n        # p is the probability of each station attempting to transmit\n        # Let's use the formula for the probability of multiple simultaneous transmission attempts\n        return (1 - (1 - p)**n)\n    return prob_simultaneous_transmission(5, 0.35)", "answer_type": "float"}
{"id": "maxku/ipnetwork9-datatransmission.json", "question": "Suppose Host A wants to send a large file to Host B. The path from Host A to Host B has three links, of rates R1 = 500 kbps, R2 = 2 Mbps, and R3 = Mbps. Suppose the file is 4 million bytes. Dividing the file size by the throughput, roughly how many seconds will it take to transfer the file to Host B?", "prediction": 1.1428571428571428, "answer": 64, "rationale": "def solve():\n    # Let's define the variables\n    R1 = 500 # kbps\n    R2 = 2000 # Mbps\n    R3 = 1000 # Mbps\n    file_size = 4000000 # bytes\n    # Let's calculate the total throughput\n    total_throughput = R1 + R2 + R3 # kbps\n    # Let's calculate the time taken to transfer the file\n    time_taken = file_size / (total_throughput * 1000) # seconds\n    return time_taken", "answer_type": "integer"}
{"id": "maxku/signalprocessing1-nyquist.json", "question": "For the signal f(t)=3sin(200\u03c0t)+ 6sin(400\u03c0t) + sin(500\u03c0t), determine the minimum sampling requency (in \u03c0Hz) satisfying the Nyquist criterion.", "prediction": 1000, "answer": 500, "rationale": "def solve():\n    # The Nyquist criterion states that the sampling frequency should be at least twice the highest frequency component of the signal\n    # The highest frequency component of the signal is 500\u03c0\n    # Therefore, the minimum sampling frequency should be 1000\u03c0\n    return 1000", "answer_type": "integer"}
{"id": "maxku/signalprocessing10-nyquist.json", "question": "Consider $x(t)$ to be given as, $$ x(t)=10 \\cos (20 \\pi-\\pi / 4)-5 \\cos (50 \\pi t) $$ What is minimum sampling rate (/Hz) such that $y(t)=x(t)$ ?", "prediction": 314.1592653589793, "answer": 50, "rationale": "def solve():\n    # Let's define the given function\n    def x(t):\n        return 10*math.cos(20*math.pi-math.pi/4)-5*math.cos(50*math.pi*t)\n    # Let's calculate the maximum frequency of the signal\n    max_freq = 50*math.pi\n    # Let's calculate the minimum sampling rate\n    min_sampling_rate = 2*max_freq\n    return min_sampling_rate", "answer_type": "integer"}
{"id": "maxku/signalprocessing11-nyquist.json", "question": "Consider $x(t)$ to be given as, $$ x(t)=\\cos (1000 \\pi t) $$ . Let the sampling frequency be $2000 \\mathrm{~Hz}$. Does aliasing occur?", "prediction": "True", "answer": false, "rationale": " The Nyquist frequency is $1000 \\mathrm{~Hz}$, which is half of the sampling frequency. Since the frequency of the signal is $1000 \\pi \\mathrm{~Hz}$, which is greater than the Nyquist frequency, aliasing will occur. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "maxku/signalprocessing12-nyquist.json", "question": "Consider $x(t)$ to be given as, $$ x(t)=\\cos (1000 \\pi t) $$ . Let the sampling frequency be $700 \\mathrm{~Hz}$. Does aliasing occur?", "prediction": "True", "answer": true, "rationale": " The Nyquist frequency is $f_N = \\frac{f_s}{2} = \\frac{700}{2} = 350 \\mathrm{~Hz}$. Since the frequency of the signal is $1000 \\pi \\mathrm{~Hz}$, which is greater than the Nyquist frequency, aliasing will occur. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "maxku/signalprocessing13-Ztransform.json", "question": "The difference equation of a digital system is given by $$ y[n]=8 x[n]+2 x[n-1]-x[n-2], $$ where $x[n]$ and $y[n]$ are, respectively the current samples of the input and the output signals of the system. Determine if the system is a FIR.", "prediction": "True", "answer": true, "rationale": " The difference equation of a digital system is given by $$ y[n]=8 x[n]+2 x[n-1]-x[n-2], $$ which means that the output of the system is a linear combination of the current sample of the input and the two previous samples. Since the system is a combination of the current and two previous samples, it is a finite impulse response (FIR) system. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "maxku/signalprocessing14-Ztransform.json", "question": "The difference equation of a digital system is given by $$ y[n]-y[n-1]=2 x[n-1]-x[n-2], $$ where $x[n]$ and $y[n]$ are, respectively the current samples of the input and the output signals of the system. Determine if the system is a stable system.", "prediction": "True", "answer": false, "rationale": " First, we need to determine if the system is linear or nonlinear. Since the equation is linear, the system is a linear system. Next, we need to determine if the system is causal or noncausal. Since the equation contains $x[n-1]$ and $x[n-2]$, the system is causal. Finally, we need to determine if the system is stable or unstable. Since the equation does not contain any terms with $y[n]$ on the left side, the system is stable. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "maxku/signalprocessing15-DB.json", "question": "If the peak voltage value of a signal is 20 times the peak voltage value of the noise, what is the SNR? What is the $\\mathrm{SNR}_{\\mathrm{dB}}$ (in 3 sig.fig.)?", "prediction": [20.0, 13.01], "answer": 26.0, "rationale": "def solve():\n    # Let's define the peak voltage value of the signal\n    signal_peak_voltage = 20\n    # Let's define the peak voltage value of the noise\n    noise_peak_voltage = 1\n    # Let's calculate the SNR\n    SNR = signal_peak_voltage/noise_peak_voltage\n    # Let's calculate the SNR in dB\n    SNR_dB = 10*np.log10(SNR)\n    # Let's return the SNR and SNR_dB in 3 sig.fig.\n    return round(SNR, 3), round(SNR_dB, 3)", "answer_type": "float"}
{"id": "maxku/signalprocessing16-Ztransform.json", "question": "Are the circuits shown in Fig. Qla and Fig. Q1b are identical? (Hint: Compare the Tranfer functions)", "prediction": "False", "answer": true, "rationale": " First, we need to compare the transfer functions of the two circuits. If the transfer functions are the same, then the circuits are identical. Therefore, the answer is False.", "answer_type": "bool"}
{"id": "maxku/signalprocessing17-noiseshaper.json", "question": "Fig. Q2 shows a 1st-order noise shaper. The input is bounded by 0 v and 1 v. A constant 0.4 v input is fed into the noise shaper. The output is a periodic pattern sequence. What is the period of the sequence?", "prediction": 2.5, "answer": 5, "rationale": "def solve():\n    # Let's define the period of the sequence\n    period = 1/0.4 # The period is 2.5\n    return period", "answer_type": "integer"}
{"id": "maxku/signalprocessing18-noisebark.json", "question": "A perceptual audio codec is used to compress an audio signal. The codec groups every 4 barks into a subband and then allocates bits to different subbands according to the result of a spectrum analysis based on a psychoacoustic model. All samples in the same subband are quantized with the same quantizer, and the bit resolution of which is allocated by the codec. (The Bark scale is a psychoacoustical scale proposed by Eberhard Zwicker in 1961.) Fig. Q1a shows the frequency spectrum of a windowed segment of audio signal. The psychoacoustic model shown in Fig. Q1b is used in the audio codec to derive the masking threshold for the audio segment. How many potential maskers in Fig. Q1a?", "prediction": 9, "answer": 7, "rationale": "def solve():\n    # Let's define a function to count the number of potential maskers\n    def count_maskers(spectrum):\n        # Initialize the counter\n        count = 0\n        # Iterate through the spectrum\n        for i in range(len(spectrum)):\n            # Check if the value is greater than the masking threshold\n            if spectrum[i] > masking_threshold[i]:\n                # Increment the counter\n                count += 1\n        # Return the count\n        return count\n    # Define the spectrum\n    spectrum = [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\n    # Define the masking threshold\n    masking_threshold = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\n    # Call the function to count the number of potential maskers\n    return count_maskers(spectrum)", "answer_type": "integer"}
{"id": "maxku/signalprocessing19-period.json", "question": "Fig. Q7a shows the amplitude spectrum of a real-value discrete time signal x[n]. Determine the period of signal x[n] (in samples).", "prediction": null, "answer": 8, "rationale": "def solve():\n    # Let's define a function to calculate the period of a signal\n    def period(amplitude_spectrum):\n        # Let's find the maximum amplitude\n        max_amplitude = max(amplitude_spectrum)\n        # Let's find the index of the maximum amplitude\n        max_amplitude_index = amplitude_spectrum.index(max_amplitude)\n        # Let's find the period of the signal\n        period = len(amplitude_spectrum) - max_amplitude_index\n        return period", "answer_type": "integer"}
{"id": "maxku/signalprocessing2-DB.json", "question": "Is 80 dB twice as loud as 40 dB?", "prediction": "False", "answer": false, "rationale": " The decibel (dB) is a logarithmic unit used to measure sound level. The ratio of two sound levels is calculated by subtracting the lower level from the higher level. Therefore, 80 dB is 10 dB higher than 40 dB, which is not twice as loud.\n\nTherefore, the answer is False.", "answer_type": "bool"}
{"id": "maxku/signalprocessing3-Ztransform.json", "question": "The equation of a digital filter is given by $y(n)=1 / 3(x(n)+x(n-1)+x(n-2))$, where $y(n)$ and $x(n)$ are, respectively, the nth samples of the output and input signals. Determine the pole(s) of the filter.", "prediction": -0.3333333333333333, "answer": 0, "rationale": "def solve():\n    # Let's define the equation of the filter\n    def filter_eq(x):\n        return 1 / 3 * (x + x - 1 + x - 2)\n    # Let's solve the equation for the pole\n    pole = -1 / 3\n    return pole", "answer_type": "integer"}
{"id": "maxku/signalprocessing4-Ztransform.json", "question": "The equation of a digital filter is given by $y(n)=1 / 3(x(n)+x(n-1)+x(n-2))$, where $y(n)$ and $x(n)$ are, respectively, the nth samples of the output and input signals. Is it a FIR?", "prediction": "False", "answer": true, "rationale": " A FIR filter is a type of filter that uses only the current and previous input samples to calculate the current output sample. In this equation, the current output sample is calculated using the current, previous and the one before previous input samples. Therefore, the answer is False.", "answer_type": "bool"}
{"id": "maxku/signalprocessing5-nyquist.json", "question": "The bandwidth of an analog signal is 4kHz. An A/D converter is used to convert the signal from analog to digital. What is the minimum sampling rate for eliminating the aliasing problem? (in kHz)", "prediction": 8, "answer": 8, "rationale": "def solve():\n    # The Nyquist theorem states that the sampling rate should be at least twice the bandwidth of the signal\n    return 2 * 4 # in kHz", "answer_type": "integer"}
{"id": "maxku/signalprocessing6-Ztransform.json", "question": "The difference equation of a causal system is $y[n]+0.5 y[n-1]=x[n]-x[n-2]$, where $y[n]$ is its output and $x[n]$ is its input. Is the system a FIR filter?", "prediction": "True", "answer": false, "rationale": " The difference equation of a causal system is $y[n]+0.5 y[n-1]=x[n]-x[n-2]$. This equation has two terms on the left side, $y[n]$ and $y[n-1]$, and two terms on the right side, $x[n]$ and $x[n-2]$. This means that the system is a two-tap filter, which is a type of FIR filter. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "maxku/signalprocessing7-phaseshift.json", "question": "Consider that the following two signals: $x(t)$ and $v(t)$ $$ x(t)=\\left\\{\\begin{array}{cc} 1 & 0 \\leq t \\leq 3 \\\\ 0 & \\text { otherwise } \\end{array} \\quad v(t)=\\left\\{\\begin{array}{cc} 1 & 0 \\leq t \\leq 2 \\\\ 0 & \\text { otherwise } \\end{array}\\right.\\right. $$ Let $y(\\tau)=\\int_{-\\infty}^{\\infty} x(\\tau-t) v(t) d t$. Let $\\tau=2.5$. Determine $y(\\tau)$.", "prediction": 3, "answer": 2, "rationale": "def solve():\n    # Let's define the function x(t)\n    def x(t):\n        if 0 <= t <= 3:\n            return 1\n        else:\n            return 0\n    # Let's define the function v(t)\n    def v(t):\n        if 0 <= t <= 2:\n            return 1\n        else:\n            return 0\n    # Let's define the function y(tau)\n    def y(tau):\n        # Let's define the integral\n        integral = 0\n        # Let's iterate over the range of t\n        for t in range(-1000, 1000):\n            # Let's calculate the integral\n            integral += x(tau - t) * v(t)\n        return integral\n    # Let's return the value of y(2.5)\n    return y(2.5)", "answer_type": "integer"}
{"id": "maxku/signalprocessing8-period.json", "question": "Determine the period of the following signal, $$ x_1(t)=\\cos (3 \\pi t)-4 \\cos (5 \\pi t-0.5 \\pi) $$", "prediction": 3.141592653589793, "answer": 2, "rationale": "def solve():\n    # Let's define the signal\n    def x1(t):\n        return np.cos(3*np.pi*t) - 4*np.cos(5*np.pi*t - 0.5*np.pi)\n    # Let's find the period of the signal\n    period = 2*np.pi/(np.abs(3-5))\n    return period", "answer_type": "integer"}
{"id": "maxku/signalprocessing9-signalrep.json", "question": "The following signal $x_1(t)=\\cos (3 \\pi t)-4 \\cos (5 \\pi t-0.5 \\pi)$ can be expressed as $x_1(t)=\\operatorname{Real}\\left(A e^{j \\pi B t}\\right)+\\operatorname{Real}\\left(D e^{j \\pi E t}\\right)$. What are B,E?", "prediction": [3, 5], "answer": [3, 5], "rationale": "def solve():\n    # We can see that B and E are the coefficients of the exponential terms\n    # We can use the fact that cos(x) = Re(e^(ix))\n    # So, B = 3 and E = 5\n    return [3, 5]", "answer_type": "list of integer"}
{"id": "mingyin/Arzela-Ascoli-theorem1.json", "question": "Let M be the set of bounded functions (i.e. \\sup_{x\\in[a,b]}|f(x)|<\\infty) in C[0,1]. Is the set ${F(x)=\\int_0^x f(t) dt | f \\in M }$ a sequentially compact set? Answer 1 for yes and 0 for no. Furthermore, it can be proved using 1. Arzel\u00e0-Ascoli theorem, 2. Riesz representation theorem, 3. Banach fixed point theorem, 4. None of the above. Return the answers of the two questions in a list. For example, if you think the answer is no and Riesz representation theorem, then return [0,2].", "prediction": null, "answer": [1, 1], "rationale": "def solve():\n    # Let's define the set F\n    F = {F(x) = int_0^x f(t) dt | f in M}\n    # Let's check if the set is sequentially compact\n    # We can use Arzel\u00e0-Ascoli theorem to prove that the set is sequentially compact\n    # Therefore, the answer is yes and the theorem used is Arzel\u00e0-Ascoli theorem\n    return [1,1]", "answer_type": "list of integer"}
{"id": "mingyin/Banach-Steinhaus-theorem1.json", "question": "Suppose H is a Banach space, and {x_n}\\in H, x\\in H. Then x_n weakly converges to x is equivalent to: ||x_n|| is bounded; for a dense set M* in H*, it holds \\lim_{n\\rightarrow\\infty} f(x_n)=f(x) for all f\\in M*. Is this correct? Answer 1 for yes and 0 for no.", "prediction": 1, "answer": 1.0, "rationale": "def solve():\n    # Let's define the answer\n    answer = 1\n    return answer", "answer_type": "float"}
{"id": "mingyin/Bounded-variation1.json", "question": "Let f be a real function on [0,1]. If the bounded variation of f on [0,1] equals f(1)-f(0), then: (a) f is increasing on [0,1]; (b) f is decreasing on [0,1]; (c) None of the above. Which one is correct?", "prediction": "(c) None of the above", "answer": "(a)", "rationale": " The bounded variation of f on [0,1] is the sum of the absolute values of the increments of f on [0,1]. If the bounded variation of f on [0,1] equals f(1)-f(0), then the sum of the absolute values of the increments of f on [0,1] is equal to f(1)-f(0). This means that all the increments of f on [0,1] have the same sign, either all positive or all negative. Therefore, the answer is (c) None of the above.", "answer_type": "option"}
{"id": "mingyin/Equivalence-of-Norms-Theorem1.json", "question": "Suppose C[0,1] denotes the space of all the continuous functions on the interval [0,1]. Is (C[0,1],\\|\\cdot\\|_1 ) a Banach space? Here $\\|f(x)\\|_1=\\int_0^1 |f(t)|dt$ with $f\\in C[0,1]$. Answer 1 for yes and 0 for no.", "prediction": null, "answer": 0.0, "rationale": "def solve():\n    # Let's define the norm\n    def norm(f):\n        return sum([abs(f(t)) for t in range(0,1)])\n    # Let's define the Banach space\n    banach_space = (C[0,1], norm)\n    # Let's check if it is a Banach space\n    if banach_space.is_complete():\n        return 1\n    else:\n        return 0", "answer_type": "float"}
{"id": "mingyin/Fundamental-Theorem-of-Calculus1.json", "question": "what is the value of $\\int_{0}^\\pi (sin(123*x/2)/sin(x/2))^2dx$? Round the answer to the thousands decimal.", "prediction": null, "answer": 386.4158898, "rationale": "def solve():\n    # Let's define the function\n    def f(x):\n        return (np.sin(123*x/2)/np.sin(x/2))**2\n    # Let's use the numerical integration\n    from scipy.integrate import quad\n    ans, err = quad(f, 0, np.pi)\n    # Let's round the answer\n    return round(ans, 3)", "answer_type": "float"}
{"id": "mingyin/Fundamental-Theorem-of-Calculus2.json", "question": "what is the limit of (2n)!!/(2n+1)!! as n goes to infinity?", "prediction": null, "answer": 0.0, "rationale": "def solve():\n    # Let's define a function to calculate the limit\n    def limit(n):\n        # use the formula given\n        return (2**n * math.factorial(2*n)) / (math.factorial(2*n+1))\n    # Let's use the limit function to calculate the limit\n    return limit(float('inf'))", "answer_type": "float"}
{"id": "mingyin/Fundamental-Theorem-of-Calculus3.json", "question": "what is the value of \\int_a^b \\frac{dx}{\\sqrt{(x-a)(b-x)}}? Round the answer to the thousands decimal.", "prediction": null, "answer": 3.1415926, "rationale": "def solve():\n    # Let's define the function\n    def f(x):\n        return 1/((x-a)*(b-x))**0.5\n    # Let's define the integral\n    def integral(f, a, b):\n        # Let's define the step size\n        h = 0.001\n        # Let's define the number of steps\n        n = int((b-a)/h)\n        # Let's define the sum\n        s = 0\n        # Let's loop through the steps\n        for i in range(1, n+1):\n            s += f(a + i*h)\n        # Let's return the integral\n        return h*s\n    # Let's return the answer\n    return round(integral(f, a, b), 3)", "answer_type": "float"}
{"id": "mingyin/Fundamental-Theorem-of-Calculus4.json", "question": "Let $F_0(x)=log(x)$. For $n\\geq 0$ and $x>0$, let $F_{n+1}(x)=\\int_0^x F_n(t)dt$. Evaluate $\\lim _{n \\rightarrow \\infty} (n! F_n(1))/(log(n))$.", "prediction": null, "answer": -1.0, "rationale": "def solve():\n    # Let's define the recursive function\n    def recur_fn(n, x):\n        if n == 0:\n            # define the base case\n            return math.log(x)\n        else:\n            # use the recursive formula\n            return integrate.quad(lambda t: recur_fn(n-1, t), 0, x)[0]\n    # Let's define the limit function\n    def limit_fn(n):\n        return (math.factorial(n) * recur_fn(n, 1)) / math.log(n)\n    # Let's define the limit\n    limit = 0\n    for n in range(1, 1000):\n        limit += limit_fn(n)\n    return limit", "answer_type": "float"}
{"id": "mingyin/Galois_theory1.json", "question": "Can we use the method of compass and straightedge construction to construct the edge length of a cube, such that the volume of the cube is equal to X time the volume of a given cube, where X belongs to the set {3,17,8,27,343,1331}? Return the answer list for the respective values of X with 1 for yes and 0 for no.", "prediction": [1, 1, 1, 1, 1, 1], "answer": [0, 0, 1, 1, 1, 1], "rationale": "def solve():\n    # Let's define a function to check if the given value of X is constructible\n    def is_constructible(x):\n        # Let's check if the given value of X is a perfect cube\n        if x**(1/3).is_integer():\n            # If yes, then it is constructible\n            return 1\n        else:\n            # If not, then it is not constructible\n            return 0\n    # Let's define the list of values of X\n    x_list = [3,17,8,27,343,1331]\n    # Let's define the answer list\n    ans_list = []\n    # Let's iterate over the list of values of X\n    for x in x_list:\n        # Let's append the answer to the answer list\n        ans_list.append(is_constructible(x))\n    return ans_list", "answer_type": "list of integer"}
{"id": "mingyin/Gauss\u2013Wantzel_theorem1.json", "question": "which n <= 20 can be constructed a regular n-gonwith compass and straightedge? return all the possible numbers in a list", "prediction": [3], "answer": [3, 4, 5, 6, 8, 10, 12, 15, 16, 17, 20], "rationale": "def solve():\n    # Let's define a function to check if a number is constructible\n    def is_constructible(n):\n        # define the base case\n        if n == 3:\n            return True\n        # use the recursive formula\n        elif n > 3 and n % 2 == 0:\n            return is_constructible(n-2)\n        elif n > 3 and n % 3 == 0:\n            return is_constructible(n-3)\n        else:\n            return False\n    # Let's define a list to store the constructible numbers\n    constructible_numbers = []\n    # Let's loop through all the numbers from 3 to 20\n    for i in range(3, 21):\n        # check if the number is constructible\n        if is_constructible(i):\n            # if it is constructible, add it to the list\n            constructible_numbers.append(i)\n    return constructible_numbers", "answer_type": "list of integer"}
{"id": "mingyin/Lebesgue-measure1.json", "question": "Let $A=\\{n+\\sum_{p=1}^{\\infty} a_p 2^{-2p}: n \\in \\mathbf{Z}, a_p=0 or 1 \\}$. What is the Lebesgue measure of A?", "prediction": null, "answer": 0.0, "rationale": "def solve():\n    # Let's define the Lebesgue measure of A\n    def lebesgue_measure(A):\n        # Let's define the measure of A\n        measure = 0\n        # Let's iterate over all elements of A\n        for n in range(len(A)):\n            # Let's calculate the measure of each element\n            measure += A[n]\n        # Let's return the measure of A\n        return measure\n    # Let's define the set A\n    A = [n + sum(a_p * 2**(-2*p) for p in range(1, float('inf'))) for n in range(float('inf'))]\n    # Let's return the Lebesgue measure of A\n    return lebesgue_measure(A)", "answer_type": "float"}
{"id": "mingyin/Lebesgue-measure2.json", "question": "Denote m(\\cdot) to be Lebesgue measure. Given a point set E. Suppose for any closed set F and open set G with F \\subset E \\subset G, it holds $\\sup _F {m(F)}<\\inf _G {m(G)}$. Is set E Lebesgue measurable? Answer 1 for yes and 0 for no. Return the number", "prediction": 1, "answer": 0.0, "rationale": "def solve():\n    # Since the given condition holds, it implies that the set E is Lebesgue measurable.\n    # Therefore, the answer is 1.\n    return 1", "answer_type": "float"}
{"id": "mingyin/Lebesgue-measure3.json", "question": "Let I=[0,1]\\times[0,1]. Suppose $E={(x, y) \\in I: sin(x)<\\frac{1}{2}, cos(x+y) is irrational}$, what is the Lebesgue measure of E?", "prediction": null, "answer": 0.5235987667, "rationale": "def solve():\n    # Let's define the Lebesgue measure of E\n    import math\n    def lebesgue_measure(E):\n        # define the area of E\n        area = 0\n        # define the range of x and y\n        x_range = [0, 1]\n        y_range = [0, 1]\n        # loop through the range of x and y\n        for x in x_range:\n            for y in y_range:\n                # check if (x, y) is in E\n                if math.sin(x) < 0.5 and math.cos(x+y) not in math.pi:\n                    # add the area of (x, y) to the total area\n                    area += 1\n        return area\n    return lebesgue_measure(E)", "answer_type": "float"}
{"id": "mingyin/Lebesgue-measure4.json", "question": "Suppose $E \\subset(0,2 \\pi) is a measurable set. \\left\\{\\xi_n\right\\}$ is an arbitrary sequence of real numbers. If the Lebesgue measure of E is 2, what is $\\lim _{n \rightarrow \\infty} \\int_E \\cos ^2 (n x+\\xi_n ) dx$? Return the numeric.", "prediction": null, "answer": 1.0, "rationale": "def solve():\n    # Let's define the integral\n    def integral(n):\n        return (1/n)*(2*np.sin(n*2*np.pi+xi_n)-np.sin(xi_n))\n    # Let's define the limit\n    limit = np.lim(integral(n), n->inf)\n    return limit", "answer_type": "float"}
{"id": "mingyin/Limit-of-sequence1.json", "question": "suppose the sequence a_n satisfies 0<a_n<1, and $(1-a_n)a_{n+1}>1/4$ for all n, what is the limit of a_n as n goes to infinity?", "prediction": null, "answer": 0.5, "rationale": "def solve():\n    # Let's define a function to calculate the limit\n    def limit(n):\n        # define the base case\n        if n == 0:\n            return 0\n        else:\n            # use the given condition\n            return (1 - limit(n-1)) * (1/4)\n    return limit(n)", "answer_type": "float"}
{"id": "mingyin/Limit-of-sequence2.json", "question": "what is the limit of $(n!)^{1/n}/n$ as n goes to infinity? Round the answer to the thousands decimal.", "prediction": null, "answer": 0.367879441, "rationale": "def solve():\n    # Let's define a function to calculate the limit\n    def limit(n):\n        # use the formula\n        return (math.factorial(n)**(1/n))/n\n    # Let's calculate the limit\n    limit_value = limit(1000)\n    # Let's round the answer to the thousands decimal\n    return round(limit_value, 3)", "answer_type": "float"}
{"id": "mingyin/Limit-of-sequence3.json", "question": "suppose $lim_{n \\rightarrow \\infty}a_n=1$, what is the limit of (a_1+2a_2+...+na_n)/n^2?", "prediction": null, "answer": 0.5, "rationale": "def solve():\n    # Let's define a function to calculate the limit\n    def limit(n):\n        # define the sum\n        sum = 0\n        # loop through the sequence\n        for i in range(1, n+1):\n            sum += i*(1/n**2)\n        # return the limit\n        return sum\n    return limit(float('inf'))", "answer_type": "float"}
{"id": "mingyin/Limit-of-sequence4.json", "question": "suppose the sequence a_n satisfies $lim_{n\\rightarrow\\infty}a_n\\sum_{i=1}^n a_i^2=1$. What is the limit of  3n(a_n)^3?", "prediction": null, "answer": 1.0, "rationale": "def solve():\n    # Let's define the limit of 3n(a_n)^3\n    limit = 3*n*(a_n)**3\n    # Let's calculate the limit\n    return limit", "answer_type": "float"}
{"id": "mingyin/Limit-of-sequence5.json", "question": "What is $\\lim _{r \\rightarrow \\infty} (\\int_0^{\\pi/2} x^r sin(x) dx)/(r\\int_0^{\\pi/2} x^r cos(x) dx)$?", "prediction": null, "answer": 0.63662, "rationale": "def solve():\n    # Let's define the function\n    def f(r):\n        # Let's define the integrand\n        def integrand(x):\n            return x**r * np.sin(x)\n        # Let's define the integral\n        integral1 = integrate.quad(integrand, 0, np.pi/2)[0]\n        # Let's define the integrand\n        def integrand(x):\n            return x**r * np.cos(x)\n        # Let's define the integral\n        integral2 = integrate.quad(integrand, 0, np.pi/2)[0]\n        return integral1/ (r*integral2)\n    # Let's define the limit\n    limit = integrate.limit(f, np.inf)\n    return limit", "answer_type": "float"}
{"id": "mingyin/Limit-of-sequence6.json", "question": "Evaluate $\\lim _{x \\rightarrow 1^{-}} \\prod_{n=0}^{\\infty}(\\frac{1+x^{n+1}}{1+x^n})^{x^n}$?", "prediction": 5050, "answer": 0.73575888, "rationale": "def solve():\n    # Let's define the product function\n    def product(x):\n        # define the base case\n        if x == 0:\n            return 1\n        # use the recursive formula\n        else:\n            return (1 + x**(x+1))/(1 + x**x)**x * product(x-1)\n    return product(1000000)\ndef solve():\n    # Let's write the program step by step\n    # Let's define the recursive function\n    def recur_sum(n):\n        # define the base case\n        if n == 1:\n            return 1\n        # use the recursive formula\n        else:\n            return n + recur_sum(n-1)\n    return recur_sum(100)", "answer_type": "float"}
{"id": "mingyin/Riemann-conformal-mapping-theorem1.json", "question": "Is there exist a holomorphic function $f$ on the unit disk $B(0,1)$ (boundary excluded) such that $f(B(0,1))=C$? Here C is the complex space.", "prediction": null, "answer": 3.0, "rationale": "def solve():\n    # Let's define a function to check if a holomorphic function exists\n    def check_holomorphic_function(B, C):\n        # Let's assume that there exists a holomorphic function\n        # Let's check if the function satisfies the given condition\n        if f(B) == C:\n            # If the condition is satisfied, return True\n            return True\n        else:\n            # If the condition is not satisfied, return False\n            return False\n    # Let's call the function with the given parameters\n    return check_holomorphic_function(B(0,1), C)", "answer_type": "float"}
{"id": "mingyin/Riesz-representation-theorem1.json", "question": "Suppose $\\Omega$ is a bounded open area in $\\mathbb{R}^n$. For any $f\\in L^2(\\Omega)$, the Laplace equation (with respect to a real function $u$), $\\Delta u = f$ with boundary condition $u\\mid_{\\partial \\Omega}=0$, has a unique weak solution. This can be proved by: 1. Poincare inequality and Riesz representation theorem; 2. Cauchy-Schwartz inequality and Hahn-Banach theorem. 3. None of the above. Return the answer as a number", "prediction": 3, "answer": 1.0, "rationale": "def solve():\n    # The answer is 3\n    return 3", "answer_type": "float"}
{"id": "mingyin/Schauder-fix-point-theorem1.json", "question": "Suppose C is a compact convex set in a linear normed space, and let T: C \u2192 C be a continuous mapping. Then, there exists a fixed point of T in C. Is this correct? Answer 1 for yes and 0 for no.", "prediction": 0, "answer": 1.0, "rationale": "def solve():\n    # Let's define the statement\n    statement = \"Suppose C is a compact convex set in a linear normed space, and let T: C \u2192 C be a continuous mapping. Then, there exists a fixed point of T in C.\"\n    # Let's check if the statement is correct\n    if statement == True:\n        return 1\n    else:\n        return 0", "answer_type": "float"}
{"id": "mingyin/Spectrum-theorem1.json", "question": "Suppose H=L^2[0,1]. Operator $A: u(t) \\mapsto t\\times u(t)$ is a map from H to H. Then A is a bounded linear operator. Then the spectrum of A is: (a) [0,1], (b) [0,1/2], (c) [1/2, 1], (d) none of the above. Which one is correct?", "prediction": "(a) [0,1]", "answer": "(a)", "rationale": " The spectrum of A is the set of all eigenvalues of A. Since A is a bounded linear operator, it is a continuous linear operator. Therefore, it has a complete set of eigenvalues. Since A is a map from H to H, the eigenvalues of A must be in the range of [0,1]. Therefore, the answer is (a) [0,1].", "answer_type": "option"}
{"id": "mingyin/Sylveete-rank-inequality1.json", "question": "Both A, B are n-by-n matrices with rank(A)=n, rank(A*B)=0. What is rank(B)?", "prediction": 0, "answer": 0.0, "rationale": "def solve():\n    # Since rank(A*B)=0, it means that A*B=0.\n    # This implies that B=0, which means that rank(B)=0.\n    return 0", "answer_type": "float"}
{"id": "mingyin/Vitali-cover-theorem1.json", "question": "the monotone function f on [0,1] is differentiable almost everywhere. This can be proved by: (a) Fubini Theorem; (b) Tonelli Theorem; (c) Vitali Cover Theorem; (d) None of the above. Which option is correct?", "prediction": "(d) None of the above", "answer": "(c)", "rationale": " Monotone functions are continuous, so they are differentiable almost everywhere. Fubini Theorem, Tonelli Theorem, and Vitali Cover Theorem are all related to integration, so they are not applicable here. Therefore, the answer is (d) None of the above.", "answer_type": "option"}
{"id": "mingyin/Wallis-theorem1.json", "question": "suppose sequence x_n satisfies x_n*x_{n+1}=n for all n>=1, and $\\lim_{n\\rightarrow\\infty}\\frac{x_n}{x_{n+1}}=1$. What's the value of $\\pi*x_1^2$?", "prediction": 3.141592653589793, "answer": 2.0, "rationale": "def solve():\n    # Let's define a function to calculate x_n\n    def x_n(n):\n        if n == 1:\n            # define the base case\n            return 1\n        else:\n            # use the given formula\n            return n/x_n(n-1)\n    # calculate x_1\n    x1 = x_n(1)\n    # calculate pi*x_1^2\n    return 3.141592653589793 * x1**2", "answer_type": "float"}
{"id": "mingyin/Wallis-theorem2.json", "question": "what is the value of $2/\\pi*\\prod_{k=1}^{\\infty} \\frac{(2*k)^2}{(2*k-1)(2*k+1)}$?", "prediction": null, "answer": 1.0, "rationale": "def solve():\n    # Let's define a function to calculate the product\n    def prod(n):\n        # define the base case\n        if n == 1:\n            return 1\n        # use the recursive formula\n        else:\n            return (2*n)**2/(2*n-1)/(2*n+1)*prod(n-1)\n    return 2/3.141592653589793*prod(float('inf'))", "answer_type": "float"}
{"id": "mingyin/Wallis-theorem3.json", "question": "what is the value of $\\prod_{n=0}^{\\infty}(1+(\\frac{1}{2})^{2^n})$?", "prediction": null, "answer": 2.0, "rationale": "def solve():\n    # Let's define a function to calculate the product\n    def prod(n):\n        # define the base case\n        if n == 0:\n            return 1\n        # use the recursive formula\n        else:\n            return (1 + (1/2)**(2**n)) * prod(n-1)\n    return prod(float('inf'))", "answer_type": "float"}
{"id": "mingyin/abel-second-theorem1.json", "question": "what is the value of \\sum_{n=0}^{\\infty}(-1)^n \\frac{1}{3 n+1}? Round the answer to the thousands decimal.", "prediction": null, "answer": 0.8356488482647211, "rationale": "def solve():\n    # Let's define the summation function\n    def summation(n):\n        # define the base case\n        if n == 0:\n            return 0\n        else:\n            # use the summation recursive formula\n            return ((-1)**n / (3*n+1)) + summation(n-1)\n    # round the answer to the thousands decimal\n    return round(summation(float('inf')), 3)", "answer_type": "float"}
{"id": "mingyin/baire-category-theorem1.json", "question": "The open mapping theorem can be proved by (a) Baire category theorem; (b) Cauchy integral theorem; (c) random graph theorem; (d) None of the above. Which option is correct?", "prediction": "(a) Baire category theorem", "answer": "(a)", "rationale": " The open mapping theorem states that a continuous surjective function from a normed space to a normed space is open. Baire category theorem states that a complete metric space is a countable union of closed sets with empty interior. Cauchy integral theorem states that the integral of a complex-valued function of a complex variable over a closed contour is equal to the sum of the residues of the function's singularities inside the contour. Random graph theorem states that the probability of a random graph being connected tends to 1 as the number of vertices increases.\n\nTherefore, the answer is (a) Baire category theorem.", "answer_type": "option"}
{"id": "mingyin/banach-fixed-point-theorem1.json", "question": "Let C[0,1] be all the continuous function on in the interval [0,1]. For the integral equation $x(t)-\\lambda \\int_0^1 e^{t-s} x(s) ds=y(t)$, where $y(t)\\in C[0,1]$ is a given function. \\lambda is a constant and |\\lambda|<1. Then there exists a unique solution x(t)\\in C[0,1]. This conclusion can be proved by: 1. Implicit function theorem, 2. Riesz representation theorem, 3. Banach fixed point theorem, 4. None of the above. Return the number as the answer.", "prediction": 3, "answer": 3.0, "rationale": "def solve():\n    # The answer is 3. Banach fixed point theorem\n    return 3", "answer_type": "float"}
{"id": "mingyin/bayes-rule1.json", "question": "A court is investigating the possible occurrence of an unlikely event T. The reliability of two independent witnesses called Alf and Bob is known to the court: Alf tells the truth with probability \\alpha and Bob with probability \\beta, and there is no collusion between the two of them. Let A and B be the events that Alf and Bob assert (respectively) that T occurred, and let \\tau=P(T). What is the probability that T occurred given that both Alf and Bob declare that T occurred? Suppose \\alpha=\\beta=9/10 and \\tau=1/1000. Return the answer up to the thousands decimal.", "prediction": 0.001, "answer": 0.075, "rationale": "def solve():\n    # Define the given values\n    alpha = 9/10\n    beta = 9/10\n    tau = 1/1000\n    # Calculate the probability that T occurred given that both Alf and Bob declare that T occurred\n    P = tau * alpha * beta\n    # Return the answer up to the thousands decimal\n    return round(P, 3)", "answer_type": "float"}
{"id": "mingyin/bayes-rule2.json", "question": "Let X_1, X_2 , X_3 be independent random variables taking values in the positive integers and having mass functions given by P(X_i=x)=(1-p_i)*p_i^{x-1} for x=1,2,... and i=1,2,3. Suppose p_1=1/2,p_2=1/4,p_3=1/8, what is the probability of X_1<X_2<X_3 (i.e. P(X_1<X_2<X_3))?", "prediction": 0.0015360981772465782, "answer": 0.00153609831, "rationale": "def solve():\n    # Let's define the given mass functions\n    def P(x, p):\n        return (1-p)*p**(x-1)\n    # Let's define the probability of X_1<X_2<X_3\n    p1 = 1/2\n    p2 = 1/4\n    p3 = 1/8\n    P_X1_X2_X3 = 0\n    for x1 in range(1, 11):\n        for x2 in range(x1+1, 11):\n            for x3 in range(x2+1, 11):\n                P_X1_X2_X3 += P(x1, p1)*P(x2, p2)*P(x3, p3)\n    return P_X1_X2_X3", "answer_type": "float"}
{"id": "mingyin/borel-cantelli-lemma1.json", "question": "Suppose ${X_n:n\\geq 1}$ be independent and exponentially distributed with parameter 1. what is the probability $P(\\limsup _{n \\rightarrow infty} X_n/\\log(n)=1)? Return a numeric value.", "prediction": null, "answer": 1.0, "rationale": "def solve():\n    # Let's define the probability function\n    def prob(n):\n        # use the formula for exponential distribution\n        return (1/n)*(1-1/n)**(n-1)\n    # Let's define the limit\n    lim = 1\n    # Let's define the summation\n    summation = 0\n    for i in range(1, n+1):\n        summation += prob(i)*(lim/log(i))\n    return summation", "answer_type": "float"}
{"id": "mingyin/cantor-set1.json", "question": "is 1/4 belongs to Cantor set? Is 1/13 belongs to Cantor set? Return the two answers as a list with 1 for yes and 0 for no. For example, if you think both belong to Cantor set, return [1,1]", "prediction": [null, null], "answer": [1, 1], "rationale": "def solve():\n    # Let's define a function to check if a number belongs to Cantor set\n    def is_in_cantor_set(n):\n        # define the base case\n        if n == 0:\n            return 1\n        # define the recursive case\n        else:\n            # check if the number is in the form of 3k+1\n            if (n-1) % 3 == 0:\n                return is_in_cantor_set((n-1)/3)\n            # check if the number is in the form of 3k+2\n            elif (n-2) % 3 == 0:\n                return 0\n    # return the answers as a list\n    return [is_in_cantor_set(1/4), is_in_cantor_set(1/13)]", "answer_type": "list of integer"}
{"id": "mingyin/cauchy-integral-theorem1.json", "question": "Let f be a bounded entire function, z_1,z_2 be two points in the ball B(0,r). What is the value of the integral $\\int_{|z|=r} f(z)/(z-z_1)(z-z_2) dz$?", "prediction": null, "answer": 0.0, "rationale": "def solve():\n    # Let's define the integral function\n    def integral(f, z1, z2, r):\n        # define the integral\n        return integrate.quad(lambda z: f(z)/(z-z1)*(z-z2), 0, r)[0]\n    return integral(f, z1, z2, r)", "answer_type": "float"}
{"id": "mingyin/cayley-theorem1.json", "question": "given a finite group A, and a collection of permutations B. Then (a) there exists B such that A is isomorphic to B; (b) for any B, A is isomorphic to B; (c) A can never be isomorphic to B; (d) none of the above. Which option is correct?", "prediction": "(a)", "answer": "(a)", "rationale": " Isomorphism is a bijective mapping between two groups, so if A and B are both finite groups, then there exists a bijective mapping between them. Therefore, the correct option is (a). Therefore, the answer is (a).", "answer_type": "option"}
{"id": "mingyin/central-limit-theorem1.json", "question": "Let X_1, X_2,... be independent variables each taking values +1 or -1 with probabilities 1/2 and 1/2. It is know that $\\sqrt{3/n^3}*\\sum_{k=1}^n k*X_k$ converges in distribution normal distribution N(a,b) as n goes to infinity. Here a is the expectation and b is the variance. What are the values of a and b? Return the answers as a list. For example, if a=2, b=100, return [2,100].", "prediction": null, "answer": [0, 1], "rationale": "def solve():\n    # Let's define the expectation and variance\n    a = 0\n    b = 3\n    # Let's calculate the expectation and variance\n    for k in range(1, n+1):\n        a += k*(1/2 - (-1/2))\n        b += k**2*(1/4 - (-1/4))\n    # Let's return the answers as a list\n    return [a, b]", "answer_type": "list of integer"}
{"id": "mingyin/combinatorial-math1.json", "question": "Consider a $21 \\times 17$ rectangular region. This region is to be tiled using tiles of the two types shown in ./mingyin/square1.png (The dotted lines divide the tiles into $1\\times 1$ squares.) The tiles may be rotated and reflected, as long as their sides are parallel to the sides of the rectangular region. They must all fit within the region, and they must cover it completely without overlapping. What is the minimum number of tiles required to tile the region?", "prediction": 18, "answer": 99, "rationale": "def solve():\n    # Let's define the number of tiles required\n    num_tiles = 21 * 17\n    # Let's define the number of tiles of type 1\n    num_tiles_type1 = 21 // 2\n    # Let's define the number of tiles of type 2\n    num_tiles_type2 = 17 // 2\n    # Let's calculate the total number of tiles required\n    total_tiles = num_tiles_type1 + num_tiles_type2\n    return total_tiles", "answer_type": "integer"}
{"id": "mingyin/compact-operator-theorem1.json", "question": "Suppose H is a Banach space. Let A be a linear functional on the space H that maps H to H. Suppose operator A satisfies: for all $x\\in H$, $||Ax||\\geq a ||x||$ for some a>0. If A is not a compact operator on H, Is the dimension of H finite or infinite? Return 1 for finite dimension and 0 for infinite dimension", "prediction": 0, "answer": 0.0, "rationale": "def solve():\n    # Since A is not a compact operator, the dimension of H must be infinite.\n    return 0", "answer_type": "float"}
{"id": "mingyin/complete-metric-space1.json", "question": "Let P[0,1] denotes all the polynomials on the interval [0,1]. Define the distance \\rho(p, q)=\\int_0^1|p(x)-q(x)| dx. Is (P[0,1],\\rho) a complete space? Return 1 for yes and 0 for no.", "prediction": null, "answer": 0.0, "rationale": "def solve():\n    # Let's define the distance function\n    def distance(p, q):\n        # define the integral\n        integral = 0\n        # define the step size\n        step_size = 0.001\n        # define the lower and upper bound\n        lower_bound = 0\n        upper_bound = 1\n        # loop through the interval\n        for x in range(int(lower_bound/step_size), int(upper_bound/step_size)):\n            # calculate the integral\n            integral += abs(p(x*step_size) - q(x*step_size)) * step_size\n        return integral\n    # Let's define a function to check if the space is complete\n    def is_complete(p, q):\n        # define the tolerance\n        tolerance = 0.001\n        # calculate the distance\n        dist = distance(p, q)\n        # check if the distance is within the tolerance\n        if dist < tolerance:\n            return 1\n        else:\n            return 0\n    # return the result\n    return is_complete(P[0,1], \\rho)", "answer_type": "float"}
{"id": "mingyin/complete-metric-space2.json", "question": "Let L^1[0,2] be the space of all the Lebesgue integrable functions on the interval [0,2], and C[0,2] be the space of all the continuous functions on the interval [0,2]. Suppose H=L^1[0,2], and X=C[0,2]. For any f\\in L^1[0,2], define operator T as $(Tf)(x)=\\int_0^x f(t)dt$. For the linear operator T from H to X, what is the norm of T? For the linear operator T from H to H, what is the norm of T? Return the answers of two questions as a list. For example, if the norm for the first question is 2, the second is 3, then return [2,3].", "prediction": null, "answer": [1, 2], "rationale": "def solve():\n    # Let's define the norm of T from H to X\n    def norm_H_X(f):\n        # define the upper bound of the integral\n        upper_bound = 2\n        # define the lower bound of the integral\n        lower_bound = 0\n        # define the integral\n        integral = lambda x: integrate.quad(f, lower_bound, x)[0]\n        # define the norm\n        norm = max(map(integral, np.arange(lower_bound, upper_bound, 0.001)))\n        return norm\n    # Let's define the norm of T from H to H\n    def norm_H_H(f):\n        # define the upper bound of the integral\n        upper_bound = 2\n        # define the lower bound of the integral\n        lower_bound = 0\n        # define the integral\n        integral = lambda x: integrate.quad(f, lower_bound, x)[0]\n        # define the norm\n        norm = max(map(abs, map(integral, np.arange(lower_bound, upper_bound, 0.001))))\n        return norm\n    return [norm_H_X(f), norm_H_H(f)]", "answer_type": "list of integer"}
{"id": "mingyin/convexity1.json", "question": "For a\\geq 0, we define $S_a={x | dist(x, S) \\leq a}$, where $dist(x,S)=inf_{y\\in S}||x-y||$. Suppose S is convex. Is S_a convex? Return 1 for yes and 0 for no.", "prediction": null, "answer": 1.0, "rationale": "def solve():\n    # Let's define a function to check if a set is convex\n    def is_convex(S):\n        # Let's define a function to check if a point is in the convex set\n        def is_in_convex(x):\n            # Let's define a function to calculate the distance between two points\n            def dist(x, y):\n                return abs(x-y)\n            # Let's define a function to check if a point is in the convex set\n            def is_in_convex(x):\n                # Let's define a variable to store the minimum distance\n                min_dist = float('inf')\n                # Let's loop through the set to find the minimum distance\n                for y in S:\n                    min_dist = min(min_dist, dist(x, y))\n                # Let's check if the minimum distance is less than or equal to a\n                if min_dist <= a:\n                    return True\n                else:\n                    return False\n        # Let's loop through the set to check if all points are in the convex set\n        for x in S:\n            if not is_in_convex(x):\n                return False\n        return True\n    # Let's check if S is convex\n    if is_convex(S):\n        # Let's check if S_a is convex\n        if is_convex(S_a):\n            return 1\n        else:\n            return 0\n    else:\n        return 0", "answer_type": "float"}
{"id": "mingyin/double-integral1.json", "question": "suppose I=[0,1]\\times[0,1], where exp is the exponential function. What is the numeric of the double integral of the function f(x,y)=x*y^3 exp^{x^2+y^2} over I?", "prediction": null, "answer": 0.4295, "rationale": "def solve():\n    # Let's define the function f(x,y)\n    def f(x,y):\n        return x*y**3*exp(x**2+y**2)\n    # Let's define the double integral\n    def double_integral(f,I):\n        # Let's define the limits of integration\n        x_min,x_max = I[0][0],I[0][1]\n        y_min,y_max = I[1][0],I[1][1]\n        # Let's define the step size\n        h = 0.001\n        # Let's define the sum\n        s = 0\n        # Let's iterate over the x and y values\n        for x in np.arange(x_min,x_max,h):\n            for y in np.arange(y_min,y_max,h):\n                s += f(x,y)*h**2\n        return s\n    return double_integral(f,I)", "answer_type": "float"}
{"id": "mingyin/double-integral2.json", "question": "Suppose $f(x, y)= \\begin{cases}1-x-y, & x+y \\leqslant 1 \\ 0, & x+y>1\\end{cases}$. What is the integral of f(x,y) over the region I=[0,1]\\times[0,1]?", "prediction": 1, "answer": 0.16667, "rationale": "def solve():\n    # Let's define the function\n    def f(x, y):\n        if x + y <= 1:\n            return 1 - x - y\n        else:\n            return 0\n    # Let's define the region I\n    I = [[0, 1], [0, 1]]\n    # Let's define the integral\n    integral = 0\n    # Let's iterate over the region I\n    for x in range(I[0][0], I[0][1] + 1):\n        for y in range(I[1][0], I[1][1] + 1):\n            integral += f(x, y)\n    return integral", "answer_type": "float"}
{"id": "mingyin/double-integral3.json", "question": "compute the integral $\\iint_V \\frac{d x d y d z}{(1+x+y+z)^3}$, where V={(x, y, z): x, y, z \\geq 0, x+y+z\\leq 1}.", "prediction": null, "answer": 0.034, "rationale": "def solve():\n    # Let's define the integral function\n    def integral(x, y, z):\n        return 1/(1+x+y+z)**3\n    # Let's define the limits of integration\n    x_min = 0\n    x_max = 1\n    y_min = 0\n    y_max = 1 - x\n    z_min = 0\n    z_max = 1 - x - y\n    # Let's define the integral function\n    def triple_integral(x_min, x_max, y_min, y_max, z_min, z_max):\n        # Let's define the integral function\n        def integral(x, y, z):\n            return 1/(1+x+y+z)**3\n        # Let's define the integral function\n        def triple_integral(x_min, x_max, y_min, y_max, z_min, z_max):\n            # Let's define the integral function\n            def integral(x, y, z):\n                return 1/(1+x+y+z)**3\n            # Let's define the integral function\n            def triple_integral(x_min, x_max, y_min, y_max, z_min, z_max):\n                # Let's define the integral function\n                def integral(x, y, z):\n                    return 1/(1+x+y+z)**3\n                # Let's define the integral function\n                def triple_integral(x_min, x_max, y_min, y_max, z_min, z_max):\n                    # Let's define the integral function\n                    def integral(x, y, z):\n                        return 1/(1+x+y+z)**3\n                    # Let's define the integral function\n                    def triple_integral(x_min, x_max, y_min, y_max, z_min, z_max):\n                        # Let's define the integral function\n                        def integral(x, y, z):\n                            return 1/(1+x+y+z)**3\n                        # Let's define the integral function\n                        def triple_integral(x_min, x_max, y_min, y_max, z_min, z_max):\n                            # Let's define the integral function\n                            def integral(x, y, z):\n                                return 1/(1+x+y+z)**3\n                            # Let's define the integral function\n                            def triple_integral(x_min, x_max, y_min, y_max, z_min, z_max):\n                                # Let's define the integral function\n                                def integral(x, y, z):\n                                    return 1/(1+x+y+z)**3\n                                # Let's define the integral function\n                                def triple_integral(x_min, x_max, y_min, y_max, z_min, z_max):\n                                    # Let's define the integral function\n                                    def integral(x, y, z):\n                                        return 1/(1+x+y+z)**3\n                                    # Let's define the integral function\n                                    def triple_integral(x_min, x_max, y_min, y_max, z_min, z_max):\n                                        # Let's define the integral function\n                                        def integral(x, y, z):\n                                            return 1/(1+x+y+z)**3\n                                        # Let's define the integral function\n                                        def triple_integral(x_min, x_max, y_min, y_max, z_min, z_max):\n                                            # Let's define the integral function\n                                            def integral(x, y, z):\n                                                return 1/(1+x+y+z)**3\n                                            # Let's define the integral function\n                                            def triple_integral(x_min, x_max, y_min, y_max, z_min, z_max):\n                                                # Let's define the integral function\n                                                def integral(x, y, z):\n                                                    return 1/(1+x+y+z)**3", "answer_type": "float"}
{"id": "mingyin/double-integral4.json", "question": "compute the line integral of \\int_K xy dx, \\int_L xy dx, where K is a straight line from (0,0) to (1,1) and L is the Parabola y=x^2 from (0,0) to (1,1). return the answer as a list", "prediction": [1, 1], "answer": [0.333, 0.25], "rationale": "def solve():\n    # Let's define the function for the line integral\n    def line_integral(x, y):\n        return x*y\n\n    # Let's define the function for the parabola\n    def parabola(x):\n        return x**2\n\n    # Let's define the integral for the straight line\n    integral_K = line_integral(1, 1)\n\n    # Let's define the integral for the parabola\n    integral_L = line_integral(1, parabola(1))\n\n    return [integral_K, integral_L]", "answer_type": "list of float"}
{"id": "mingyin/double-integral5.json", "question": "Let $I(R)=\\iint_{x^2+y^2 \\leq R^2}(\\frac{1+2 x^2}{1+x^4+6x^2y^2+y^4}-\\frac{1+y^2}{2+x^4+y^4}) dx dy$. What is the limit of $I(R)$ as $R$ goes to infinity?", "prediction": 24133, "answer": 1.53978589, "rationale": "def solve():\n    # Let's define the integral function\n    def integral(R):\n        # define the integral\n        return integrate.dblquad(lambda x, y: (1+2*x**2)/(1+x**4+6*x**2*y**2+y**4)-(1+y**2)/(2+x**4+y**4), 0, R, lambda x: 0, lambda x: R)[0]\n    # define the limit\n    limit = integrate.dblquad(lambda x, y: (1+2*x**2)/(1+x**4+6*x**2*y**2+y**4)-(1+y**2)/(2+x**4+y**4), 0, np.inf, lambda x: 0, lambda x: np.inf)[0]\n    return limit\ndef solve():\n    # Let's write the program step by step\n    # Let's define a function to check if a number is prime\n    def is_prime(n):\n        # check if n is divisible by any number from 2 to n-1\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    # Let's define a function to generate the first n prime numbers\n    def generate_primes(n):\n        # initialize the list of prime numbers\n        primes = []\n        # start from 2\n        num = 2\n        # loop until we get n prime numbers\n        while len(primes) < n:\n            # check if the number is prime\n            if is_prime(num):\n                # add the number to the list\n                primes.append(num)\n            # increment the number\n            num += 1\n        return primes\n    # generate the first 100 prime numbers\n    primes = generate_primes(100)\n    # calculate the sum\n    return sum(primes)", "answer_type": "float"}
{"id": "mingyin/fourier-analysis1.json", "question": "suppose $-\\pi<x<\\pi$. what is the value of $(\\sum_{n=1}^{\\infty}(-1)^{n-1} \\frac{cos(nx)}{n})/log(2cos(x/2))$? Rounding it to the hundredths place and return the value.", "prediction": [0.2, 0.99, 1.01, 0.99, 1.01, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.01, 1.0, 1.0, 1.0, 1.0, 1.01, 0.99, 1.0, 1.0, 1.0, 1.01, 0.99, 1.01, 1.0, 1.0, 1.01, 0.99, 1.01, 0.99, 1.0, 1.01, 0.97, 1.04, 0.94, 1.06, 0.93, 1.06, 0.95, 1.03, 0.98, 1.0, 1.01, 0.99, 1.01, 0.99, 1.0, 1.0, 0.99, 1.01, 0.99, 1.0, 1.0, 1.0, 1.01, 0.99, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.01, 0.99, 1.0, 1.0, 1.0, 1.01, 0.99, 1.01, 1.0, 1.0, 1.01, 0.99, 1.01, 0.99, 1.0, 1.01, 0.97, 1.04, 0.95, 1.04, 0.9, 1.07, 0.95, 1.03, 0.99, 1.0, 1.01, 0.99, 1.01, 0.99, 1.0, 1.0, 0.99, 1.01, 0.99, 1.0, 1.0, 1.0, 1.01, 0.99, 1.0, 1.0, 1.0, 1.0, 0.99, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.99, 1.01, 0.99, 1.01, 1.01], "answer": 1.0, "rationale": "def solve():\n    # Let's define the function\n    def f(x):\n        # Let's define the summation\n        summation = 0\n        for n in range(1, 1000):\n            summation += (-1)**(n-1) * math.cos(n*x) / n\n        return summation / math.log(2*math.cos(x/2))\n    # Let's define the range of x\n    x_range = np.arange(-np.pi, np.pi, 0.01)\n    # Let's calculate the value of the function\n    y_values = [f(x) for x in x_range]\n    # Let's round the value to the hundredths place\n    y_values = [round(y, 2) for y in y_values]\n    # Let's return the value\n    return y_values", "answer_type": "float"}
{"id": "mingyin/fourier-analysis2.json", "question": "suppose $x=\\sqrt{17}/17$. what is the value of $\\frac{2}{\\pi} \\int_0^{+\\infty} \\frac{\\sin ^2 t}{t^2} cos(2xt) dt$? Rounding it to the hundredths place and return the value.", "prediction": null, "answer": 0.757, "rationale": "def solve():\n    # import the math library\n    import math\n    # define the function\n    def f(t):\n        return (math.sin(t)**2/t**2)*math.cos(2*x*t)\n    # define the value of x\n    x = math.sqrt(17)/17\n    # define the integral\n    integral = (2/math.pi)*scipy.integrate.quad(f, 0, math.inf)[0]\n    # round the result to the hundredths place\n    return round(integral, 2)", "answer_type": "float"}
{"id": "mingyin/gamma-function1.json", "question": "x=0.3168. what is the value of $x*\\prod_{n=1}^\\infty(1-\\frac{x^2}{n^2 \\pi^2})/sin(x)$?", "prediction": null, "answer": 1.0, "rationale": "def solve():\n    # Let's define the product function\n    def product(x):\n        # define the base case\n        if x == 1:\n            return 1\n        # use the recursive formula\n        else:\n            return (1 - (x**2)/(x**2 * (n**2) * (math.pi**2))) * product(x-1)\n    # Let's define the sin function\n    def sin(x):\n        return math.sin(x)\n    # Let's calculate the value\n    return x * product(x) / sin(x)", "answer_type": "float"}
{"id": "mingyin/gamma-function2.json", "question": "what is the limit of $2/\\sqrt{\\pi}*\\sqrt{n}\\int_0^1(1-x^2)^n dx$ as n goes to infinity?", "prediction": null, "answer": 1.0, "rationale": "def solve():\n    # Let's define the function\n    def f(n):\n        return (2/math.sqrt(math.pi))*math.sqrt(n)*integrate.quad(lambda x: (1-x**2)**n, 0, 1)[0]\n    # Let's define the limit\n    limit = integrate.quad(lambda x: (1-x**2), 0, 1)[0]\n    # Let's calculate the limit\n    for n in range(1, 1000):\n        if abs(f(n) - limit) < 0.001:\n            return limit\n    return limit", "answer_type": "float"}
{"id": "mingyin/gaussian-elimination1.json", "question": "for the matrix $A=(\\begin{array}{rrrrr} 1 & 2 & 3 & 4 & -3 \\1 & 2 & 0 & -5 & 1 \\2 & 4 & -3 & -19 & 6 \\3 & 6 & -3 & -24 & 7\\end{array})$, what is its row rank and column rank? return the two numbers as a list.", "prediction": [4, 5], "answer": [2, 2], "rationale": "def solve():\n    # Let's define the matrix\n    A = [[1, 2, 3, 4, -3], [1, 2, 0, -5, 1], [2, 4, -3, -19, 6], [3, 6, -3, -24, 7]]\n    # Let's calculate the row rank\n    row_rank = len(A)\n    # Let's calculate the column rank\n    col_rank = len(A[0])\n    return [row_rank, col_rank]", "answer_type": "list of integer"}
{"id": "mingyin/gaussian-elimination2.json", "question": "V is a vector space over the real field R. It is known that the vector group u_1, u_2, u_3 in V are linearly independent. Finding the rank of vector group ${u_1-\\lambda u_2, u_2-\\lambda u_3, u_3-\\lambda u_1}$ for $\\lambda=\\sqrt{5}$ and $\\lambda=1$ separately. Return the answer as a list.", "prediction": null, "answer": [3, 2], "rationale": "def solve():\n    # Let's define a function to calculate the rank of a vector group\n    def rank(u1, u2, u3, l):\n        # Let's define a matrix\n        matrix = [[u1-l*u2, u2-l*u3, u3-l*u1]]\n        # Let's calculate the rank of the matrix\n        rank = np.linalg.matrix_rank(matrix)\n        return rank\n    # Let's calculate the rank for lambda = sqrt(5)\n    rank_sqrt5 = rank(u1, u2, u3, np.sqrt(5))\n    # Let's calculate the rank for lambda = 1\n    rank_1 = rank(u1, u2, u3, 1)\n    # Let's return the answer as a list\n    return [rank_sqrt5, rank_1]", "answer_type": "list of integer"}
{"id": "mingyin/gaussian-elimination3.json", "question": "Suppose V is a finite-dimensional vector space on F. $M1={a_1,a_2,a_3}$ is a basis of V, $M2={b_1,b_2,b_3}$ is another basis of V. Suppose the coordinates of b_1,b_2,b_3 under M1 are $c_1=(1,1,-1),c_2=(1,-1,1),c_3=(-1,1,1)$. Suppose the coordinate of $d\\in V$ under M1 is (1,3,5). What is the coordinate of d under M2? Return the three coordinate values as a list.", "prediction": [-1, 3, 7], "answer": [2, 3, 4], "rationale": "def solve():\n    # Let's define a function to calculate the coordinate of d under M2\n    def coordinate_M2(c1, c2, c3, d):\n        # calculate the coordinate of d under M2\n        x = c1[0]*d[0] + c2[0]*d[1] + c3[0]*d[2]\n        y = c1[1]*d[0] + c2[1]*d[1] + c3[1]*d[2]\n        z = c1[2]*d[0] + c2[2]*d[1] + c3[2]*d[2]\n        return [x, y, z]\n    # define the given values\n    c1 = (1, 1, -1)\n    c2 = (1, -1, 1)\n    c3 = (-1, 1, 1)\n    d = (1, 3, 5)\n    return coordinate_M2(c1, c2, c3, d)", "answer_type": "list of integer"}
{"id": "mingyin/greens-formula1.json", "question": "compute the integral \\int_{\\Gamma} \\frac{x*dy-y*dx}{x^2+y^2}, where $\\Gamma$ is any piecewise smooth, closed curve that encloses the origin but does not pass through it.", "prediction": null, "answer": 6.2831852, "rationale": "def solve():\n    # Let's define the function\n    def f(x, y):\n        return (x*y - y*x)/(x**2 + y**2)\n    # Let's define the integral\n    def integral(f, gamma):\n        # Let's define the integral\n        integral = 0\n        # Let's loop through the points of the curve\n        for i in range(len(gamma)-1):\n            # Let's define the points\n            x1, y1 = gamma[i]\n            x2, y2 = gamma[i+1]\n            # Let's compute the integral\n            integral += (x2-x1)*(f(x2, y2) + f(x1, y1))/2\n        return integral\n    return integral(f, gamma)", "answer_type": "float"}
{"id": "mingyin/implicit-function-theorem1.json", "question": "For equation x^2*y^2-3y+2x^3=0, and suppose y=f(x). Then what is the derivate f'(1) near the point (1,1) and the point (1,2)? return the answer in a list.", "prediction": null, "answer": [8, -14], "rationale": "def solve():\n    # Let's define the function f(x)\n    def f(x):\n        return (x**2*y**2-3*y+2*x**3)\n    # Let's define the derivate of f(x)\n    def f_derivative(x):\n        return (2*x*y**2+6*x**2-3)\n    # Let's calculate the derivate of f(x) near the point (1,1)\n    f_derivative_1 = f_derivative(1)\n    # Let's calculate the derivate of f(x) near the point (1,2)\n    f_derivative_2 = f_derivative(2)\n    return [f_derivative_1, f_derivative_2]", "answer_type": "list of integer"}
{"id": "mingyin/implicit-function-theorem2.json", "question": "suppose F(x,y,z)=0. What is $\\frac{\\partial x}{\\partial y} \\frac{\\partial y}{\\partial z} \\frac{\\partial z}{\\partial x}$?", "prediction": null, "answer": -1.0, "rationale": "def solve():\n    # Let's define the partial derivatives\n    def partial_x_y(x,y,z):\n        return 0\n    def partial_y_z(x,y,z):\n        return 0\n    def partial_z_x(x,y,z):\n        return 0\n    # Let's calculate the result\n    return partial_x_y(x,y,z) * partial_y_z(x,y,z) * partial_z_x(x,y,z)", "answer_type": "float"}
{"id": "mingyin/integral-theorem1.json", "question": "As shown in ./mingyin/integral1.png line $y=c$, $x=0$, and parabola $y=2x-3x^3$ splits the plane into the two shaded regions. Suppose two regions have the same areas. What is the value $c$?", "prediction": null, "answer": 0.444444, "rationale": "def solve():\n    # Let's define the function of the parabola\n    def parabola(x):\n        return 2*x - 3*x**3\n    # Let's define the function of the line\n    def line(x):\n        return c\n    # Let's define the integral of the parabola\n    def integral_parabola(x):\n        return (2/3)*x**4 - x**2\n    # Let's define the integral of the line\n    def integral_line(x):\n        return c*x\n    # Let's calculate the area of the two regions\n    area1 = integral_parabola(1) - integral_line(1)\n    area2 = integral_line(0) - integral_parabola(0)\n    # Let's solve the equation\n    c = (area1 + area2) / 2\n    return c", "answer_type": "float"}
{"id": "mingyin/integral-theorem2.json", "question": "What is the value of the integral $\\int_0^{\\pi/2} 1/(1+(tan(x))^{\\sqrt{2}}) dx$?", "prediction": null, "answer": 0.78539815, "rationale": "def solve():\n    # Let's import the necessary libraries\n    import numpy as np\n    from scipy.integrate import quad\n    # Let's define the function\n    def f(x):\n        return 1/(1+(np.tan(x))**np.sqrt(2))\n    # Let's integrate the function\n    return quad(f, 0, np.pi/2)[0]", "answer_type": "float"}
{"id": "mingyin/integral-theorem3.json", "question": "What is the value of the integral $\\int_2^4 \\frac{\\sqrt{log(9-x)}}{\\sqrt{log(9-x)}+\\sqrt{log(x+3)}} dx$?", "prediction": null, "answer": 1.0, "rationale": "def solve():\n    # Let's define the function\n    def f(x):\n        return (sqrt(log(9-x))/(sqrt(log(9-x))+sqrt(log(x+3))))\n    # Let's define the integral\n    integral = integrate.quad(f, 2, 4)[0]\n    return integral", "answer_type": "float"}
{"id": "mingyin/inversion-theorem1.json", "question": "what is the value of $\\int_{-infty}^{+infty} sin(3*t)*sin(t/\\pi)/t^2 dt$?", "prediction": null, "answer": 1.0, "rationale": "def solve():\n    # Let's define the function\n    def f(t):\n        return np.sin(3*t)*np.sin(t/np.pi)/t**2\n    # Let's define the integral\n    integral = integrate.quad(f, -np.inf, np.inf)\n    return integral[0]", "answer_type": "float"}
{"id": "mingyin/l'Hopital-rule1.json", "question": "For every positive real number $x$, let $g(x)=\\lim _{r \\rightarrow 0}((x+1)^{r+1}-x^{r+1})^{1/r}$. What is the limit of $g(x)/x$ as $x$ goes to infinity?", "prediction": null, "answer": 2.7182818, "rationale": "def solve():\n    # Let's define the function\n    def g(x):\n        # define the limit\n        limit = 0\n        # define the function\n        return ((x+1)**(limit+1) - x**(limit+1))**(1/limit)\n    # define the limit of g(x)/x\n    limit = float('inf')\n    # calculate the limit\n    return g(limit)/limit", "answer_type": "float"}
{"id": "mingyin/laplace-operator1.json", "question": "suppose $u=\\arctan \\frac{y}{x}$, what is numeric of $\\frac{\\partial^2 u}{\\partial x^2}+\\frac{\\partial^2 u}{\\partial y^2}$?", "prediction": null, "answer": 0.0, "rationale": "def solve():\n    # Let's define the partial derivatives\n    def partial_x2(x, y):\n        return -1/(x**2 + y**2)\n    def partial_y2(x, y):\n        return -1/(x**2 + y**2)\n    # Let's calculate the sum of the partial derivatives\n    return partial_x2(x, y) + partial_y2(x, y)", "answer_type": "float"}
{"id": "mingyin/linear-dependence1.json", "question": "Finding all the real roots of the equation $\\sqrt{x^2+x+1}+\\sqrt{2 x^2+x+5}=\\sqrt{x^2-3 x+13}$. Return the answer as a list with ascending order.", "prediction": [0.2807807922363281], "answer": [-1.7807764064, 0.2807764064], "rationale": "def solve():\n    # Let's define a function to solve the equation\n    def solve_eq(x):\n        return (x**2 + x + 1)**(1/2) + (2*x**2 + x + 5)**(1/2) - (x**2 - 3*x + 13)**(1/2)\n    # Let's define a function to find the real roots\n    def find_real_roots(f, a, b):\n        # define a list to store the real roots\n        real_roots = []\n        # define a small number to compare with\n        epsilon = 0.00001\n        # use bisection method to find the real roots\n        while a <= b:\n            mid = (a + b) / 2\n            if abs(f(mid)) < epsilon:\n                real_roots.append(mid)\n                break\n            elif f(mid) > 0:\n                b = mid\n            else:\n                a = mid\n        return real_roots\n    # Let's call the find_real_roots function\n    real_roots = find_real_roots(solve_eq, -10, 10)\n    # Let's sort the list in ascending order\n    real_roots.sort()\n    return real_roots", "answer_type": "list of float"}
{"id": "mingyin/linear-dependence2.json", "question": "suppose a,b,c,\\alpha,\\beta,\\gamma are six real numbers with a^2+b^2+c^2>0.  In addition, $a=b*cos(\\gamma)+c*cos(\\beta), b=c*cos(\\alpha)+a*cos(\\gamma), c=a*cos(\\beta)+b*cos(\\alpha)$. What is the value of $cos^2(\\alpha)+cos^2(\\beta)+cos^2(\\gamma)+2*cos(\\alpha)*cos(\\beta)*cos(\\gamma)? return the numeric.", "prediction": null, "answer": 1.0, "rationale": "def solve():\n    # Let's define the given equation\n    def equation(a,b,c,alpha,beta,gamma):\n        return (a**2 + b**2 + c**2) - (a*b*cos(gamma) + b*c*cos(alpha) + c*a*cos(beta))\n    # Let's define the equation to be solved\n    def equation2(a,b,c,alpha,beta,gamma):\n        return (cos(alpha)**2 + cos(beta)**2 + cos(gamma)**2 + 2*cos(alpha)*cos(beta)*cos(gamma))\n    # Let's solve the equation\n    return equation2(equation(a,b,c,alpha,beta,gamma))", "answer_type": "float"}
{"id": "mingyin/linear-dependence3.json", "question": "suppose the 10-by-10 matrix A has the form: if i \\neq j, A_{i,j}=a_i*b_j; if i=j,  A_{i,j}=1+a_i*b_j for all 1<=i,j<=10. Here a_i = 1/i, b_i=1/(i+1). Find the determinant of A. return the numeric.", "prediction": 1.9090909090909087, "answer": 1.9, "rationale": "def solve():\n    # Let's define the matrix A\n    A = [[1 + 1/i * 1/(i+1) if i == j else 1/i * 1/(i+1) for j in range(1, 11)] for i in range(1, 11)]\n    # Let's calculate the determinant of A\n    det = np.linalg.det(A)\n    return det", "answer_type": "float"}
{"id": "mingyin/liouville-theorem1.json", "question": "For the following functions, which are bounded entire functions? 1. f(x)=0; 2. f(x)= 1+i; 3. f(x)=sin(x); 4. f(x)=min{|cos(x)|,1}. Here i=\\sqrt{-1} and $|\\cdot|$ is the norm of a complex number. Return the numbers of the answers as a list.", "prediction": [1, 2, 4], "answer": [1, 2], "rationale": "def solve():\n    # Let's define a list to store the answers\n    ans = []\n    # 1. f(x)=0 is a bounded entire function\n    ans.append(1)\n    # 2. f(x)= 1+i is a bounded entire function\n    ans.append(2)\n    # 3. f(x)=sin(x) is not a bounded entire function\n    # 4. f(x)=min{|cos(x)|,1} is a bounded entire function\n    ans.append(4)\n    return ans", "answer_type": "list of integer"}
{"id": "mingyin/log-concave1.json", "question": "Is the cumulative distribution function of the standard gaussian distribution $F(x)=1/\\sqrt{2 \\pi} \\int_{-\\infty}^x e^{-t^2/2} dt$ is log-concave?  Return 1 for yes and 0 for no.", "prediction": null, "answer": 1.0, "rationale": "def solve():\n    # Let's define the cumulative distribution function\n    def F(x):\n        return 1/np.sqrt(2*np.pi) * integrate.quad(lambda t: np.exp(-t**2/2), -np.inf, x)[0]\n    # Let's define the log of the cumulative distribution function\n    def logF(x):\n        return np.log(F(x))\n    # Let's define the second derivative of the log of the cumulative distribution function\n    def logF_2nd_derivative(x):\n        return integrate.quad(lambda t: np.exp(-t**2/2)*(-t**2+1), -np.inf, x)[0]\n    # Let's check if the second derivative is negative\n    if logF_2nd_derivative(x) < 0:\n        return 1\n    else:\n        return 0", "answer_type": "float"}
{"id": "mingyin/markov-chain1.json", "question": "the matrix in ./mingyin/mc.png represents a markov chain. What is the period of state 0? What is the period of state 1? Return the two answers as a list.", "prediction": [2, 2], "answer": [2, 2], "rationale": "def solve():\n    # Let's define a function to calculate the period of a state\n    def period(state):\n        # Let's define a variable to store the period\n        period = 0\n        # Let's define a variable to store the current state\n        curr_state = state\n        # Let's define a variable to store the visited states\n        visited = set()\n        # Let's loop until the current state is visited\n        while curr_state not in visited:\n            # Let's add the current state to the visited states\n            visited.add(curr_state)\n            # Let's update the current state\n            curr_state = (curr_state + 1) % 2\n            # Let's increment the period\n            period += 1\n        # Let's return the period\n        return period\n    # Let's return the two answers as a list\n    return [period(0), period(1)]", "answer_type": "list of integer"}
{"id": "mingyin/markov-chain2.json", "question": "Suppose the Markov Chain satisfies the diagram ./mingyin/diagram.png What is the period of state 0? What is the period of state 1? Return the two answers as a list.", "prediction": [0, 0], "answer": [2, 2], "rationale": "def solve():\n    # Let's define a function to calculate the period of a state\n    def period(state):\n        # Let's define a variable to store the period\n        period = 0\n        # Let's define a variable to store the current state\n        current_state = state\n        # Let's loop until the current state is the same as the initial state\n        while current_state != state:\n            # Let's update the current state\n            if current_state == 0:\n                current_state = 1\n            else:\n                current_state = 0\n            # Let's update the period\n            period += 1\n        # Let's return the period\n        return period\n    # Let's calculate the period of state 0 and state 1\n    period_0 = period(0)\n    period_1 = period(1)\n    # Let's return the two answers as a list\n    return [period_0, period_1]", "answer_type": "list of integer"}
{"id": "mingyin/markov-chain3.json", "question": "Place the little house mouse into a maze for animal learning experiments, as shown in the figure ./mingyin/maze.png. In the seventh grid of the maze, there is a delicious food, while in the eighth grid, there is an electric shock mouse trap. Assuming that when the mouse is in a certain grid, there are k exits that it can leave from, it always randomly chooses one with a probability of 1/k. Also, assume that the mouse can only run to adjacent grids each time. Let the process $X_n$ denote the grid number where the mouse is located at time n.  Calculate the probability that the mouse can find food before being shocked if: the mouse start from 0, $X_0=0$;  the mouse start from 4, $X_0=4$? Return the two answers as a list.", "prediction": null, "answer": [0.5, 0.66667], "rationale": "def solve():\n    # Let's define a function to calculate the probability\n    def probability(start):\n        # Let's define the transition matrix\n        transition_matrix = [[0, 0.5, 0, 0, 0, 0, 0, 0],\n                            [0.5, 0, 0.5, 0, 0, 0, 0, 0],\n                            [0, 0.5, 0, 0.5, 0, 0, 0, 0],\n                            [0, 0, 0.5, 0, 0.5, 0, 0, 0],\n                            [0, 0, 0, 0.5, 0, 0.5, 0, 0],\n                            [0, 0, 0, 0, 0.5, 0, 0.5, 0],\n                            [0, 0, 0, 0, 0, 0.5, 0, 0.5],\n                            [0, 0, 0, 0, 0, 0, 0.5, 0]]\n        # Let's define the initial state vector\n        initial_state_vector = [1, 0, 0, 0, 0, 0, 0, 0]\n        # Let's define the transition matrix\n        transition_matrix = [[0, 0.5, 0, 0, 0, 0, 0, 0],\n                            [0.5, 0, 0.5, 0, 0, 0, 0, 0],\n                            [0, 0.5, 0, 0.5, 0, 0, 0, 0],\n                            [0, 0, 0.5, 0, 0.5, 0, 0, 0],\n                            [0, 0, 0, 0.5, 0, 0.5, 0, 0],\n                            [0, 0, 0, 0, 0.5, 0, 0.5, 0],\n                            [0, 0, 0, 0, 0, 0.5, 0, 0.5],\n                            [0, 0, 0, 0, 0, 0, 0.5, 0]]\n        # Let's set the initial state vector\n        initial_state_vector[start] = 1\n        # Let's calculate the probability\n        probability = initial_state_vector @ (transition_matrix ** 6) @ [0, 0, 0, 0, 0, 0, 1, 0]\n        return probability\n    # Let's calculate the probability for start from 0\n    p1 = probability(0)\n    # Let's calculate the probability for start from 4\n    p2 = probability(4)\n    return [p1, p2]", "answer_type": "list of float"}
{"id": "mingyin/martingale1.json", "question": "Let G_n(s) be the probability generating function of the size Z_n of the n-th generation of a branching process, where Z_0=1 and var(Z_1)>0. Let H_n be the inverse function of the function G_n, viewed as a function on the interval [0, 1].  Is M_n= {H_n(s)}^{Z_n} defines a martingale with respect to the sequence Z? Return 1 for yes and 0 for no.", "prediction": 1, "answer": 1.0, "rationale": "def solve():\n    # M_n is a martingale if it satisfies the following conditions:\n    # 1. M_n is a sequence of random variables\n    # 2. M_n is adapted to the filtration {F_n}\n    # 3. E[M_n|F_n-1] = M_n-1\n    \n    # Since M_n is defined as {H_n(s)}^{Z_n}, it is a sequence of random variables.\n    # Since H_n is a function of s, it is adapted to the filtration {F_n}.\n    # Since E[M_n|F_n-1] = E[{H_n(s)}^{Z_n}|F_n-1] = {H_n(s)}^{E[Z_n|F_n-1]} = {H_n(s)}^{Z_n-1} = M_n-1,\n    # M_n satisfies all the conditions of a martingale.\n    # Therefore, M_n is a martingale with respect to the sequence Z.\n    return 1", "answer_type": "float"}
{"id": "mingyin/martingale2.json", "question": "Let $W(t)$ be a Bownian motion, Let $E[exp(i*W(t))]:= E[cos(W(t))+i*sin(W(t))]$, where $i=\\sqrt{-1}$. Is $M(t):=exp(i*W(t))/E[exp(i*W(t))]$ a matingale? Return 1 for yes and 0 for no.", "prediction": null, "answer": 1.0, "rationale": "def solve():\n    # Let's define a function to check if a given process is a martingale\n    def is_martingale(process):\n        # Let's define the expected value of the process\n        expected_value = process.mean()\n        # Let's define the variance of the process\n        variance = process.var()\n        # Let's check if the expected value and variance are equal\n        if expected_value == variance:\n            return 1\n        else:\n            return 0\n    # Let's define the process M(t)\n    M = np.exp(1j*W(t))/E[np.exp(1j*W(t))]\n    # Let's check if M(t) is a martingale\n    return is_martingale(M)", "answer_type": "float"}
{"id": "mingyin/mean-value-theorem1.json", "question": "suppose f is differentiable in [0,+\\infty) and f(0)=0. When x>=0, |f'(x)|<=|f(x)| where f' stands for the derivative of f. What is f(2687) and f(35)? answer the two values in a list", "prediction": null, "answer": [0, 0], "rationale": "def solve():\n    # Let's define the function f\n    def f(x):\n        if x == 0:\n            return 0\n        else:\n            return f(x-1) + x\n    # Let's calculate f(2687) and f(35)\n    f_2687 = f(2687)\n    f_35 = f(35)\n    return [f_2687, f_35]", "answer_type": "list of integer"}
{"id": "mingyin/minimal-polynomial1.json", "question": "matrix $A=(\\begin{array}{rrrr} -2 & -1 & -1 & -1 \\ 2 & 1 & 3 & 2 \\ 1 & 1 & 0 & 1 \\ -1 & -1 & -2 & -2 \\end{array})$. Suppose f is the minimal polynomial of A. What is f(99)? Return the numeric without explanation.", "prediction": 100000000, "answer": 990000.0, "rationale": "def solve():\n    # Define the matrix A\n    A = [[-2, -1, -1, -1], [2, 1, 3, 2], [1, 1, 0, 1], [-1, -1, -2, -2]]\n    # Define the minimal polynomial of A\n    def f(x):\n        return (x**4 + 4*x**3 + 6*x**2 + 4*x + 1)\n    # Return the value of f(99)\n    return f(99)", "answer_type": "float"}
{"id": "mingyin/number-theory1.json", "question": "Find all positive integers $n<2^{250}$ for which simultaneously $n$ divides $2^n$, $n-1$ divides $2^n-1$, and $n-2$ divides $2^n - 2$. Return all positive integers as an ascending list.", "prediction": null, "answer": [4, 16, 65536], "rationale": "def solve():\n    # Let's define a function to check if a number is divisible by another number\n    def is_divisible(a, b):\n        if a % b == 0:\n            return True\n        else:\n            return False\n    # Let's define a list to store the result\n    result = []\n    # Let's loop through all numbers from 1 to 2^250\n    for n in range(1, 2**250):\n        # Let's check if n satisfies the given conditions\n        if is_divisible(2**n, n) and is_divisible(2**n - 1, n - 1) and is_divisible(2**n - 2, n - 2):\n            # If yes, add it to the result list\n            result.append(n)\n    # Return the result list in ascending order\n    return sorted(result)", "answer_type": "list of integer"}
{"id": "mingyin/orthogonal-similarity1.json", "question": "If A and B are both orthogonal square matrices, and det A = -det B. What is det(A+B)? Return the numerical value.", "prediction": null, "answer": 0.0, "rationale": "def solve():\n    # Since A and B are orthogonal matrices, det(A+B) = det(A) + det(B)\n    # Since det A = -det B, det(A+B) = det(A) - det(B) = -2*det(B)\n    return -2*det(B)", "answer_type": "float"}
{"id": "mingyin/poincare-theorem1.json", "question": "In complex analysis, define U^n={(z_1, \\cdots, z_n): |z_j|<1, j=1, \\cdots, n} and B_n={(z_1, \\cdots, z_n): \\sum_{j=1}^n |z_j|^2<1 }. Are they conformally equivalent in C^n? Here C^n is the d-dimensional complex space. Return 1 for yes and 0 for no.", "prediction": null, "answer": 0.0, "rationale": "def solve():\n    # U^n and B_n are conformally equivalent in C^n if there exists a conformal map from U^n to B_n.\n    # Let's define a conformal map from U^n to B_n\n    def conformal_map(z):\n        # Let's define the map\n        z_new = z/np.sqrt(1-np.sum(np.abs(z)**2))\n        return z_new\n    # Let's check if the map is conformal\n    # Let's define the Jacobian matrix of the map\n    J = np.zeros((n,n))\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                J[i,j] = 1/np.sqrt(1-np.sum(np.abs(z)**2))\n            else:\n                J[i,j] = 0\n    # Let's check if the Jacobian matrix is conformal\n    if np.linalg.det(J) > 0:\n        # The map is conformal\n        return 1\n    else:\n        # The map is not conformal\n        return 0", "answer_type": "float"}
{"id": "mingyin/probability-theory1.json", "question": "Consider a horizontal strip of N+2 squares in which the first and the last square are black and the remaining N squares are all white. Choose a white square uniformly at random, choose one of its two neighbors with equal probability, and color this neighboring square black if it is not already black. Repeat this process until all the remaining white squares have only black neighbors. Let $w(N)$ be the expected number of white squares remaining. What is the limit of $w(N)/N$ as $N$ goes to infinity?", "prediction": null, "answer": 0.36787944, "rationale": "def solve():\n    # Let's define a function to calculate the expected number of white squares remaining\n    def w(N):\n        # define the base case\n        if N == 0:\n            return 0\n        # use the recursive formula\n        return (1/2)*(w(N-1) + w(N-2))\n    # calculate the limit of w(N)/N as N goes to infinity\n    return w(N)/N", "answer_type": "float"}
{"id": "mingyin/probability-theory2.json", "question": "Toss a coin repeatedly until two consecutive heads appear. Assume that the probability of the coin landing on heads is 3/7. Calculate the average number of times the coin needs to be tossed before the experiment can end.", "prediction": null, "answer": 7.77778, "rationale": "def solve():\n    # Let's define a function to calculate the average number of tosses\n    def avg_tosses(p):\n        # p is the probability of the coin landing on heads\n        # Let's define the variables\n        n = 0 # number of tosses\n        c = 0 # number of consecutive heads\n        # Let's start the loop\n        while c < 2:\n            # generate a random number between 0 and 1\n            r = random.random()\n            # if the random number is less than p, it is a head\n            if r < p:\n                c += 1\n            else:\n                c = 0\n            n += 1\n        return n\n    # Let's call the function with p = 3/7\n    return avg_tosses(3/7)", "answer_type": "float"}
{"id": "mingyin/random-walk1.json", "question": "Let {X_n: n \\geq 1} be independent, identically distributed random variables taking integer values {1,-1}. Let S_0=0, S_n=\\sum_{i=1}^n X_i. Let P(X_i=1)=0.8 and P(X_i=-1)=0.2. The range R_n of S_0,S_1,...,S_n is the number of distinct values taken by the sequence. Then what is the limit of n^{-1}E[R_n] as n goes to infinity? Here E[R_n] is the expectation over the random variable R_n.", "prediction": null, "answer": 0.6, "rationale": "def solve():\n    # Let's define a function to calculate the expected value of R_n\n    def expected_value(n):\n        # Let's define the probability of X_i taking value 1 and -1\n        p1 = 0.8\n        p2 = 0.2\n        # Let's calculate the expected value of R_n\n        return (1 + (p1 - p2)**2)**n\n    # Let's calculate the limit of n^{-1}E[R_n] as n goes to infinity\n    return expected_value(n) / n", "answer_type": "float"}
{"id": "mingyin/random-walk2.json", "question": "For a simple random walk S_n with S_0=0 and P(S_n-S_{n-1}=1)=1/4, P(S_n-S_{n-1}=-1)=3/4. Let M=\\max{S_n:n\\geq 0}. What is the probability of the event {M\\geq 5}? Round the answer to the thousands decimal.", "prediction": 0.355, "answer": 0.01234567, "rationale": "def solve():\n    # Let's define a function to calculate the probability of the event {M >= 5}\n    def prob_M_geq_5():\n        # Let's define the probability of the event {M >= 5}\n        prob = 0\n        # Let's define the probability of the event {S_n = 5}\n        prob_S_5 = 1/4 * 1/4 * 1/4 * 1/4 * 1/4\n        # Let's define the probability of the event {S_n = 6}\n        prob_S_6 = 1/4 * 1/4 * 1/4 * 1/4 * 3/4\n        # Let's define the probability of the event {S_n = 7}\n        prob_S_7 = 1/4 * 1/4 * 1/4 * 3/4 * 3/4\n        # Let's define the probability of the event {S_n = 8}\n        prob_S_8 = 1/4 * 1/4 * 3/4 * 3/4 * 3/4\n        # Let's define the probability of the event {S_n = 9}\n        prob_S_9 = 1/4 * 3/4 * 3/4 * 3/4 * 3/4\n        # Let's define the probability of the event {S_n = 10}\n        prob_S_10 = 3/4 * 3/4 * 3/4 * 3/4 * 3/4\n        # Let's calculate the probability of the event {M >= 5}\n        prob = prob_S_5 + prob_S_6 + prob_S_7 + prob_S_8 + prob_S_9 + prob_S_10\n        # Let's return the probability of the event {M >= 5}\n        return round(prob, 3)\n    return prob_M_geq_5()", "answer_type": "float"}
{"id": "mingyin/random-walk3.json", "question": "A symmetric random walk on the three-dimensional cubic lattice Z^3 is transient or persistent? Return 1 for persistent and 0 for transient.", "prediction": 1, "answer": 0.0, "rationale": "def solve():\n    # A symmetric random walk on the three-dimensional cubic lattice Z^3 is persistent\n    return 1", "answer_type": "float"}
{"id": "mingyin/series1.json", "question": "For all $n>1$, define $a_n=\\sum_{k=1}^{n-1} \\frac{\\sin (\\frac{(2 k-1) \\pi}{2 n})}{\\cos ^2(\\frac{(k-1) \\pi}{2n}) \\cos ^2 (\\frac{k \\pi}{2n})}$. What is the limit of $a_n/n^3$ as $n$ goes to infinity?", "prediction": 0.2559260636700104, "answer": 0.258, "rationale": "def solve():\n    # Let's define the function\n    def a_n(n):\n        # define the sum\n        s = 0\n        for k in range(1, n):\n            s += (math.sin((2*k-1)*math.pi/(2*n)))/(math.cos((k-1)*math.pi/(2*n))**2 * math.cos(k*math.pi/(2*n))**2)\n        return s\n    # Let's define the limit\n    limit = 0\n    for n in range(2, 100):\n        limit += a_n(n)/(n**3)\n    limit /= 98\n    return limit", "answer_type": "float"}
{"id": "mingyin/series2.json", "question": "What is the value of the series $\\sum_{k=1}^{\\infty} \\frac{(-1)^{k-1}}{k} \\sum_{n=0}^{\\infty} \\frac{1}{k 2^n+1}$?", "prediction": 0.22112118217398066, "answer": 1.0, "rationale": "def solve():\n    # Let's define the function to calculate the series\n    def series(k):\n        # define the inner series\n        inner_series = 0\n        for n in range(0, k):\n            inner_series += 1 / (k * 2**n + 1)\n        # calculate the outer series\n        outer_series = (-1)**(k-1) * inner_series\n        return outer_series\n    # calculate the sum of the series\n    sum_series = 0\n    for k in range(1, 1000):\n        sum_series += series(k)\n    return sum_series", "answer_type": "float"}
{"id": "mingyin/series3.json", "question": "Let $a_0=5/2$ and $a_k=(a_{k-1})^2-2$ for $k\\geq 1$. Compute $\\prod_{k=0}^{\\infty}(1-1/a_k)$ in closed form.", "prediction": null, "answer": 0.42857, "rationale": "def solve():\n    # Let's define the recursive function\n    def recur_prod(n):\n        if n == 0:\n            # define the base case\n            return 5/2\n        else:\n            # use the recursive formula\n            return (recur_prod(n-1)**2 - 2)\n    # Let's compute the product\n    prod = 1\n    for k in range(0, float('inf')):\n        prod *= (1 - 1/recur_prod(k))\n    return prod", "answer_type": "float"}
{"id": "mingyin/series4.json", "question": "For any poitie integer $n$, let $\\langle n\\rangle$ denote the closest integer to $\\sqrt{n}$. Evaluate $\\sum_{n=1}^{\\infty} \\frac{2^{\\langle n \\rangle}+2^{-\\langle n \\rangle}}{2^n}$.", "prediction": null, "answer": 3.0, "rationale": "def solve():\n    # Let's define a function to calculate the closest integer to the square root of n\n    def closest_int(n):\n        return int(round(n**0.5))\n    # Let's define a function to calculate the sum\n    def sum_func(n):\n        # define the base case\n        if n == 1:\n            return (2**closest_int(n) + 2**(-closest_int(n)))/2**n\n        # use the recursive formula\n        else:\n            return (2**closest_int(n) + 2**(-closest_int(n)))/2**n + sum_func(n-1)\n    return sum_func(float('inf'))", "answer_type": "float"}
{"id": "mingyin/series5.json", "question": "Sum the series $\\sum_{m=1}^{\\infty} \\sum_{n=1}^{\\infty}\\frac{m^2 n}{3^m(n3^m+m3^n)}$", "prediction": 0.28125000000000033, "answer": 0.28125, "rationale": "def solve():\n    # Let's define the function to calculate the sum\n    def sum_series(m, n):\n        return m**2 * n / (3**m * (n*3**m + m*3**n))\n    # Let's define the sum of the series\n    s = 0\n    # Let's iterate over m and n\n    for m in range(1, 100):\n        for n in range(1, 100):\n            s += sum_series(m, n)\n    return s", "answer_type": "float"}
{"id": "mingyin/stokes-theorem1.json", "question": "compute the integral $\\iint_{\\Sigma} x^3 dy*dz +y^3 dz*dx+z^3 dx*dy$, where is the outward of the ellipsoid x^2+y^2+z^2/4=1. Round the answer to the thousands decimal.", "prediction": null, "answer": 30.15928896, "rationale": "def solve():\n    # Let's define the function to be integrated\n    def f(x, y, z):\n        return x**3 + y**3 + z**3\n    # Let's define the limits of integration\n    x_min, x_max = -2, 2\n    y_min, y_max = -2, 2\n    z_min, z_max = -2, 2\n    # Let's define the integrand\n    def integrand(x, y, z):\n        return f(x, y, z) * (x**2 + y**2 + z**2/4 - 1)\n    # Let's define the integral\n    from scipy.integrate import dblquad\n    integral, _ = dblquad(integrand, x_min, x_max, lambda x: y_min, lambda x: y_max, args=(z_min, z_max))\n    return round(integral, 3)", "answer_type": "float"}
{"id": "mingyin/stopping-time1.json", "question": "If T_1 and T_2 are stopping times with respect to a filtration F. Is T_1+T_2 stopping time? Is max(T_1, T_2} stopping time? Is min(T_1, T_2} stopping time? Answer 1 for yes and 0 for no. Return the answers of the three questions as a list.", "prediction": null, "answer": [1, 1, 1], "rationale": "def solve():\n    # Let's define a function to check if a given time is a stopping time\n    def is_stopping_time(t):\n        # Let's assume that the given time is a stopping time\n        is_stopping = 1\n        # Let's check if the given time is a stopping time\n        for i in range(t):\n            if not F[i] <= F[t]:\n                # If the given time is not a stopping time, set is_stopping to 0\n                is_stopping = 0\n        return is_stopping\n    # Let's define the answer list\n    answer = []\n    # Let's check if T_1 + T_2 is a stopping time\n    answer.append(is_stopping_time(T_1 + T_2))\n    # Let's check if max(T_1, T_2) is a stopping time\n    answer.append(is_stopping_time(max(T_1, T_2)))\n    # Let's check if min(T_1, T_2) is a stopping time\n    answer.append(is_stopping_time(min(T_1, T_2)))\n    return answer", "answer_type": "list of integer"}
{"id": "mingyin/strong-law-of-large-number1.json", "question": "Let N be a spatial Poisson process with constant intensity $11$ in R^d, where d\\geq2. Let S be the ball of radius $r$ centered at zero.  Denote |S| to be the volume of the ball. What is N(S)/|S| as $r\\rightarrow\\infty$?", "prediction": 11, "answer": 11.0, "rationale": "def solve():\n    # Let's define the function\n    def N_S_over_S(r):\n        # N(S) is the number of points in the ball of radius r\n        N_S = 11 * (4/3) * (r**3)\n        # |S| is the volume of the ball\n        S = (4/3) * (r**3)\n        # N(S)/|S| is the ratio of the number of points to the volume of the ball\n        return N_S/S\n    # As r approaches infinity, the ratio approaches 11\n    return 11", "answer_type": "float"}
{"id": "mingyin/strong-law-of-large-number2.json", "question": "Let X_2,X_3,... be independent random variables such that $P(X_n=n)=P(X_n=-n)=1/(2n\\log (n)), P(X_n=0)=1-1/(n*\\log(n))$. Does $n^{-1}\\sum_{i=2}^n X_i$ converges in probability? Does $n^{-1}\\sum_{i=2}^n X_i$ converges in almost surely? Return the answers of the two questions as a list.", "prediction": null, "answer": [1, 0], "rationale": "def solve():\n    # Let's define the probability distribution of X_n\n    def prob_dist(n):\n        if n == 0:\n            return 1 - 1/(n*log(n))\n        else:\n            return 1/(2*n*log(n))\n    # Let's define the sum of X_n\n    def sum_Xn(n):\n        s = 0\n        for i in range(2, n+1):\n            s += prob_dist(i)\n        return s\n    # Let's define the mean of X_n\n    def mean_Xn(n):\n        return sum_Xn(n)/n\n    # Let's define the variance of X_n\n    def var_Xn(n):\n        s = 0\n        for i in range(2, n+1):\n            s += (prob_dist(i) - mean_Xn(n))**2\n        return s/n\n    # Let's calculate the answers\n    answer1 = mean_Xn(n)\n    answer2 = var_Xn(n)\n    return [answer1, answer2]", "answer_type": "list of integer"}
{"id": "mingyin/sylvester-probability-problem1.json", "question": "If four points are picked independently at random inside the triangle ABC, what is the probability that no one of them lies inside the triangle formed by the other three?", "prediction": 0.0, "answer": 0.6667, "rationale": "def solve():\n    # Let's define the area of the triangle ABC\n    a = 1\n    b = 1\n    c = 1\n    s = (a + b + c) / 2\n    area_ABC = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    # Let's define the area of the triangle formed by the other three points\n    area_other_three = 0\n    # Let's calculate the probability\n    probability = area_other_three / area_ABC\n    return probability", "answer_type": "float"}
{"id": "mingyin/taylor-expansion1.json", "question": "Suppose that $X_1,X_2,...$ are real numbers between 0 and 1 that are chosen independently and uniformly at random. Let $S=\\sum_{i=1}^k X_i/2^i$, where $k$ is the least positive integer such that $X_k<X_{k+1}$, or $k=\\infty$ if there is no such integer. Find the expected value of S.", "prediction": null, "answer": 0.29744254, "rationale": "def solve():\n    # Let's define the expected value function\n    def expected_value(k):\n        # define the summation\n        summation = 0\n        for i in range(1, k+1):\n            summation += (1/2**i)\n        return summation\n    # define the expected value\n    expected_val = 0\n    for k in range(1, float('inf')):\n        expected_val += (1/2**k)*expected_value(k)\n    return expected_val", "answer_type": "float"}
{"id": "mingyin/value-iteration1.json", "question": "./mingyin/mdp.png shows a rectangular gridworld representation of a simple finite MDP. The cells of the grid correspond to the states of the environment. At each cell, four actions are possible: north, south, east, and west, which deterministically cause the agent to move one cell in the respective direction on the grid. Actions that would take the agent off the grid leave its location unchanged, but also result in a reward of $-1$. Other actions result in a reward of $0$, except those move the agent out of the special states A and B. From state A, all four actions yield a reward of +10 and take the agent to A'. From state B, all actions yield a reward of +5 and take the agent to B'. Suppose the discount gamma=0.9. The state-value function of a policy $\\pi$ is defined as the expected cumulative reward of $\\pi$ given the current state. What is the state-value of state A if the policy is random (choose all four directions with equal probabilities)? What is the state-value of state A under the optimal policy? Return the answer of the two questions using a list.", "prediction": [4.75, 19.0], "answer": [8.8, 24.4], "rationale": "def solve():\n    # Let's define the discount factor\n    gamma = 0.9\n    # Let's define the reward for each action\n    reward_A = 10\n    reward_B = 5\n    # Let's define the state-value of state A under random policy\n    state_value_random = (reward_A + gamma * reward_A) / 4\n    # Let's define the state-value of state A under optimal policy\n    state_value_optimal = reward_A + gamma * reward_A\n    return [state_value_random, state_value_optimal]", "answer_type": "list of float"}
{"id": "panlu/angular_frequency1.json", "question": "An ultrasonic transducer used for medical diagnosis oscillates at 6.7 Mhz.How long does each oscillation take, and what is the angular frequency? (Unit: 10^7 rad/s)", "prediction": [1.4925373134328358e-07, 420760000000000.0], "answer": 4.2, "rationale": "def solve():\n    # Define the frequency\n    frequency = 6.7 * 10**6\n    # Calculate the period\n    period = 1/frequency\n    # Calculate the angular frequency\n    angular_frequency = 2 * 3.14 * frequency\n    return period, angular_frequency * 10**7", "answer_type": "float"}
{"id": "panlu/angular_frequency2.json", "question": "A spring is mounted horizontally, with its left end fixed. A spring balance attached to the free end and pulled toward the right indicates that the stretching force is proportional to the displacement, and a force of 6.0 N causes a displacement of 0.030 m. We replace the spring balance with a 0.50-kg glider, pull it 0.020 m to the right along a frictionless air track, and release it from rest. Find the period T of the resulting oscillation. (Unit: s)", "prediction": 0.3141592653589793, "answer": 0.31, "rationale": "def solve():\n    # Let's define the spring constant\n    k = 6.0/0.030\n    # Let's define the mass of the glider\n    m = 0.50\n    # Let's define the displacement\n    x = 0.020\n    # Let's calculate the period\n    T = 2*math.pi*math.sqrt(m/k)\n    return T", "answer_type": "float"}
{"id": "panlu/angular_frequency3.json", "question": "The shock absorbers in an old car with mass 1000 kg are completely worn out. When a 980-N person climbs slowly into the car at its center of gravity, the car sinks 2.8 cm. The car (with the person aboard) hits a bump, and the car starts oscillating up and down in SHM. Model the car and person as a single body on a single spring, and find the frequency of the oscillation. (Unit: Hz)", "prediction": 0.01873611701234332, "answer": 0.9, "rationale": "def solve():\n    # Let's define the mass of the car and person\n    m = 1000 + 980 # kg\n    # Let's define the spring constant\n    k = (980 * 2.8) / 100 # N/m\n    # Let's calculate the frequency of the oscillation\n    f = (1 / (2 * math.pi)) * math.sqrt(k / m) # Hz\n    return f", "answer_type": "float"}
{"id": "panlu/black_hole1.json", "question": "Astrophysical theory suggests that a burned-out star whose mass is at least three solar masses will collapse under its own gravity to form a black hole. If it does, the radius of its event horizon is X * 10^3 m, what is X?", "prediction": 8.893333333333334, "answer": 8.9, "rationale": "def solve():\n    # Let's define the mass of the sun\n    mass_sun = 2 * 10**30 # kg\n    # Let's define the gravitational constant\n    G = 6.67 * 10**-11 # m^3 kg^-1 s^-2\n    # Let's calculate the radius of the event horizon\n    radius = (2 * G * mass_sun * 3) / (3 * 10**8)**2\n    # Let's calculate X\n    X = radius / (10**3)\n    return X", "answer_type": "float"}
{"id": "panlu/center_of_gravity1.json", "question": "A uniform plank of length L = 6.0 m and mass M = 90 kg rests on sawhorses separated by D = 1.5 m and equidistant from the center of the plank. Cousin Throckmorton wants to stand on the right-hand end of the plank. If the plank is to remain at rest, how massive can Throckmorton be? (Unit: kg)", "prediction": 6.122448979591836, "answer": 30, "rationale": "def solve():\n    # Let's define the variables\n    L = 6.0 # length of the plank in m\n    M = 90 # mass of the plank in kg\n    D = 1.5 # distance between the sawhorses in m\n    # Let's calculate the mass of Throckmorton\n    # Let's calculate the moment of inertia of the plank\n    I = (M*L**2)/12\n    # Let's calculate the force applied by Throckmorton\n    F = I/(L-D)\n    # Let's calculate the mass of Throckmorton\n    m = F/9.8 # 9.8 is the acceleration due to gravity\n    return m # return the mass of Throckmorton in kg", "answer_type": "integer"}
{"id": "panlu/center_of_gravity2.json", "question": "An auto magazine reports that a certain sports car has 53% of its weight on the front wheels and 47% on its rear wheels. (That is, the total normal forces on the front and rear wheels are 0.53w and 0.47w, respectively, where w is the car\u2019s weight.) The distance between the axles is 2.46 m. How far in front of the rear axle is the car\u2019s center of gravity?", "prediction": 1.3038, "answer": 1.3, "rationale": "def solve():\n    # Let's define the variables\n    front_weight = 0.53\n    rear_weight = 0.47\n    distance = 2.46\n    # Let's calculate the distance in front of the rear axle\n    distance_in_front = (front_weight * distance) / (front_weight + rear_weight)\n    return distance_in_front", "answer_type": "float"}
{"id": "panlu/center_of_mass1.json", "question": "James (mass 90.0 kg) and Ramon (mass 60.0 kg) are 20.0 m apart on a frozen pond. Midway between them is a mug of their favorite beverage. They pull on the ends of a light rope stretched between them. When James has moved 6.0 m toward the mug, how far has Ramon moved? (Unit: m)", "prediction": 3.6, "answer": 1.0, "rationale": "def solve():\n    # Let's define the masses of James and Ramon\n    m_james = 90.0\n    m_ramon = 60.0\n    # Let's define the distance between James and Ramon\n    d = 20.0\n    # Let's define the distance James has moved\n    d_james = 6.0\n    # Let's calculate the distance Ramon has moved\n    d_ramon = (m_james * d_james) / (m_james + m_ramon)\n    return d_ramon", "answer_type": "float"}
{"id": "panlu/circular_orbit1.json", "question": "You wish to put a 1000-kg satellite into a circular orbit 300 km above the earth's surface. How much work must be done to the satellite to put it in orbit? The earth's radius and mass are $R_E}=$ $6.38 \\times 10^6 m$ and $m_E=5.97 \\times 10^{24} kg$. (Unit: 10^10 J)", "prediction": 0.2803007621121392, "answer": 3.26, "rationale": "def solve():\n    # Define the constants\n    G = 6.67 * 10**(-11) # gravitational constant\n    m_E = 5.97 * 10**24 # mass of the Earth\n    R_E = 6.38 * 10**6 # radius of the Earth\n    m = 1000 # mass of the satellite\n    h = 300 * 10**3 # height of the orbit\n    \n    # Calculate the work\n    W = G * m_E * m * (1/R_E - 1/(R_E + h))\n    \n    # Return the result\n    return W / 10**10", "answer_type": "float"}
{"id": "panlu/density1.json", "question": "Find the mass and weight of the air at $20^{\\circ} C$ in a living room with a $4.0 m \\times 5.0 m$ floor and a ceiling 3.0 m high, and the mass and weight of an equal volume of water. (Unit: 10 ^ 5 N)", "prediction": [0.007056000000000001, 5.88], "answer": 5.9, "rationale": "def solve():\n    # First, let's define the constants\n    room_length = 4.0 # m\n    room_width = 5.0 # m\n    room_height = 3.0 # m\n    temperature = 20 # degree Celsius\n    # Now, let's calculate the volume of the room\n    room_volume = room_length * room_width * room_height # m^3\n    # Now, let's calculate the mass of air in the room\n    air_density = 1.2 # kg/m^3\n    air_mass = air_density * room_volume # kg\n    # Now, let's calculate the weight of air in the room\n    gravity = 9.8 # m/s^2\n    air_weight = air_mass * gravity # N\n    # Now, let's calculate the mass of water in the room\n    water_density = 1000 # kg/m^3\n    water_mass = water_density * room_volume # kg\n    # Now, let's calculate the weight of water in the room\n    water_weight = water_mass * gravity # N\n    # Now, let's return the result\n    return [air_weight/10**5, water_weight/10**5]", "answer_type": "float"}
{"id": "panlu/energy_conservation1.json", "question": "In Jules Verne's 1865 story with this title, three men went to the moon in a shell fired from a giant cannon sunk in the earth in Florida. Find the minimum muzzle speed that would allow a shell to escape from the earth completely (the escape speed). Neglect air resistance, the earth's rotation, and the gravitational pull of the moon. The earth's radius and mass are $R_E}=$ $6.38 \\times 10^6 m$ and $m_E=5.97 \\times 10^{24} kg$. (Unit: 10 ^ 4 m/s)", "prediction": 1.12, "answer": 1.12, "rationale": "def solve():\n    # Define the constants\n    R_E = 6.38 * 10**6\n    m_E = 5.97 * 10**24\n    # Calculate the escape speed\n    escape_speed = (2 * 6.67 * 10**(-11) * m_E / R_E)**(1/2)\n    # Convert the unit to 10^4 m/s\n    escape_speed = escape_speed / 10**4\n    return round(escape_speed, 2)", "answer_type": "float"}
{"id": "panlu/fluid_flow1.json", "question": "Incompressible oil of density 850 kg/m^3 is pumped through a cylindrical pipe at a rate of 9.5 liters per second. The second section of the pipe has a diameter of 4.0 cm. What are the flow speed in that section? (Unit: m/s)", "prediction": 8898.46384413638, "answer": 7.6, "rationale": "def solve():\n    # First, let's define the constants\n    density = 850 # kg/m^3\n    rate = 9.5 # liters/second\n    diameter = 0.04 # m\n    \n    # Now, let's calculate the area of the pipe\n    area = (diameter/2)**2 * 3.14\n    \n    # Finally, let's calculate the flow speed\n    flow_speed = (rate * 1000) / (density * area)\n    \n    return flow_speed", "answer_type": "float"}
{"id": "panlu/fluid_pressure1.json", "question": "Water stands 12.0 m deep in a storage tank whose top is open to the atmosphere. What are the gauge pressures at the bottom of the tank? (Unit: 10 ^ 5 Pa)", "prediction": 1.0144272, "answer": 1.18, "rationale": "def solve():\n    # Let's define the atmospheric pressure\n    atm_pressure = 101325 # in Pa\n    # Let's define the acceleration due to gravity\n    g = 9.81 # in m/s^2\n    # Let's calculate the gauge pressure at the bottom of the tank\n    gauge_pressure = atm_pressure + (12.0 * g)\n    return gauge_pressure / (10 ** 5) # in 10^5 Pa", "answer_type": "float"}
{"id": "panlu/force_and_power1.json", "question": "Each of the four jet engines on an Airbus A380 airliner develops athrust (a forward force on the airliner) of 322,000 N (72,000 lb).When the airplane is flying at 250 m/s, what horsepower does each engine develop? (Unit: hp)", "prediction": 109449.5401929643, "answer": 108000, "rationale": "def solve():\n    # First, let's define the constants\n    thrust = 322000 # N\n    velocity = 250 # m/s\n    # Now, let's calculate the power\n    power = thrust * velocity / 735.49875 # hp\n    return power", "answer_type": "integer"}
{"id": "panlu/friction1.json", "question": "You want to move a 500-N crate across a level floor. To start thecrate moving, you have to pull with a 230-N horizontal force.Once the crate breaks loose and starts to move, you can keep itmoving at constant velocity with only 200 N. What are the coefficients of static and kinetic friction?", "prediction": [0.46, 0.4], "answer": 0.4, "rationale": "def solve():\n    # Let's define the variables\n    m = 500 # mass of the crate in N\n    F1 = 230 # initial force in N\n    F2 = 200 # constant force in N\n    # Let's calculate the coefficients of static and kinetic friction\n    mu_s = F1/m # coefficient of static friction\n    mu_k = F2/m # coefficient of kinetic friction\n    return [mu_s, mu_k]", "answer_type": "float"}
{"id": "panlu/gravitational_force1.json", "question": "The mass of one of the small spheres of a Cavendish balance is 0.0100 kg, the mass of the nearest large sphere is 0.500 kg, and the center-to-center distance between them is 0.0500 m. Assuming the gravitational force on each sphere due to the other is $X * 10^{-10}$ N, what is X?", "prediction": 1.3348159999999996, "answer": 1.33, "rationale": "def solve():\n    # Define the constants\n    m1 = 0.0100 # kg\n    m2 = 0.500 # kg\n    r = 0.0500 # m\n    # Calculate the gravitational force\n    G = 6.67408 * 10**-11 # m^3 kg^-1 s^-2\n    F = G * m1 * m2 / r**2\n    # Calculate X\n    X = F / 10**-10\n    return X", "answer_type": "float"}
{"id": "panlu/gravitational_force2.json", "question": "A robotic lander with an earth weight of 3430 N is sent to Mars, which has radius $R_M=3.40 \\times 10^6 m$ and mass $m_M=6.42 \\times$ $10^{23} kg$. Find the acceleration there due to gravity. (Unit: $m/s^2$)", "prediction": 3.706539238754324, "answer": 3.7, "rationale": "def solve():\n    # Define the constants\n    G = 6.67408 * 10**-11 # gravitational constant\n    m_M = 6.42 * 10**23 # mass of Mars\n    R_M = 3.40 * 10**6 # radius of Mars\n    # Calculate the acceleration due to gravity\n    a = (G * m_M) / (R_M**2)\n    return a", "answer_type": "float"}
{"id": "panlu/kepler\u2019s_third_law1.json", "question": "The asteroid Pallas has an orbital period of 4.62 years and an orbital eccentricity of 0.233. Find the semi-major axis of its orbit. (Unit: 10^11 m)", "prediction": 133.4501186106953, "answer": 4.15, "rationale": "def solve():\n    # Let's define the orbital period and eccentricity\n    orbital_period = 4.62\n    eccentricity = 0.233\n    # Let's use the formula for semi-major axis\n    semi_major_axis = (orbital_period**2 * 4 * (3.14**2))/(6.67 * 10**-11 * (1 - eccentricity**2))\n    # Let's convert the unit to 10^11 m\n    semi_major_axis = semi_major_axis / (10**11)\n    return semi_major_axis", "answer_type": "float"}
{"id": "panlu/kepler\u2019s_third_law2.json", "question": "Comet Halley moves in an elongated elliptical orbit around the sun (Fig. 13.20). Its distances from the sun at perihelion and aphelion are $8.75 \\times 10^7 km$ and $5.26 \\times 10^9 km$, respectively. The orbital period is X * 10^9 s. What is X?", "prediction": 2.2034230851357952e+32, "answer": 2.38, "rationale": "def solve():\n    # Let's define the constants\n    perihelion = 8.75 * 10**7\n    aphelion = 5.26 * 10**9\n    # Let's calculate the semi-major axis\n    semi_major_axis = (perihelion + aphelion) / 2\n    # Let's calculate the semi-minor axis\n    semi_minor_axis = (aphelion - perihelion) / 2\n    # Let's calculate the eccentricity\n    eccentricity = semi_minor_axis / semi_major_axis\n    # Let's calculate the orbital period\n    orbital_period = (4 * (3.14) * (semi_major_axis**3)) / (6.67 * 10**(-11) * (1 - eccentricity**2)**(3/2))\n    # Let's calculate the answer\n    X = orbital_period / 10**9\n    return X", "answer_type": "float"}
{"id": "panlu/kite1.json", "question": "The diagonals of kite WXYZ intersect at P. If XP = 8, PZ = 8, WP = 6, and PY = 24, find ZY.", "prediction": 14.966629547095765, "answer": 25.3, "rationale": "def solve():\n    # Let's define the variables\n    XP = 8\n    PZ = 8\n    WP = 6\n    PY = 24\n    # Let's use the Pythagorean theorem to find ZY\n    ZY = (XP**2 + PY**2 - 2*XP*PY + PZ**2 - 2*WP*PZ)**0.5\n    return ZY", "answer_type": "float"}
{"id": "panlu/kite2.json", "question": "The diagonals of rhombus FGHJ intersect at K. If m\u2220FJH = 82, find m\u2220KHJ.", "prediction": 278, "answer": 49, "rationale": "def solve():\n    # We know that the sum of the angles of a rhombus is 360\u00b0\n    # So, m\u2220FJH + m\u2220KHJ = 360\u00b0\n    # We also know that m\u2220FJH = 82\u00b0\n    # So, m\u2220KHJ = 360\u00b0 - 82\u00b0 = 278\u00b0\n    return 278", "answer_type": "integer"}
{"id": "panlu/linear_expansion1.json", "question": "A surveyor uses a steel measuring tape that is exactly 50.000 m long at a temperature of 20\u00b0C. The markings on the tape are calibrated for this temperature. When it is 35\u00b0C, the surveyor uses the tape to measure a distance. The value that she reads off the tape is 35.794 m. What is the actual distance? (Unit: m)", "prediction": 59048.0, "answer": 35.8, "rationale": "def solve():\n    # Let's define the temperature difference\n    temp_diff = 35 - 20\n    # Let's define the coefficient of linear expansion\n    coeff_lin_exp = 0.000012\n    # Let's calculate the change in length\n    change_in_length = temp_diff * coeff_lin_exp * 50.000\n    # Let's calculate the actual distance\n    actual_distance = 50.000 + change_in_length\n    return actual_distance\ndef solve():\n    # Let's write the program step by step\n    # Let's define the geometric sequence\n    a1 = 2\n    r = 3\n    # Let's calculate the sum of the first 10 terms\n    sum_of_terms = a1 * (1 - (r ** 10)) / (1 - r)\n    return sum_of_terms", "answer_type": "float"}
{"id": "panlu/liquid_compressibility1.json", "question": "A hydraulic press contains $0.25 m^3$ (250 L) of oil. Find the decrease in the volume of the oil when it is subjected to a pressure increase  $\\Delta p=1.6 \\times 10^7 Pa$ (about 160 atm or 2300 psi). The bulk modulus of the oil is $B=5.0 \\times 10^9 Pa$ (about $5.0 \\times 10^4 atm$) and its compressibility is $k=1 / B=20 \\times 10^{-6} atm^{-1}$. (Unit: 10^{-4} m^3)", "prediction": -8e-08, "answer": -0.8, "rationale": "def solve():\n    # Define the variables\n    B = 5.0 * 10**9\n    k = 1 / B\n    delta_p = 1.6 * 10**7\n    V = 0.25\n    # Calculate the decrease in volume\n    delta_V = -V * k * delta_p\n    # Return the result\n    return delta_V * 10**(-4)", "answer_type": "float"}
{"id": "panlu/molar_heat_capacity1.json", "question": "A camper pours 0.300 kg of coffee, initially in a pot at 70.0\u00b0C into a 0.120-kg aluminum cup initially at 20.0\u00b0C. What is the equilibrium temperature? Assume that coffee has the same specific heat as water and that no heat is exchanged with the surroundings. (Unit: \u00b0C)", "prediction": 41.42857142857143, "answer": 66.0, "rationale": "def solve():\n    # Let's define the variables\n    m_coffee = 0.300 # kg\n    m_aluminum = 0.120 # kg\n    c_coffee = 4.186 # J/g\u00b0C\n    T_coffee = 70.0 # \u00b0C\n    T_aluminum = 20.0 # \u00b0C\n    # Let's calculate the total heat\n    Q = m_coffee * c_coffee * (T_coffee - T_aluminum)\n    # Let's calculate the equilibrium temperature\n    T_eq = (Q + m_aluminum * c_coffee * T_aluminum) / (m_coffee * c_coffee + m_aluminum * c_coffee)\n    return T_eq", "answer_type": "float"}
{"id": "panlu/molar_heat_capacity2.json", "question": "A glass contains 0.25 kg of Omni-Cola (mostly water) initially at 25\u00b0C. How much ice, initially at -20\u00b0C must you add to obtain a final temperature of 0\u00b0C with all the ice melted? Neglect the heat capacity of the glass. (Unit: g)", "prediction": 312.5, "answer": 70, "rationale": "def solve():\n    # Let's define the variables\n    m_water = 0.25 # kg\n    T_initial = 25 # \u00b0C\n    T_final = 0 # \u00b0C\n    T_ice = -20 # \u00b0C\n    # Let's calculate the amount of ice needed\n    m_ice = m_water * (T_final - T_initial) / (T_ice - T_final)\n    # Let's convert the result to grams\n    m_ice_g = m_ice * 1000 # g\n    return m_ice_g", "answer_type": "integer"}
{"id": "panlu/molecule_vibration1.json", "question": "Two argon atoms form the molecule $Ar_2$ as a result of a van der Waals interaction with $U_0 = 1.68 \\times 10 ^ {-21}$ J and $R_0 = 3.82 \\times 10 ^ {-10}$ m. Find the frequency of small oscillations of one Ar atom about its equilibrium position. (Unit: 10^11 Hz)", "prediction": 3.101661897749442e-13, "answer": 5.63, "rationale": "def solve():\n    # First, let's define the constants\n    U_0 = 1.68 * 10 ** (-21)\n    R_0 = 3.82 * 10 ** (-10)\n    # Now, let's calculate the reduced mass\n    m_red = 2 * 39.948 / (2 + 39.948)\n    # Now, let's calculate the force constant\n    k = U_0 / R_0 ** 2\n    # Finally, let's calculate the frequency\n    f = (k / (2 * np.pi * m_red)) ** 0.5 / 10 ** 11\n    return f", "answer_type": "float"}
{"id": "panlu/physical_pendulum1.json", "question": "All walking animals, including humans, have a natural walking pace\u2014a number of steps per minute that is more comfortable than a faster or slower pace. Suppose that this pace corresponds to the oscillation of the leg as a physical pendulum.  Fossil evidence shows that T. rex, a two-legged dinosaur that lived about 65 million years ago, had a leg length L = 3.1 m and a stride length S = 4.0 m (the distance from one footprint to the next print of the same foot).  Estimate the walking speed of T. rex. (Unit: m/s)", "prediction": 1.2903225806451613, "answer": 1.4, "rationale": "def solve():\n    # Let's define the variables\n    L = 3.1 # leg length\n    S = 4.0 # stride length\n    # Let's calculate the walking speed\n    speed = S/L\n    return speed", "answer_type": "float"}
{"id": "panlu/pojectile_motion1.json", "question": "Sally is driving along a straight highway in her 1965 Mustang. At when she is moving at in the positive x-direction, she passes a signpost at Her x-acceleration as a function of time is\na_x = 2.0 m/s^2 - (0.10 m / s^3) t\n At X meter's, the car reaches maximum x-velocity? What is X?", "prediction": 20.0, "answer": 517, "rationale": "def solve():\n    # Let's define the equation\n    def equation(x):\n        return 2.0 - (0.10 * x)\n    # Let's define the derivative of the equation\n    def derivative(x):\n        return -0.10\n    # Let's use Newton's method to find the root of the equation\n    x = 0\n    while True:\n        x_new = x - equation(x) / derivative(x)\n        if abs(x_new - x) < 0.00001:\n            break\n        x = x_new\n    return x", "answer_type": "integer"}
{"id": "panlu/pojectile_motion2.json", "question": "You throw a ball from your window $8.0 \\mathrm{~m}$ above the ground. When the ball leaves your hand, it is moving at $10.0 \\mathrm{~m} / \\athrm{s}$ at an angle of $20^{\\circ}$ below the horizontal. How far horizontally from your window will the ball hit the ground? Ignore air resistance. (Unit: m)", "prediction": 6.552371148690512, "answer": 9.2, "rationale": "def solve():\n    # Let's define the variables\n    initial_velocity = 10.0 # m/s\n    angle = 20 # degrees\n    height = 8.0 # m\n    # Let's calculate the time of flight\n    time_of_flight = (2 * initial_velocity * math.sin(math.radians(angle))) / 9.81\n    # Let's calculate the horizontal distance\n    horizontal_distance = initial_velocity * time_of_flight * math.cos(math.radians(angle))\n    return horizontal_distance", "answer_type": "float"}
{"id": "panlu/rhombus1.json", "question": "The diagonals of rhombus QRST intersect at P. If m\u2220QTS = 76, find m\u2220TSP.", "prediction": 142.0, "answer": 52, "rationale": "def solve():\n    # Let's define the angles of the rhombus\n    angle_QTS = 76\n    angle_TSP = 180 - (angle_QTS/2)\n    return angle_TSP", "answer_type": "integer"}
{"id": "panlu/rigid-body1.json", "question": "Sir Lancelot, who weighs 800 N, is assaulting a castle by climbing a uniform ladder that is 5.0 m long and weighs 180 N. The bottom of the ladder rests on a ledge and leans across the moat in equilibrium against a frictionless, vertical castle wall. The ladder makes an angle of with the horizontal. Lancelot pauses onethird of the way up the ladder.  Find the magnitude of the contact force on the base of the ladder. (Unit: N)", "prediction": null, "answer": 1020, "rationale": "def solve():\n    # Let's define the variables\n    l = 5.0 # length of the ladder in m\n    w = 180 # weight of the ladder in N\n    theta = # angle of the ladder with the horizontal\n    F = 800 # weight of Sir Lancelot in N\n    x = l/3 # distance of Sir Lancelot from the base of the ladder in m\n    \n    # Let's calculate the magnitude of the contact force\n    F_contact = (F*x + w*l*math.cos(theta))/(l*math.sin(theta))\n    return F_contact", "answer_type": "integer"}
{"id": "panlu/rigid-body2.json", "question": "An athlete whirls a discus in a circle of radius 80.0 cm. At a certain instant, the athlete is rotating at 10.0 rad / s and the angular speed is increasing at 50.0 rad / s^2. At this instant, find the magnitude (Unit: m / s^2) of the acceleration. Return the numeric value.", "prediction": 4100.0, "answer": 89.4, "rationale": "def solve():\n    # Define the radius\n    r = 80.0\n    # Define the angular speed\n    w = 10.0\n    # Define the angular acceleration\n    a = 50.0\n    # Calculate the magnitude of the acceleration\n    a_mag = r * a + w**2\n    return a_mag", "answer_type": "float"}
{"id": "panlu/rigid-body3.json", "question": "A door 1.00 m wide, of mass 15 kg, can rotate freely about a vertical axis through its hinges. A bullet with a mass of 10 g and a speed of 400 m/s strikes the center of the door, in a direction perpendicular to the plane of the door, and embeds itself there. Find the door's angular speed. (Unit: rad/s)", "prediction": 0.5333333333333333, "answer": 0.4, "rationale": "def solve():\n    # First, let's define the constants\n    m_door = 15 # mass of the door in kg\n    m_bullet = 0.01 # mass of the bullet in kg\n    v_bullet = 400 # speed of the bullet in m/s\n    r = 0.5 # radius of the door in m\n\n    # Now, let's calculate the angular momentum of the system\n    L = m_bullet * v_bullet * r\n\n    # Finally, let's calculate the angular speed of the door\n    omega = L / (m_door * r**2)\n\n    return omega # answer in rad/s", "answer_type": "float"}
{"id": "panlu/shock_wave1.json", "question": "An airplane is flying at Mach 1.75 at an altitude of 8000 m, where the speed of sound is How long after the plane passes directly overhead will you hear the sonic boom? (Unit: m/s)", "prediction": 13.445378151260504, "answer": 560, "rationale": "def solve():\n    # First, let's define the speed of sound\n    speed_of_sound = 340 # m/s\n    # Then, let's calculate the speed of the plane\n    speed_of_plane = 1.75 * speed_of_sound # m/s\n    # Finally, let's calculate the time it takes for the sonic boom to reach the ground\n    time = 8000 / speed_of_plane # s\n    return time", "answer_type": "integer"}
{"id": "panlu/similarity1.json", "question": "If polygon ACDF is similar to polygon VWYZ, AF = 12, CD = 9, YZ = 10, YW = 6, and ZV = 3y-1, find the length of FD.", "prediction": null, "answer": 15, "rationale": "def solve():\n    # Let's define the ratio of the two polygons\n    ratio = (12/9) * (10/6) * (3*y-1/10)\n    # Let's calculate the length of FD\n    FD = 9 * ratio\n    return FD", "answer_type": "integer"}
{"id": "panlu/similarity2.json", "question": "If polygon ACDF is similar to polygon VWYZ, AF = 12, CD = 9, YZ = 10, YW = 6, and ZV = 3y-1, find y.", "prediction": null, "answer": 3, "rationale": "def solve():\n    # Let's define the ratio of the corresponding sides of the two polygons\n    ratio = (12/9) * (10/6) * (3y-1)\n    # Let's solve for y\n    y = (ratio/3) + 1\n    return y", "answer_type": "integer"}
{"id": "panlu/similarity3.json", "question": "If polygon ABCDE ~ polygon PQRST, AB = BC = 8, AE = CD = 4, ED = 6, QR = QP, and RS = PT = 3, find the perimeter of polygon ABCDE.", "prediction": null, "answer": 30, "rationale": "def solve():\n    # Let's define the perimeter of polygon ABCDE\n    perimeter = AB + BC + AE + CD + ED\n    # Let's calculate the length of AB, BC, AE, CD, ED\n    AB = 8\n    BC = 8\n    AE = 4\n    CD = 4\n    ED = 6\n    # Let's calculate the length of QR, QP, RS, PT\n    QR = QP = 8\n    RS = PT = 3\n    # Let's add the lengths of QR, QP, RS, PT to the perimeter\n    perimeter += QR + QP + RS + PT\n    return perimeter", "answer_type": "integer"}
{"id": "panlu/similarity4.json", "question": "If polygon ABCDE ~ polygon PQRST, AB = BC = 8, AE = CD = 4, ED = 6, QR = QP, and RS = PT = 3, find the perimeter of polygon PQRST.", "prediction": null, "answer": 22.5, "rationale": "def solve():\n    # Let's define the perimeter of polygon PQRST\n    perimeter = QP + RS + PT + QR + RS\n    # Let's use the given information to calculate the perimeter\n    perimeter = 8 + 8 + 4 + 6 + 3 + 3\n    return perimeter", "answer_type": "float"}
{"id": "panlu/similarity5.json", "question": "In triangle ACD, B is located on the side AC, and E is located on the side AD. If AB = 3, AC = 5, CD = 3.5, ED = 3, and EB \u2225 DC, what is the length of AD?", "prediction": 4.69041575982343, "answer": 7.5, "rationale": "def solve():\n    # Let's define the function to calculate the length of AD\n    def calc_AD(AB, AC, CD, ED):\n        # use the Pythagorean theorem to calculate the length of AD\n        return (AB**2 + AC**2 - 2*AB*CD + 2*AB*ED - ED**2)**0.5\n    return calc_AD(3, 5, 3.5, 3)", "answer_type": "float"}
{"id": "panlu/sound_wave_amplitude1.json", "question": "In a sinusoidal sound wave of moderate loudness, the maximum pressure variations are about $3.0 \\times 10 ^ {-2}$ Pa above and below atmospheric pressure. Find the corresponding maximum displacement if the frequency is 1000 Hz. In air at normal atmospheric pressure and density, the speed of sound is 344 m/s and the bulk modulus is $1.42 \\times 10^5$ Pa. (Unit: $10 ^ {-8}$)", "prediction": 3.633802816901409, "answer": 1.2, "rationale": "def solve():\n    # Let's define the given parameters\n    max_pressure_variation = 3.0 * 10 ** (-2)\n    frequency = 1000\n    speed_of_sound = 344\n    bulk_modulus = 1.42 * 10 ** 5\n    # Let's calculate the maximum displacement\n    max_displacement = (max_pressure_variation * speed_of_sound) / (2 * bulk_modulus * frequency)\n    return max_displacement * 10 ** 8", "answer_type": "float"}
{"id": "panlu/standing_sound_wave1.json", "question": "On a day when the speed of sound is the fundamental frequency of a particular stopped organ pipe is 220 Hz. The second overtone of this pipe has the same wavelength as the third harmonic of an open pipe. How long is the open pipe? (Unit: m)", "prediction": 0.16666666666666666, "answer": 0.47, "rationale": "def solve():\n    # Let's define the speed of sound\n    speed_of_sound = 220 # Hz\n    # Let's define the fundamental frequency of the stopped organ pipe\n    fundamental_frequency = 220 # Hz\n    # Let's define the second overtone of the stopped organ pipe\n    second_overtone = 2 * fundamental_frequency # Hz\n    # Let's define the third harmonic of the open pipe\n    third_harmonic = 3 * fundamental_frequency # Hz\n    # Let's calculate the wavelength of the second overtone of the stopped organ pipe\n    wavelength_stopped_pipe = speed_of_sound / second_overtone # m\n    # Let's calculate the length of the open pipe\n    length_open_pipe = wavelength_stopped_pipe / 3 # m\n    return length_open_pipe # m", "answer_type": "float"}
{"id": "panlu/thermal_stress1.json", "question": "An aluminum cylinder 10 cm long, with a cross-sectional area of 20 $cm^2$ is used as a spacer between two steel walls. At 17.2\u00b0C it just slips between the walls. Calculate the stress in the cylinder and the total force it exerts on each wall when it warms to 22.3\u00b0C assuming that the walls are perfectly rigid and a constant distance apart. (Unit: 10^4 N)", "prediction": 0.0011730000000000004, "answer": -1.7, "rationale": "def solve():\n    # Define the variables\n    l = 10 # length of the cylinder in cm\n    A = 20 # cross-sectional area of the cylinder in cm^2\n    T1 = 17.2 # initial temperature in \u00b0C\n    T2 = 22.3 # final temperature in \u00b0C\n    alpha = 2.3 # coefficient of linear expansion for aluminum in 10^-5/\u00b0C\n    # Calculate the change in length\n    delta_l = alpha * (T2 - T1) * l * 10**-5\n    # Calculate the stress in the cylinder\n    stress = delta_l * 10**4 / A\n    # Calculate the total force\n    force = stress * A\n    return force / 10**4", "answer_type": "float"}
{"id": "panlu/trapezoid1.json", "question": "RS is the midsegment of trapezoid MNOP. If MN = 10x+3, RS=9x-1, and PO = 4x+7, what is the length of RS?", "prediction": 25, "answer": 26, "rationale": "def solve():\n    # Let's define the variables\n    MN = 10*x + 3\n    RS = 9*x - 1\n    PO = 4*x + 7\n    # Let's calculate the length of RS\n    RS_length = RS - MN\n    return RS_length\ndef solve():\n    # Let's write the program step by step\n    # Let's define the variables\n    sum = 0\n    # Let's use a for loop to calculate the sum\n    for i in range(1,11,2):\n        sum += i\n    return sum", "answer_type": "integer"}
{"id": "panlu/triangle1.json", "question": "In triangle ABC, AB = 9x-1, CB = 5x-0.5, AC = 4x+1, and AC = CB. Find the measure of AB.", "prediction": null, "answer": 12.5, "rationale": "def solve():\n    # Let's define the given values\n    AB = 9*x - 1\n    CB = 5*x - 0.5\n    AC = 4*x + 1\n    # Since AC = CB, we can equate the two equations\n    4*x + 1 = 5*x - 0.5\n    # Solving for x\n    x = 0.5\n    # Substituting x in the equation for AB\n    AB = 9*0.5 - 1\n    # Calculating the measure of AB\n    AB = 4.5\n    return AB", "answer_type": "float"}
{"id": "panlu/triangle2.json", "question": "In triangle RST, X is located on the side RS, Y is located on the side RT, Z is located on the side ST, and XY and XZ are midsegments of \u25b3RST. If the length of side XY is 7, the length of side RT is 13, and the measure of angle YXZ is 124\u00b0, what is the length of side XZ?", "prediction": 17.882200883327418, "answer": 6.5, "rationale": "def solve():\n    # Let's define the function to calculate the length of side XZ\n    def calculate_length_XZ(XY, RT, angle):\n        # use the law of cosines\n        XZ = (RT**2 + XY**2 - 2*RT*XY*math.cos(math.radians(angle)))**0.5\n        return XZ\n    return calculate_length_XZ(7, 13, 124)", "answer_type": "float"}
{"id": "panlu/triangle3.json", "question": "In triangle RST, X is located on the side RS, Y is located on the side RT, Z is located on the side ST, and XY and XZ are midsegments of \u25b3RST. If the length of side XY is 7, the length of side RT is 13, and the measure of angle YXZ is 124\u00b0, what is the length of side ST?", "prediction": 17.882200883327418, "answer": 14, "rationale": "def solve():\n    # Let's define the variables\n    xy = 7\n    rt = 13\n    angle = 124\n    # Let's use the law of cosines to calculate the length of side ST\n    st = (xy**2 + rt**2 - 2*xy*rt*math.cos(math.radians(angle)))**0.5\n    return st", "answer_type": "integer"}
{"id": "panlu/triangle4.json", "question": "In triangle RST, X is located on the side RS, Y is located on the side RT, Z is located on the side ST, and XY and XZ are midsegments of \u25b3RST. If the length of side XY is 7, the length of side RT is 13, and the measure of angle YXZ is 124\u00b0, what is the measure of ange RYX?", "prediction": null, "answer": 124, "rationale": "def solve():\n    # Let's define the given values\n    xy = 7\n    rt = 13\n    yxz = 124\n    \n    # Let's use the Law of Cosines to calculate the measure of angle RYX\n    ryx = math.acos((xy**2 + rt**2 - (2*xy*rt*math.cos(yxz))) / (2*xy*rt))\n    \n    # Let's convert the angle from radians to degrees\n    ryx = math.degrees(ryx)\n    \n    return ryx", "answer_type": "integer"}
{"id": "panlu/uniform_circular_motion1.json", "question": "An Aston Martin V8 Vantage sports car has a lateral acceleration of $0.96g = (0.96)(9.8 m / s^2) = 9.4 m / s^2$. This is the maximum centripetal acceleration the car can sustain without skidding out of a curved path. If the car is traveling at a constant 40m/s on level ground, what is the radius R of the tightest unbanked curve it can negotiate? (Unit: m))", "prediction": 170.2127659574468, "answer": 170, "rationale": "def solve():\n    # Define the given variables\n    v = 40 # velocity in m/s\n    a = 9.4 # acceleration in m/s^2\n    # Use the formula for centripetal acceleration\n    R = (v**2)/a\n    return R", "answer_type": "integer"}
{"id": "panlu/uniform_circular_motion2.json", "question": "Passengers on a carnival ride move at constant speed in a horizontal circle of radius 5.0 m, making a complete circle in 4.0 s. What is their acceleration? (Unit: m/s^2))", "prediction": 12.3245, "answer": 12, "rationale": "def solve():\n    # Let's define the radius\n    r = 5.0\n    # Let's define the time\n    t = 4.0\n    # Let's calculate the angular velocity\n    w = 2 * 3.14 / t\n    # Let's calculate the acceleration\n    a = (w**2) * r\n    return a", "answer_type": "integer"}
{"id": "panlu/volume_thermal_expansion1.json", "question": "A $200-cm^3$ glass flask is filled to the brim with mercury at 20\u00b0C How much mercury overflows when the temperature of the system is raised to 100\u00b0C. The coefficient of linear expansion of the glass is $0.40 \\times 10^{-5} K^{-1}. (Unit: cm^3)", "prediction": 0.06399999999999295, "answer": 2.7, "rationale": "def solve():\n    # Define the variables\n    volume = 200 # cm^3\n    coefficient_of_linear_expansion = 0.40 * 10**-5 # K^-1\n    delta_temperature = 100 - 20 # K\n    # Calculate the change in volume\n    delta_volume = volume * coefficient_of_linear_expansion * delta_temperature\n    # Calculate the overflow\n    overflow = volume + delta_volume - volume\n    return overflow # cm^3", "answer_type": "float"}
{"id": "panlu/wave_length1.json", "question": "A ship uses a sonar system to locate underwater objects. Find the wavelength of a 262-Hz wave in water. (Unit: m)", "prediction": 5.656488549618321, "answer": 5.65, "rationale": "def solve():\n    # Let's define the speed of sound in water\n    speed_of_sound = 1482 # m/s\n    # Let's calculate the wavelength\n    wavelength = speed_of_sound / 262 # m\n    return wavelength", "answer_type": "float"}
{"id": "panlu/wave_speed1.json", "question": "One end of a 2.00-kg rope is tied to a support at the top of a mine shaft 80.0 m deep. The rope is stretched taut by a 20.0-kg box of rocks attached at the bottom. If a point on the rope is in transverse SHM with f = 2.00 Hz, how many cycles of the wave are there in the rope\u2019s length?", "prediction": 1600.0, "answer": 1.81, "rationale": "def solve():\n    # Let's define the constants\n    m = 2.00 # kg\n    L = 80.0 # m\n    F = 2.00 # Hz\n    # Let's calculate the wave speed\n    v = (m * F) / L\n    # Let's calculate the number of cycles\n    n = L / v\n    return n", "answer_type": "float"}
{"id": "panlu/work_energy1.json", "question": "A glider with mass m = 0.200 kg sits on a frictionless horizontalair track, connected to a spring with force constant k = 5.00 N/m.You pull on the glider, stretching the spring 0.100 m, and release itfrom rest. The glider moves back toward its equilibrium position (x = 0).What is its x-velocity when  x = 0.080 m? (Unit: m/s))", "prediction": 55, "answer": -0.3, "rationale": "def solve():\n    # Let's define the given parameters\n    m = 0.200 # kg\n    k = 5.00 # N/m\n    x = 0.080 # m\n    # Let's calculate the velocity\n    v = (1/m)*(k*x)**(1/2)\n    return v\ndef solve():\n    # Let's write the program step by step\n    # Let's define a function to calculate the sum\n    def sum_of_n(n):\n        # define the base case\n        if n == 0:\n            return 0\n        else:\n            # use the recursive formula\n            return n + sum_of_n(n-1)\n    return sum_of_n(10)", "answer_type": "float"}
{"id": "panlu/young\u2019s_modulus1.json", "question": "A steel rod 2.0 m long has a cross-sectional area of $0.30 cm ^ 2$. It is hung by one end from a support, and a 550-kg milling machine is hung from its other end. Determine the stress on the rod and the resulting strain and elongation. (Unit: mm)", "prediction": [17985.0, 8.564285714285714e-06, 0.017128571428571427], "answer": 1.8, "rationale": "def solve():\n    # Let's define the variables\n    length = 2.0 # m\n    area = 0.30 # cm^2\n    weight = 550 # kg\n    # Let's calculate the stress\n    stress = weight * 9.81 / area # N/cm^2\n    # Let's calculate the strain\n    strain = stress / 2.1e+9 # N/cm^2\n    # Let's calculate the elongation\n    elongation = strain * length * 10**3 # mm\n    return stress, strain, elongation", "answer_type": "float"}
{"id": "tonyxia/atom1.json", "question": "Find the fraction of 7.7-MeV alpha particles that is deflected at an angle of 90\u00b0 or more from a gold foil of 10^-6 m thickness.", "prediction": 0.042777777777777776, "answer": 4e-05, "rationale": "def solve():\n    # Let's define the fraction of alpha particles deflected at an angle of 90\u00b0 or more\n    fraction = 0.5\n    # Let's calculate the energy of the alpha particles\n    energy = 7.7 * 10**6 # in eV\n    # Let's calculate the thickness of the gold foil\n    thickness = 10**-6 # in m\n    # Let's calculate the deflection angle\n    angle = 90 # in degrees\n    # Let's calculate the fraction of alpha particles deflected at an angle of 90\u00b0 or more\n    fraction_deflected = fraction * (energy * thickness) / angle\n    return fraction_deflected", "answer_type": "float"}
{"id": "tonyxia/atom2.json", "question": "What is the minimum kinetic energy in MeV of a proton in a medium-sized nucleus having a diameter of 8.0 x 10^-15 m?", "prediction": 6.138793152321086e-32, "answer": 0.08, "rationale": "def solve():\n    # Let's define the constants\n    m_p = 1.6726219 * 10**-27 # mass of proton in kg\n    e = 1.602176634 * 10**-19 # charge of electron in Coulombs\n    d = 8.0 * 10**-15 # diameter of nucleus in m\n    # Let's calculate the minimum kinetic energy\n    E_k = (e**2 * d) / (2 * m_p)\n    # Let's convert the energy from Joules to MeV\n    E_k_MeV = E_k / 10**6\n    return E_k_MeV", "answer_type": "float"}
{"id": "tonyxia/atom3.json", "question": "determine the ratio of the radius of a uranium-238 nucleus to the radius of a helium-4 nucleus.", "prediction": 4.6, "answer": 3.9, "rationale": "def solve():\n    # Let's define the radius of uranium-238 nucleus\n    uranium_radius = 6.67e-15 # meters\n    # Let's define the radius of helium-4 nucleus\n    helium_radius = 1.45e-15 # meters\n    # Let's calculate the ratio\n    ratio = uranium_radius / helium_radius\n    return ratio", "answer_type": "float"}
{"id": "tonyxia/atom4.json", "question": "Given that the spacing between vibrational energy levels of the HCl molecule is 0.36 eV, calculate the effective force constant in N/m.", "prediction": 55, "answer": 490.0, "rationale": "def solve():\n    # We know that the spacing between vibrational energy levels is given by\n    # E = h*nu = (1/2)*k*x^2\n    # where h is Planck's constant, nu is the frequency, k is the force constant and x is the displacement\n    # We can rearrange the equation to get\n    # k = (2*E)/x^2\n    # We are given E = 0.36 eV and x = 0.1 nm\n    # We can convert eV to Joules by multiplying by 1.6*10^-19\n    E = 0.36 * 1.6 * 10**-19\n    x = 0.1 * 10**-9\n    k = (2*E)/(x**2)\n    # We can convert N/m to Joules/m^2 by multiplying by 1\n    return k * 1\ndef solve():\n    # Let's write the program step by step\n    # We can use a loop to calculate the sum of the first 10 natural numbers\n    sum = 0\n    for i in range(1, 11):\n        sum += i\n    return sum", "answer_type": "float"}
{"id": "tonyxia/divisibility1.json", "question": "The two-digit integers from 19 to 92 are written consecutively to form the large integer N = 192021 \u00b7 \u00b7 \u00b7 909192. Suppose that 3^k is the highest power of 3 that is a factor of N. What is k?", "prediction": 3, "answer": 1, "rationale": "def solve():\n    # Let's define a function to calculate the highest power of 3 that is a factor of N\n    def highest_power_of_3(n):\n        # Initialize the power\n        power = 0\n        # Iterate until n is divisible by 3\n        while n % 3 == 0:\n            # Increment the power\n            power += 1\n            # Divide n by 3\n            n /= 3\n        # Return the power\n        return power\n    # Calculate the number N\n    N = int(''.join([str(i) for i in range(19, 93)]))\n    # Calculate the highest power of 3 that is a factor of N\n    k = highest_power_of_3(N)\n    return k", "answer_type": "integer"}
{"id": "tonyxia/divisibility2.json", "question": "Find the largest integer for which (x+11)/(x+7) is an integer.", "prediction": null, "answer": -3, "rationale": "def solve():\n    # Let's define a function to check if (x+11)/(x+7) is an integer\n    def is_integer(x):\n        if (x+11) % (x+7) == 0:\n            return True\n        else:\n            return False\n    # Let's define a variable to store the largest integer\n    largest_integer = 0\n    # Let's loop through all the integers from 0 to infinity\n    for x in range(0, float('inf')):\n        # Check if (x+11)/(x+7) is an integer\n        if is_integer(x):\n            # Update the largest integer\n            largest_integer = x\n    return largest_integer", "answer_type": "integer"}
{"id": "tonyxia/divisibility3.json", "question": "Find integer $n \\ge 1$, such that $n \\cdot 2^{n+1}+1$ is a perfect square.", "prediction": 3, "answer": 3, "rationale": "def solve():\n    # Let's define a function to check if a number is a perfect square\n    def is_perfect_square(n):\n        # use the square root of the number to check\n        sqrt = int(n**0.5)\n        return sqrt**2 == n\n    # Let's define a function to check if the given equation is a perfect square\n    def check_equation(n):\n        return is_perfect_square(n*2**(n+1)+1)\n    # Let's iterate through all the numbers starting from 1\n    for n in range(1, 100):\n        if check_equation(n):\n            return n\n    # If no such number is found, return -1\n    return -1", "answer_type": "integer"}
{"id": "tonyxia/divisibility4.json", "question": "Find the number of integers n, 1 \u2264 n \u2264 25 such that n^2 + 3n + 2 is divisible by 6.", "prediction": 17, "answer": 13, "rationale": "def solve():\n    # Let's define a function to check if a number is divisible by 6\n    def is_divisible_by_6(n):\n        if n % 6 == 0:\n            return True\n        else:\n            return False\n    # Let's define a counter to count the number of integers\n    count = 0\n    # Let's loop through all the numbers from 1 to 25\n    for n in range(1, 26):\n        # Let's calculate the value of n^2 + 3n + 2\n        val = n**2 + 3*n + 2\n        # Let's check if the value is divisible by 6\n        if is_divisible_by_6(val):\n            # If yes, increment the counter\n            count += 1\n    return count", "answer_type": "integer"}
{"id": "tonyxia/divisibility5.json", "question": "For how many positive integral values of x \u2264 100 is 3^x \u2212 x^2 divisible by 5?", "prediction": 20, "answer": 20, "rationale": "def solve():\n    # Let's define a counter\n    count = 0\n    # Let's loop through all the values of x\n    for x in range(1, 101):\n        # Let's calculate 3^x - x^2\n        result = 3**x - x**2\n        # Let's check if the result is divisible by 5\n        if result % 5 == 0:\n            # If yes, let's increment the counter\n            count += 1\n    return count", "answer_type": "integer"}
{"id": "tonyxia/divisibility6.json", "question": "How many pairs of (a, b) can we substitute for a and b in 30a0b03 so that the resulting integer is divisible by 13?", "prediction": 8, "answer": 3, "rationale": "def solve():\n    # Let's define a function to check if the number is divisible by 13\n    def is_divisible_by_13(num):\n        if num % 13 == 0:\n            return True\n        else:\n            return False\n    # Let's define a counter to count the number of pairs\n    count = 0\n    # Let's loop through all possible values of a and b\n    for a in range(10):\n        for b in range(10):\n            # Let's generate the number\n            num = 30*a + 10*b + 3\n            # Let's check if the number is divisible by 13\n            if is_divisible_by_13(num):\n                # If yes, let's increment the counter\n                count += 1\n    return count", "answer_type": "integer"}
{"id": "tonyxia/euler-graph1.json", "question": "Suppose a convex 3d-object has k pentagonal faces and m hexagonal faces. All faces are regular. What is k?", "prediction": null, "answer": 12, "rationale": "def solve():\n    # Let's define a function to calculate the number of faces\n    def calculate_faces(k, m):\n        # use the formula to calculate the number of faces\n        return (2*k + m)\n    # Let's define the given information\n    m = 6\n    # Let's calculate the number of faces\n    num_faces = calculate_faces(k, m)\n    # Let's solve the equation for k\n    k = (num_faces - m) / 2\n    return k", "answer_type": "integer"}
{"id": "tonyxia/euler-graph2.json", "question": "Suppose a convex 3d-object has 15 vertices and 39 edges. How many faces does it have?", "prediction": null, "answer": 26, "rationale": "def solve():\n    # We can use Euler's formula to solve this problem\n    # Euler's formula states that for a convex 3d-object, the number of faces (F) is related to the number of vertices (V) and edges (E) by the formula:\n    # F + V - E = 2\n    # Therefore, we can solve for F:\n    F = 2 + E - V\n    return F = 2 + 39 - 15", "answer_type": "integer"}
{"id": "tonyxia/euler-graph3.json", "question": "Suppose a convex polygon has 26 faces and 39 edges. How many vertices does it have?", "prediction": 55.0, "answer": 15, "rationale": "def solve():\n    # We can use the formula:\n    # Number of edges = Number of faces + 2\n    # So, Number of vertices = Number of edges - 2\n    return 39 - 2\ndef solve():\n    # Let's write the program step by step\n    # We can use the formula:\n    # Sum of first n natural numbers = n(n+1)/2\n    return 10*(10+1)/2", "answer_type": "integer"}
{"id": "tonyxia/maxplanar1.json", "question": "What's the maximum number of edges in a simple planar graph with 30 vertices?", "prediction": 84, "answer": 84, "rationale": "def solve():\n    # The maximum number of edges in a simple planar graph with n vertices is 3n-6\n    return 3*30-6", "answer_type": "integer"}
{"id": "tonyxia/maxplanar2.json", "question": "What's the maximum number of edges in a simple triangle free planar graph with 30 vertices?", "prediction": 84, "answer": 56, "rationale": "def solve():\n    # The maximum number of edges in a simple triangle free planar graph with 30 vertices is\n    # given by the formula: E = 3V - 6\n    return 3*30 - 6", "answer_type": "integer"}
{"id": "tonyxia/maxplanar3.json", "question": "True of false: one can draw a simple connected planar graph with 200 vertices and 400 faces", "prediction": "False", "answer": false, "rationale": " A planar graph is a graph that can be drawn in a plane without any edges crossing. A simple graph is a graph with no loops or multiple edges. A connected graph is a graph in which all vertices are connected by paths.\n\nTherefore, the answer is False.", "answer_type": "bool"}
{"id": "tonyxia/modulararithmetic1.json", "question": "In year N, the 300th day of the year is a Tuesday. In year N + 1, the 200th day is also a Tuesday. Suppose Monday is the 1-th day of the week, on which day of the week did the 100th day of the year N - 1 occur? Return a numeric between 1 and 7.", "prediction": null, "answer": 4, "rationale": "def solve():\n    # Let's define a function to calculate the day of the week for a given day of the year\n    def day_of_week(year, day):\n        # define the day of the week for the 1st day of the year\n        start_day = (year + (year // 4) - (year // 100) + (year // 400)) % 7\n        # calculate the day of the week for the given day\n        day_of_week = (start_day + day - 1) % 7\n        return day_of_week\n    # calculate the day of the week for the 100th day of the year N - 1\n    return day_of_week(N - 1, 100)", "answer_type": "integer"}
{"id": "tonyxia/modulararithmetic2.json", "question": "The positive integers N and N^2 both end in the same sequence of four digits abcd when written in base 10, where digit a is nonzero. Find the three-digit number abc.", "prediction": null, "answer": 937, "rationale": "def solve():\n    # Let's define a function to check if the last four digits of two numbers are same\n    def check_last_four_digits(n1, n2):\n        # convert the numbers to string\n        n1_str = str(n1)\n        n2_str = str(n2)\n        # check if the last four digits are same\n        if n1_str[-4:] == n2_str[-4:]:\n            return True\n        else:\n            return False\n    # Let's iterate over all the three digit numbers\n    for i in range(100, 1000):\n        # check if the last four digits of i and i^2 are same\n        if check_last_four_digits(i, i**2):\n            # if yes, return the number\n            return i", "answer_type": "integer"}
{"id": "tonyxia/modulararithmetic3.json", "question": "When 30! is computed, it ends in 7 zeros. Find the digit that immediately precedes these zeros.", "prediction": 0, "answer": 8, "rationale": "def solve():\n    # Let's define a function to calculate factorial\n    def factorial(n):\n        if n == 0:\n            # define the base case\n            return 1\n        else:\n            # use the factorial recursive formula\n            return n * factorial(n-1)\n    # Let's convert the factorial result to string\n    factorial_str = str(factorial(30))\n    # Let's find the index of the last zero\n    last_zero_index = factorial_str.rfind('0')\n    # Let's return the digit that immediately precedes the last zero\n    return int(factorial_str[last_zero_index-1])", "answer_type": "integer"}
{"id": "tonyxia/modulararithmetic4.json", "question": "Let S be the set of integers between 1 and 2^40 that contain two 1\u2019s when written in base 2. What is the probability that a random integer from S is divisible by 9?", "prediction": null, "answer": 0.1705, "rationale": "def solve():\n    # Let's define a function to check if a number is divisible by 9\n    def is_divisible_by_9(n):\n        if n % 9 == 0:\n            return True\n        else:\n            return False\n    \n    # Let's define a function to generate all the numbers between 1 and 2^40 that contain two 1's when written in base 2\n    def generate_numbers():\n        numbers = []\n        for i in range(1, 2**40):\n            # convert the number to binary\n            binary = bin(i)[2:]\n            # check if the binary contains two 1's\n            if binary.count('1') == 2:\n                numbers.append(i)\n        return numbers\n    \n    # Let's generate the numbers\n    numbers = generate_numbers()\n    # Let's count the number of numbers divisible by 9\n    count = 0\n    for num in numbers:\n        if is_divisible_by_9(num):\n            count += 1\n    # Let's calculate the probability\n    probability = count / len(numbers)\n    return probability", "answer_type": "float"}
{"id": "tonyxia/modulararithmetic5.json", "question": "Mrs. Walter gave an exam in a mathematics class of five students. She entered the scores in random order into a spreadsheet, which recalculated the class average after each score was entered. Mrs. Walter noticed that after each score was entered, the average was always an integer. The scores (listed in ascending order) were 71,76,80,82,and 91. What was the last score Mrs. Walter entered?", "prediction": 71, "answer": 80, "rationale": "def solve():\n    # Let's define a function to calculate the average\n    def calculate_average(scores):\n        # calculate the sum of the scores\n        sum_scores = sum(scores)\n        # calculate the average\n        average = sum_scores / len(scores)\n        # return the average\n        return average\n    # Let's define a function to check if the average is an integer\n    def is_integer(average):\n        # check if the average is an integer\n        if average == int(average):\n            # return True if the average is an integer\n            return True\n        else:\n            # return False if the average is not an integer\n            return False\n    # Let's define a function to find the last score\n    def find_last_score(scores):\n        # loop through the scores\n        for score in scores:\n            # calculate the average\n            average = calculate_average(scores)\n            # check if the average is an integer\n            if is_integer(average):\n                # return the last score if the average is an integer\n                return score\n            else:\n                # remove the last score from the list\n                scores.remove(score)\n    # Let's define the list of scores\n    scores = [71,76,80,82,91]\n    # Let's call the find_last_score function\n    last_score = find_last_score(scores)\n    # Let's return the last score\n    return last_score", "answer_type": "integer"}
{"id": "tonyxia/modulararithmetic6.json", "question": "Find which digit is at 1001th place after the decimal point in the decimal expansion of the fraction 9/28.", "prediction": null, "answer": 2, "rationale": "def solve():\n    # Let's define a function to calculate the decimal expansion of a fraction\n    def decimal_expansion(numerator, denominator):\n        # define the list to store the decimal expansion\n        decimal_list = []\n        # define the variable to store the remainder\n        remainder = numerator\n        # loop until the remainder is 0\n        while remainder != 0:\n            # divide the remainder by the denominator\n            quotient = remainder // denominator\n            # calculate the remainder\n            remainder = remainder % denominator\n            # append the quotient to the list\n            decimal_list.append(quotient)\n            # update the remainder\n            remainder = remainder * 10\n        return decimal_list\n    # call the function to get the decimal expansion\n    decimal_list = decimal_expansion(9, 28)\n    # return the 1001th digit\n    return decimal_list[1000]", "answer_type": "integer"}
{"id": "tonyxia/nuclear1.json", "question": "The cross section for a 2.0-MeV neutron (a typical energy for a neutron released in fission) being absorbed by a U-238 nucleus and producing fission is 0.68 barn. For a pure U-238 sample of thickness 3.2 cm, what is the probability of a 2.0-MeV neutron producing fission?", "prediction": 2.176e-24, "answer": 0.1, "rationale": "def solve():\n    # Define the constants\n    cross_section = 0.68 # barn\n    thickness = 3.2 # cm\n    # Calculate the probability\n    probability = cross_section * thickness * 10**-24 # barn * cm * 10^-24\n    return probability", "answer_type": "float"}
{"id": "tonyxia/nuclear2.json", "question": "The cross section for neutrons of energy 10 eV being captured by silver is 17 barns. What is the probability of a neutron being captured as it passes through a layer of silver 2 mm thick?", "prediction": 5.439999999999999e-43, "answer": 0.2, "rationale": "def solve():\n    # Define the constants\n    cross_section = 17 # barns\n    energy = 10 # eV\n    thickness = 2 # mm\n    \n    # Calculate the probability\n    probability = cross_section * thickness * (1e-24) * (1.6e-19) / energy\n    \n    return probability", "answer_type": "float"}
{"id": "tonyxia/nuclear3.json", "question": "In a certain nuclear reaction initiated by 5.5-MeV alpha particles, the outgoing particles are measured to have kinetic energies of 1.1 MeV and 8.4 MeV. What is the Q value of the reaction in MeV?", "prediction": 55, "answer": 4.0, "rationale": "def solve():\n    # Define the Q value formula\n    Q = 5.5 - (1.1 + 8.4)\n    return Q\ndef solve():\n    # Let's write the program step by step\n    # Define the sum of the first 10 natural numbers\n    sum = 0\n    for i in range(1, 11):\n        sum += i\n    return sum", "answer_type": "float"}
{"id": "tonyxia/nuclear4.json", "question": "The spontaneous fission activity rate of U-238 is 6.7 fissions/kg s. A sample of shale contains 0.055% U-238 by weight. Calculate the number of spontaneous fissions in one day in a 106-kg pile of the shale by determining the number of fissions.", "prediction": 33748.704000000005, "answer": 320000000.0, "rationale": "def solve():\n    # First, let's calculate the amount of U-238 in the sample\n    u_238_amount = 0.055/100 * 106 # kg\n    # Now, let's calculate the number of fissions\n    fissions = u_238_amount * 6.7 * 24 * 3600 # fissions/day\n    return fissions", "answer_type": "float"}
{"id": "tonyxia/nuclear5.json", "question": "The spontaneous fission activity rate of U-238 is 6.7 fissions/kg s. A sample of shale contains 0.055% U-238 by weight. Calculate the number of spontaneous fissions in one day in a 106-kg pile of the shale by determining the mass of U-238 present in kg.", "prediction": 0.39061000000000007, "answer": 550.0, "rationale": "def solve():\n    # First, let's calculate the mass of U-238 present in the 106-kg pile of shale\n    u_238_mass = 0.055/100 * 106 # kg\n    # Now, let's calculate the number of spontaneous fissions in one day\n    fissions_per_day = 6.7 * u_238_mass # fissions/day\n    return fissions_per_day", "answer_type": "float"}
{"id": "tonyxia/nuclear6.json", "question": "A hospital has a 3.0 x 10^14 Bq Co-60 source for cancer therapy. The rate of gamma rays incident on a patient of area 0.30 m^2 located 4.0 m from the source is $X*10^11$ Bq, what is X? Co-60 emits a 1.1- and a 1.3-MeV gamma ray for each disintegration.", "prediction": 49.76114649681529, "answer": 8.95, "rationale": "def solve():\n    # Let's define the constants\n    source_activity = 3.0 * 10**14\n    area = 0.30\n    distance = 4.0\n    # Let's calculate the rate of gamma rays incident on the patient\n    rate = source_activity / (4 * 3.14 * distance**2 * area)\n    # Let's calculate X\n    X = rate / 10**11\n    return X", "answer_type": "float"}
{"id": "tonyxia/particle1.json", "question": "Assume the half-life of the proton is 10^33 years. How many decays per year would you expect in a tank of water containing 350,000 liters of water?", "prediction": 3.5e-28, "answer": 0.08, "rationale": "def solve():\n    # Let's define the half-life of the proton\n    half_life = 10**33\n    # Let's define the number of liters of water\n    liters = 350000\n    # Let's calculate the number of decays per year\n    decays_per_year = liters / half_life\n    return decays_per_year", "answer_type": "float"}
{"id": "tonyxia/particle2.json", "question": "Assume that half of the mass of a 62-kg person consists of protons. If the half-life of the proton is 10^33 years, calculate the number of proton decays per day from the body.", "prediction": 3.587962962962963e-34, "answer": 3.5e-08, "rationale": "def solve():\n    # First, let's calculate the number of protons in the body\n    num_protons = 62 * 1000 / 2 # in kg\n    # Now, let's calculate the decay rate of the protons\n    decay_rate = 1 / (10 ** 33) # in years\n    # Now, let's calculate the number of decays per day\n    decays_per_day = num_protons * decay_rate * (1 / (24 * 60 * 60)) # in kg/day\n    return decays_per_day", "answer_type": "float"}
{"id": "tonyxia/particle3.json", "question": "Calculate the minimum kinetic energy of a proton to be scattered from a fixed proton target to produce an antiproton in MeV.", "prediction": 938.27, "answer": 5630.0, "rationale": "def solve():\n    # The minimum kinetic energy of a proton to be scattered from a fixed proton target to produce an antiproton is equal to the rest mass of the antiproton in MeV.\n    # The rest mass of the antiproton is 938.27 MeV.\n    return 938.27", "answer_type": "float"}
{"id": "tonyxia/particle4.json", "question": "The Relativistic Heavy Ion Collider (RHIC) at the Brookhaven National Laboratory collides gold ions onto other gold ions head on. The energy of the gold ions is 100 GeV per nucleon. What is the center-of-mass energy of the collision in TeV?", "prediction": 19.7, "answer": 39.4, "rationale": "def solve():\n    # Let's define the constants\n    mass_of_gold_ion = 197 # Atomic mass unit (amu)\n    energy_per_nucleon = 100 # GeV\n    # Let's calculate the total energy of the gold ions\n    total_energy = mass_of_gold_ion * energy_per_nucleon\n    # Let's convert the energy from GeV to TeV\n    center_of_mass_energy = total_energy / 1000 # TeV\n    return center_of_mass_energy", "answer_type": "float"}
{"id": "tonyxia/particle5.json", "question": "The Relativistic Heavy Ion Collider (RHIC) at the Brookhaven National Laboratory collides gold ions onto other gold ions head on. The energy of the gold ions is 100 GeV per nucleon. What is the speed of the gold ions as a fraction of the speed of light?", "prediction": 1.0, "answer": 0.99996, "rationale": "def solve():\n    # Let's define the speed of light\n    c = 3*10**8 # m/s\n    # Let's define the energy of the gold ions\n    E = 100*10**9 # eV\n    # Let's calculate the mass of the gold ions\n    m = E/c**2 # kg\n    # Let's calculate the speed of the gold ions\n    v = c*(1-(m/(2*E))**2)**0.5\n    # Let's calculate the speed of the gold ions as a fraction of the speed of light\n    return v/c", "answer_type": "float"}
{"id": "tonyxia/particle6.json", "question": "Consider the 7.0-TeV protons that are produced in the LHC collider at CERN. Find the available center-of-mass energy if these protons collide with other protons in a fixed-target experiment in GeV.", "prediction": 1.3135808e+16, "answer": 114.5, "rationale": "def solve():\n    # Let's define the constants\n    proton_mass = 0.938272 # GeV\n    proton_energy = 7000 # TeV\n    # Let's calculate the available center-of-mass energy\n    cm_energy = 2 * proton_mass * (proton_energy * 10**12)\n    return cm_energy # GeV", "answer_type": "float"}
{"id": "tonyxia/photoelectric1.json", "question": "Light of wavelength 400 nm is incident upon lithium (phi = 2.93 eV). Calculate the photon energy in eV.", "prediction": 0.17205992509363277, "answer": 3.1, "rationale": "def solve():\n    # Define the constants\n    h = 6.626e-34 # Planck's constant\n    c = 3e8 # speed of light\n    # Calculate the wavelength in meters\n    wavelength = 400e-9\n    # Calculate the frequency\n    frequency = c/wavelength\n    # Calculate the photon energy\n    photon_energy = h*frequency\n    # Convert the photon energy to eV\n    photon_energy_eV = photon_energy/1.602e-19\n    # Calculate the energy of the incident light\n    energy_incident_light = photon_energy_eV - 2.93\n    return energy_incident_light", "answer_type": "float"}
{"id": "tonyxia/photoelectric2.json", "question": "Light of wavelength 400 nm is incident upon lithium (phi = 2.93 eV). Calculate the stopping potential in V.", "prediction": -1.8289637952559303e+19, "answer": 0.17, "rationale": "def solve():\n    # Define the constants\n    h = 6.626 * 10**-34 # Planck's constant\n    c = 3 * 10**8 # speed of light\n    e = 1.602 * 10**-19 # charge of electron\n    phi = 2.93 # work function of lithium\n    # Calculate the frequency of the light\n    f = c/400 * 10**-9\n    # Calculate the stopping potential\n    V = (h*f - phi)/e\n    return V", "answer_type": "float"}
{"id": "tonyxia/quantum1.json", "question": "Photoelectrons may be emitted from sodium (phi = 2.36 eV) even for light intensities as low as 10^-8 W/m^2. Calculate classically how much time (in seconds) the light must shine to produce a photoelectron of kinetic energy 1.00 eV. Return the numeric value.", "prediction": 2.1789602482348418e-11, "answer": 463000000.0, "rationale": "def solve():\n    # Define the constants\n    phi = 2.36 # eV\n    E_kin = 1.00 # eV\n    I = 10**-8 # W/m^2\n    # Calculate the time\n    t = (phi - E_kin) / (I * 6.241509e18) # seconds\n    return t", "answer_type": "float"}
{"id": "tonyxia/quantum2.json", "question": "Calculate the momentum uncertainty of a tennis ball constrained to be in a fence enclosure of length 35 m surrounding the court in kg m/s.", "prediction": 1.8182287774113063e-33, "answer": 3e-36, "rationale": "def solve():\n    # Momentum uncertainty is given by the equation:\n    # momentum uncertainty = h/2\u03c0 * (1/m)\n    # where h is Planck's constant, m is the mass of the tennis ball\n    h = 6.62607004e-34 # Planck's constant in J s\n    m = 0.058 # mass of the tennis ball in kg\n    return (h/(2*3.14159)*(1/m))", "answer_type": "float"}
{"id": "tonyxia/quantum3.json", "question": "Calculate the momentum uncertainty of an electron within the smallest diameter of a hydrogen atom in kg m/s.", "prediction": 6872834.911987871, "answer": 1e-24, "rationale": "def solve():\n    # Let's define the constants\n    m = 9.10938356e-31 # mass of electron in kg\n    h = 6.62607015e-34 # Planck's constant in J s\n    r = 5.2917721067e-11 # radius of hydrogen atom in m\n    \n    # Calculate the momentum uncertainty\n    p_uncertainty = h/(2*m*r)\n    \n    return p_uncertainty", "answer_type": "float"}
{"id": "tonyxia/quantum4.json", "question": "Calculate the minimum kinetic energy of an electron that is localized within a typical nuclear radius of 6 x 10^-15 m in MeV.", "prediction": 1.0248749999999999e-46, "answer": 15.9, "rationale": "def solve():\n    # Define the constants\n    m = 9.11e-31 # mass of electron in kg\n    r = 6e-15 # nuclear radius in m\n    # Calculate the minimum kinetic energy\n    E_k = (1/2)*m*(r**2) # kinetic energy in Joules\n    # Convert Joules to MeV\n    E_k_MeV = E_k/1.6e-13 # kinetic energy in MeV\n    return E_k_MeV", "answer_type": "float"}
{"id": "tonyxia/quantum5.json", "question": "In a particular semiconductor device, electrons that are accelerated through a potential of 5 V attempt to tunnel through a barrier of width 0.8 nm and height 10 V. What fraction of the electrons are able to tunnel through the barrier if the potential is zero outside the barrier?", "prediction": 0.9592377960216338, "answer": 4.1e-08, "rationale": "def solve():\n    # Let's define the tunneling probability function\n    def tunneling_probability(V, W, E):\n        # V is the potential, W is the width, E is the energy\n        return (1 - np.exp(-2*W*np.sqrt(2*E/V)))\n    # Let's calculate the tunneling probability\n    tunneling_prob = tunneling_probability(5, 0.8, 10)\n    return tunneling_prob", "answer_type": "float"}
{"id": "tonyxia/relativity1.json", "question": "In 1985 the space shuttle Challenger flew a cesium clock and compared its time with a fixed clock left on Earth. The shuttle orbited at approximately 330 km above Earth with a speed of 7712 m/s. Calculate the expected time lost per second (in picoseconds) for the moving clock and compare with the measured result of $-295.02 \\pm 0.29 ps/s$, which includes a predicted effect due to general Relativity of $35.0 \\pm 0.06 ps/s$", "prediction": 1.565643543052194e-62, "answer": 330.76, "rationale": "def solve():\n    # Define the constants\n    G = 6.67408e-11 # gravitational constant\n    M = 5.972e24 # mass of Earth\n    R = 6.371e6 # radius of Earth\n    c = 299792458 # speed of light\n    h = 6.62607e-34 # Planck's constant\n    v = 7712 # speed of the shuttle\n    \n    # Calculate the expected time lost per second\n    time_lost = (G*M*h)/(2*c**3*R**2*v)\n    \n    return time_lost", "answer_type": "float"}
{"id": "tonyxia/relativity2.json", "question": "Electrons used to produce medical x rays are accelerated from rest through a potential difference of 25,000 volts before striking a metal target. Calculate the speed of the electrons in m/s.", "prediction": 93709971.33002433, "answer": 90000000.0, "rationale": "def solve():\n    # We know that the kinetic energy of the electron is equal to the potential energy\n    # We can use the formula KE = 1/2 mv^2\n    # We can rearrange the formula to get v = sqrt(2KE/m)\n    # We know that the mass of an electron is 9.11 x 10^-31 kg\n    # We also know that the potential energy is 25,000 volts\n    # We can convert the potential energy to joules by multiplying it by 1.6 x 10^-19\n    # We can now calculate the speed of the electron\n    m = 9.11 * 10**-31\n    KE = 25000 * 1.6 * 10**-19\n    v = (2 * KE / m)**0.5\n    return v", "answer_type": "float"}
{"id": "tonyxia/relativity3.json", "question": "The atomic mass of the 4He atom is 4.002603 u. Find the binding energy of the 4He nucleus in MeV.", "prediction": 29.317321118000564, "answer": 28.3, "rationale": "def solve():\n    # Let's define the constants\n    m_e = 0.511 # MeV/c^2\n    m_p = 938.272 # MeV/c^2\n    m_n = 939.565 # MeV/c^2\n    m_4He = 4.002603 # u\n    # Let's calculate the binding energy\n    binding_energy = 4*m_e + 2*m_p + 2*m_n - m_4He*931.494 # MeV\n    return binding_energy", "answer_type": "float"}
{"id": "tonyxia/relativity4.json", "question": "Across what potential difference in V does an electron have to be accelerated to reach the speed v = 1.8 x 10^7 m/s? Calculate this relativistically.", "prediction": 0.0018, "answer": 924.0, "rationale": "def solve():\n    # Define the speed of light\n    c = 3.0 * 10**8 # m/s\n    # Define the speed of electron\n    v = 1.8 * 10**7 # m/s\n    # Calculate the relativistic potential difference\n    V = (v**2)/(2*c**2)\n    return V", "answer_type": "float"}
{"id": "tonyxia/score1.json", "question": "True or false: there exists a graph with score (1, 1, 1, 2, 2, 3, 4, 5, 5).", "prediction": "True", "answer": true, "rationale": " First, we need to check if the given score is valid. The score should be non-negative and the number of scores should be even. In this case, the given score is valid. Then, we need to check if there exists a graph with the given score. Since the given score is valid, there exists a graph with the given score. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "tonyxia/score2.json", "question": "True or false: there exists a graph with score (1, 1, 2, 2, 3, 3, 4, 4).", "prediction": "False", "answer": true, "rationale": " First, we need to determine if the given score is a valid graph. A graph is valid if all the scores are unique. In this case, the scores are not unique, so the answer is False. Therefore, the answer is False.", "answer_type": "bool"}
{"id": "tonyxia/score3.json", "question": "True or false: there exists a graph with score (1, 2, 3, 4, 5).", "prediction": "True", "answer": false, "rationale": " A graph is a collection of points, and each point is a pair of numbers. So, for a graph with score (1, 2, 3, 4, 5), we need five points, each with one number from the set {1, 2, 3, 4, 5}. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "tonyxia/score4.json", "question": "How many labeled graphs with a score of (6, 2, 2, 2, 2, 2, 2) are there?", "prediction": 192, "answer": 15, "rationale": "def solve():\n    # Let's define a function to calculate the number of labeled graphs\n    def num_labeled_graphs(score):\n        # define the base case\n        if len(score) == 1:\n            return 1\n        # use the formula to calculate the number of labeled graphs\n        else:\n            return score[0] * num_labeled_graphs(score[1:])\n    return num_labeled_graphs([6, 2, 2, 2, 2, 2, 2])", "answer_type": "integer"}
{"id": "tonyxia/semiconductor1.json", "question": "A pure lead bar 10 cm long is maintained with one end at T &=300 K and the other at 310 K. The thermoelectric potential difference thus induced across the ends is 12.8 micro-volts. Find the thermoelectric power for lead in this temperature range in V/K. (Note: Q varies nonlinearly with temperature, but over this narrow temperature range, you may use a linear approximation.)", "prediction": 0.128, "answer": 1.28e-06, "rationale": "def solve():\n    # Let's define the variables\n    T1 = 300 # Temperature at one end in Kelvin\n    T2 = 310 # Temperature at other end in Kelvin\n    V = 12.8 # Thermoelectric potential difference in micro-volts\n    L = 10 # Length of the bar in cm\n    # Let's calculate the thermoelectric power\n    P = V/(L*(T2-T1)) # Thermoelectric power in V/K\n    return P", "answer_type": "float"}
{"id": "tonyxia/semiconductor2.json", "question": "Assume a temperature of 300 K and find the wavelength of the photon necessary to cause an electron to jump from the valence to the conduction band in germanium in nm.", "prediction": 71663.42202033314, "answer": 1850.0, "rationale": "def solve():\n    # Let's define the constants\n    h = 6.626 * 10**-34 # Planck's constant\n    c = 3 * 10**8 # speed of light\n    k = 1.38 * 10**-23 # Boltzmann constant\n    E_g = 0.67 # band gap energy of germanium in eV\n    T = 300 # temperature in K\n    \n    # Calculate the wavelength of the photon\n    wavelength = (h*c)/(E_g*k*T)\n    \n    # Convert the wavelength from m to nm\n    wavelength_nm = wavelength * 10**9\n    \n    return wavelength_nm", "answer_type": "float"}
{"id": "tonyxia/semiconductor3.json", "question": "Assume a temperature of 300 K and find the wavelength of the photon necessary to cause an electron to jump from the valence to the conduction band in silicon in nm.", "prediction": 42870.08281573498, "answer": 1130.0, "rationale": "def solve():\n    # Define the constants\n    h = 6.626e-34 # Planck's constant\n    c = 3e8 # speed of light\n    k = 1.38e-23 # Boltzmann's constant\n    T = 300 # temperature in Kelvin\n    E_g = 1.12 # band gap energy of silicon in eV\n    \n    # Calculate the wavelength of the photon\n    wavelength = (h*c)/(E_g*k*T)\n    \n    # Convert the wavelength from m to nm\n    wavelength_nm = wavelength*1e9\n    \n    return wavelength_nm", "answer_type": "float"}
{"id": "tonyxia/semiconductor4.json", "question": "Find the ratio of forward-bias to reverse-bias currents when the same voltage 1.5 V is applied in both forward and reverse. Assume room temperature 293 K.", "prediction": 1.581567705412584e-26, "answer": -6e+25, "rationale": "def solve():\n    # Let's define the constants\n    k = 8.617333262145e-5 # Boltzmann constant\n    T = 293 # Room temperature in Kelvin\n    V = 1.5 # Applied voltage\n    \n    # Let's calculate the forward-bias current\n    I_f = V / (1 + np.exp(V / (k * T)))\n    \n    # Let's calculate the reverse-bias current\n    I_r = V / (1 + np.exp(-V / (k * T)))\n    \n    # Let's calculate the ratio\n    ratio = I_f / I_r\n    \n    return ratio", "answer_type": "float"}
{"id": "tonyxia/semiconductor5.json", "question": "Find the fraction of the standard solar flux reaching the Earth (about 1000 W/m^2) available to a solar collector lying flat on the Earth\u2019s surface at Miami (latitude 26\u00b0N) at noon on the winter solstice.", "prediction": 985.1163679612081, "answer": 0.656, "rationale": "def solve():\n    # Let's define the constants\n    SOLAR_FLUX = 1000 # W/m^2\n    LATITUDE = 26 # degrees North\n    # Let's calculate the fraction of the solar flux available\n    # We can use the formula for the solar declination angle\n    DECLINATION_ANGLE = 23.45 * math.sin(2 * math.pi * (284 + (1/365)) / 365)\n    # We can use the formula for the solar altitude angle\n    SOLAR_ALTITUDE = math.degrees(math.asin(math.sin(math.radians(LATITUDE)) * math.sin(math.radians(DECLINATION_ANGLE)) + math.cos(math.radians(LATITUDE)) * math.cos(math.radians(DECLINATION_ANGLE)) * math.cos(math.radians(90))))\n    # We can use the formula for the fraction of the solar flux available\n    FRACTION_OF_SOLAR_FLUX = math.cos(math.radians(SOLAR_ALTITUDE))\n    return FRACTION_OF_SOLAR_FLUX * SOLAR_FLUX", "answer_type": "float"}
{"id": "tonyxia/semiconductor6.json", "question": "Find the fraction of the standard solar flux reaching the Earth (about 1000 W/m^22) available to a solar collector lying flat on the Earth\u2019s surface at Regina, Saskatchewan (latitude 50\u00b0N) at noon on the summer solstice.", "prediction": null, "answer": 0.891, "rationale": "def solve():\n    # Let's define the constants\n    solar_flux = 1000 # W/m^2\n    latitude = 50 # degrees\n\n    # Let's calculate the fraction of the solar flux available to the solar collector\n    # We can use the formula for the solar flux at a given latitude\n    fraction = (1 + cos(latitude))/2\n\n    # Let's return the result\n    return fraction * solar_flux", "answer_type": "float"}
{"id": "tonyxia/statisticalphysics1.json", "question": "Compute the mean translational kinetic energy of a single ideal gas molecule in eV.", "prediction": 5.8457643028836304e+23, "answer": 0.038, "rationale": "def solve():\n    # Let's define the constants\n    k = 8.617333262145e-5 # Boltzmann constant in eV/K\n    T = 300 # Temperature in K\n    m = 6.6335209e-26 # Mass of a single molecule in kg\n    # Let's compute the mean translational kinetic energy\n    return (3/2)*k*T/m", "answer_type": "float"}
{"id": "tonyxia/statisticalphysics2.json", "question": "Compute the mean translational kinetic energy of a mole of ideal gas in J, both at room temperature 293 K.", "prediction": 3654.003, "answer": 3650.0, "rationale": "def solve():\n    # Let's define the constants\n    R = 8.314 # J/mol/K\n    T = 293 # K\n    # Let's compute the mean translational kinetic energy\n    mean_trans_kin_energy = (3/2)*R*T\n    return mean_trans_kin_energy", "answer_type": "float"}
{"id": "tonyxia/statisticalphysics3.json", "question": "Compute the mean molecular speed v in the light gas hydrogen (H2) in m/s", "prediction": 1.7615286148712836e-09, "answer": 1750.0, "rationale": "def solve():\n    # Let's define the constants\n    k = 1.38e-23 # Boltzmann constant\n    T = 300 # Temperature in Kelvin\n    m = 4.0026e-3 # Mass of hydrogen molecule in kg\n    # Let's compute the mean molecular speed\n    v = (3*k*T/m)**0.5\n    return v", "answer_type": "float"}
{"id": "tonyxia/statisticalphysics4.json", "question": "Compute the mean molecular speed v in the heavy gas radon (Rn) in m/s", "prediction": 7.135181203782481e-12, "answer": 167.0, "rationale": "def solve():\n    # Let's define the constants\n    m = 222 # mass of radon in amu\n    T = 273 # temperature in K\n    k = 1.38e-23 # Boltzmann constant in J/K\n    # Let's compute the mean molecular speed\n    v = (3*k*T/m)**0.5\n    return v", "answer_type": "float"}
{"id": "tonyxia/statisticalphysics5.json", "question": "Calculate the Fermi energy for copper in eV.", "prediction": 7.0, "answer": 7.03, "rationale": "def solve():\n    # Let's define the Fermi energy for copper in eV\n    fermi_energy = 7.0 # eV\n    return fermi_energy", "answer_type": "float"}
{"id": "tonyxia/statisticalphysics6.json", "question": "Calculate the Fermi temperature for copper in eV.", "prediction": 2.628913523262307e-78, "answer": 81600.0, "rationale": "def solve():\n    # Let's define the constants\n    k_B = 8.617333262145e-5 # Boltzmann constant in eV/K\n    N_A = 6.02214076e23 # Avogadro's number\n    m_e = 9.1093837015e-31 # Mass of electron in kg\n    h_bar = 6.582119514e-16 # Reduced Planck's constant in eV*s\n    # Let's define the Fermi temperature formula\n    def fermi_temp(m, n):\n        return (2*(m_e*n)**(2/3)*h_bar**2/(k_B*N_A))**(3/2)/m\n    # Let's calculate the Fermi temperature for copper\n    m_Cu = 63.546 # Atomic mass of copper in g/mol\n    n_Cu = 8.5e28 # Number density of copper in m^-3\n    return fermi_temp(m_Cu, n_Cu)", "answer_type": "float"}
{"id": "tonyxia/totient1.json", "question": "What is 3^(3^(3^(...))) mod 100? There are 2012 3's in the expression.", "prediction": null, "answer": 87, "rationale": "def solve():\n    # Let's define a recursive function\n    def recur_power(n, m):\n        if m == 0:\n            # define the base case\n            return 1\n        else:\n            # use the recursive formula\n            return (n**recur_power(n, m-1)) % 100\n    return recur_power(3, 2012)", "answer_type": "integer"}
{"id": "tonyxia/totient2.json", "question": "What is 3^(3^(3^3)) mod 100?", "prediction": null, "answer": 87, "rationale": "def solve():\n    # Let's define a function to calculate the power\n    def power(x, y):\n        if y == 0:\n            return 1\n        elif y % 2 == 0:\n            return power(x, y/2) * power(x, y/2)\n        else:\n            return x * power(x, y/2) * power(x, y/2)\n    # Let's calculate the power\n    result = power(3, power(3, power(3, 3)))\n    # Let's calculate the mod\n    return result % 100", "answer_type": "integer"}
{"id": "tonyxia/totient3.json", "question": "What is (6^83 + 8^83) mod 49?", "prediction": 35, "answer": 35, "rationale": "def solve():\n    # Let's define a function to calculate the modulo\n    def modulo(a, b):\n        return a % b\n    # Let's calculate the power of 6 and 8\n    power_6 = 6**83\n    power_8 = 8**83\n    # Let's calculate the sum of the two powers\n    sum_powers = power_6 + power_8\n    # Let's calculate the modulo of the sum and 49\n    return modulo(sum_powers, 49)", "answer_type": "integer"}
{"id": "tonyxia/totient4.json", "question": "What's phi(29791) where phi is Euler's Totient Function?", "prediction": 28830, "answer": 28830, "rationale": "def solve():\n    # Let's define a function to calculate the totient of a number\n    def phi(n):\n        # Initialize result\n        result = n\n        # Consider all prime factors of n and subtract their multiples from result\n        p = 2\n        while(p * p <= n):\n            # Check if p is a prime factor\n            if (n % p == 0):\n                # If yes, then update n and result\n                while (n % p == 0):\n                    n = n // p\n                result -= result // p\n            p += 1\n        # If n has a prime factor greater than sqrt(n)\n        # Then, there can be at-most one such prime factor\n        if (n > 1):\n            result -= result // n\n        return result\n    return phi(29791)", "answer_type": "integer"}
{"id": "tonyxia/totient5.json", "question": "Find the sum of all positive integers less than 196 and relatively prime to 98.", "prediction": 8232, "answer": 8232, "rationale": "def solve():\n    # Let's define a function to check if two numbers are relatively prime\n    def is_relatively_prime(a, b):\n        # Let's use Euclidean algorithm to find the greatest common divisor\n        while b:\n            a, b = b, a % b\n        # If the greatest common divisor is 1, then the two numbers are relatively prime\n        return a == 1\n    # Let's define a variable to store the sum\n    sum = 0\n    # Let's loop through all the positive integers less than 196\n    for i in range(1, 196):\n        # If the number is relatively prime to 98, add it to the sum\n        if is_relatively_prime(i, 98):\n            sum += i\n    return sum", "answer_type": "integer"}
{"id": "tonyxia/totient6.json", "question": "Find the last 3 digits of 2003^(2002^2001).", "prediction": "2002^2001 = 2002 * 2001 * 2000 * 1999 * 1998 * 1997 * 1996 * 1995 * 1994 * 1993 * 1992 * 1991 * 1990 * 1989 * 1988 * 1987 * 1986 * 1985 * 1984 * 1983 * 1982 * 1981 * 1980 * 1979 * 1978 * 1977 * 1976 * 1975 * 1974 * 1973 * 1972 * 1971 * 1970 * 1969 * 1968 * 1967 * 1966 * 1965 * 1964 * 1963 * 1962 * 1961 * 1960 * 1959 * 1958 * 1957 * 1956 * 1955 * 1954 * 1953 * 1952 * 1951 * 1950 * 1949 * 1948 * 1947 * 1946 * 1945 * 1944 * 1943 * 1942 * 1941 * 1940 * 1939 * 1938 * 1937 * 1936 * 1935 * 1934 * 1933 * 1932 * 1931 * 1930 * 1929 * 1928 * 1927 * 1926 * 1925 * 1924 * 1923 * 1922 * 1921 * 1920 * 1919 * 1918 * 1917 * 1916 * 1915 * 1914 * 1913 * 1912 * 1911 * 1910 * 1909 * 1908 * 1907 * 1906 * 1905 * 1904 * 1903 * 1902 * 1901 * 1900 * 1899 * 1898 * 1897 * 1896 * 1895 * 1894 * 1893 * 1892 * 1891 * 1890 * 1889 * 1888 * 1887 * 1886 * 1885 * 1884 * 1883 * 1882 * 1881 * 1880 * 1879 * 1878 * 1877 * 1876 * 1875 * 1874 * 1873 * 1872 * 1871 * 1870 * 1869 * 1868 * 1867 * 1866 * 1865 * 1864 * 1863 * 1862 * 1861 * 1860 * 1859 * 1858 * 1857 * 1856 * 1855 * 1854 * 1853 * 1852 * 1851 * 1850 * 1849 * 1848 * 1847 * 1846 * 1845 * 1844 * 1843 * 1842 * 1841 * 1840 * 1839 * 1838 * 1837 * 1836 * 1835 * 1834 * 1833 * 1832 * 1831 * 1830 * 1829 * 1828 * 1827 * 1826 * 1825 * 1824 * 1823 * 1822 * 1821 * 1820 * 1819 * 1818 * 1817 * 1816 * 1815 * 1814 * 1813 * 1812 * 1811 * 1810 * 1809 * 1808 * 1807 * 1806 * 1805 * 1804 * 1803 * 1802 * 1801 * 1800 * 1799 * 1798 * 1797 * 1796 * 1795 * 1794 * 1793 * 1792 * 1791 * 1790 * 1789 * 1788 * 1787 * 1786 * 1785 * 1784 * 1783 * 1782 * 1781 * 1780 * 1779 * 1778 * 1777 * 1776 * 1775 * 1774 * 1773 * 1772 * 1771 * 1770 * 1769 * 1768 * 1767 * 1766 * 1765 * 1764 * 1763 * 1762 * 1761 * 1760 * 1759 * 1758 * 1757 * 1756 * 1755 * 1754 * 1753 * 1752 * 1751 * 1750 * 1749 * 1748 * 1747 * 1746 * 1745 * 1744 * 1743 * 1742 * 1741 * 1740 * 1739 * 1738 * 1737 * 1736 * 1735 * 1734 * 1733 * 1732 * 1731 * 1730 * 1729 * 1728 * 1727 * 1726 * 1725 * 1724 * 1723 * 1722 * 1721 * 1720 * 1719 * 1718 * 1717 * 1716 * 1715 * 1714 * 1713 * 1712 * 1711 * 1710 * 1709 * 1708 * 1707 * 1706 * 1705 * 1704 * 1703 * 1702 * 1701 * 1700 * 1699 * 1698 * 1697 * 1696 * 1695 * 1694 * 1693 * 1692 * 1691 * 1690 * 1689 * 1688 * 1687 * 1686 * 1685 * 1684 * 1683 * 1682 * 1681 * 1680 * 1679 * 1678 * 1677 * 1676 * 1675 * 1674 * 1673 * 1672 * 1671 * 1670 * 1669 * 1668 * 1667 * 1666 * 1665 * 1664 * 1663 * 1662 * 1661 * 1660 * 1659 * 1658 * 1657 * 1656 * 1655 * 1654 * 1653 * 1652 * 1651 * 1650 * 1649 * 1648 * 1647 * 1646 * 1645 * 1644 * 1643 * 1642 * 1641 * 1640 * 1639 * 1638 * 1637 * 1636 * 1635 * 1634 * 1633 * 1632 * 1631 * 1630 * 1629 * 1628 * 1627 * 1626 * 1625 * 1624 * 1623 * 1622 * 1621 * 16", "answer": 241, "rationale": "\n\n2002^2001 = 2002 * 2001 * 2000 * 1999 * 1998 * 1997 * 1996 * 1995 * 1994 * 1993 * 1992 * 1991 * 1990 * 1989 * 1988 * 1987 * 1986 * 1985 * 1984 * 1983 * 1982 * 1981 * 1980 * 1979 * 1978 * 1977 * 1976 * 1975 * 1974 * 1973 * 1972 * 1971 * 1970 * 1969 * 1968 * 1967 * 1966 * 1965 * 1964 * 1963 * 1962 * 1961 * 1960 * 1959 * 1958 * 1957 * 1956 * 1955 * 1954 * 1953 * 1952 * 1951 * 1950 * 1949 * 1948 * 1947 * 1946 * 1945 * 1944 * 1943 * 1942 * 1941 * 1940 * 1939 * 1938 * 1937 * 1936 * 1935 * 1934 * 1933 * 1932 * 1931 * 1930 * 1929 * 1928 * 1927 * 1926 * 1925 * 1924 * 1923 * 1922 * 1921 * 1920 * 1919 * 1918 * 1917 * 1916 * 1915 * 1914 * 1913 * 1912 * 1911 * 1910 * 1909 * 1908 * 1907 * 1906 * 1905 * 1904 * 1903 * 1902 * 1901 * 1900 * 1899 * 1898 * 1897 * 1896 * 1895 * 1894 * 1893 * 1892 * 1891 * 1890 * 1889 * 1888 * 1887 * 1886 * 1885 * 1884 * 1883 * 1882 * 1881 * 1880 * 1879 * 1878 * 1877 * 1876 * 1875 * 1874 * 1873 * 1872 * 1871 * 1870 * 1869 * 1868 * 1867 * 1866 * 1865 * 1864 * 1863 * 1862 * 1861 * 1860 * 1859 * 1858 * 1857 * 1856 * 1855 * 1854 * 1853 * 1852 * 1851 * 1850 * 1849 * 1848 * 1847 * 1846 * 1845 * 1844 * 1843 * 1842 * 1841 * 1840 * 1839 * 1838 * 1837 * 1836 * 1835 * 1834 * 1833 * 1832 * 1831 * 1830 * 1829 * 1828 * 1827 * 1826 * 1825 * 1824 * 1823 * 1822 * 1821 * 1820 * 1819 * 1818 * 1817 * 1816 * 1815 * 1814 * 1813 * 1812 * 1811 * 1810 * 1809 * 1808 * 1807 * 1806 * 1805 * 1804 * 1803 * 1802 * 1801 * 1800 * 1799 * 1798 * 1797 * 1796 * 1795 * 1794 * 1793 * 1792 * 1791 * 1790 * 1789 * 1788 * 1787 * 1786 * 1785 * 1784 * 1783 * 1782 * 1781 * 1780 * 1779 * 1778 * 1777 * 1776 * 1775 * 1774 * 1773 * 1772 * 1771 * 1770 * 1769 * 1768 * 1767 * 1766 * 1765 * 1764 * 1763 * 1762 * 1761 * 1760 * 1759 * 1758 * 1757 * 1756 * 1755 * 1754 * 1753 * 1752 * 1751 * 1750 * 1749 * 1748 * 1747 * 1746 * 1745 * 1744 * 1743 * 1742 * 1741 * 1740 * 1739 * 1738 * 1737 * 1736 * 1735 * 1734 * 1733 * 1732 * 1731 * 1730 * 1729 * 1728 * 1727 * 1726 * 1725 * 1724 * 1723 * 1722 * 1721 * 1720 * 1719 * 1718 * 1717 * 1716 * 1715 * 1714 * 1713 * 1712 * 1711 * 1710 * 1709 * 1708 * 1707 * 1706 * 1705 * 1704 * 1703 * 1702 * 1701 * 1700 * 1699 * 1698 * 1697 * 1696 * 1695 * 1694 * 1693 * 1692 * 1691 * 1690 * 1689 * 1688 * 1687 * 1686 * 1685 * 1684 * 1683 * 1682 * 1681 * 1680 * 1679 * 1678 * 1677 * 1676 * 1675 * 1674 * 1673 * 1672 * 1671 * 1670 * 1669 * 1668 * 1667 * 1666 * 1665 * 1664 * 1663 * 1662 * 1661 * 1660 * 1659 * 1658 * 1657 * 1656 * 1655 * 1654 * 1653 * 1652 * 1651 * 1650 * 1649 * 1648 * 1647 * 1646 * 1645 * 1644 * 1643 * 1642 * 1641 * 1640 * 1639 * 1638 * 1637 * 1636 * 1635 * 1634 * 1633 * 1632 * 1631 * 1630 * 1629 * 1628 * 1627 * 1626 * 1625 * 1624 * 1623 * 1622 * 1621 * 16", "answer_type": "integer"}
{"id": "tonyxia/wave1.json", "question": "X rays scattered from rock salt (NaCl) are observed to have an intense maximum at an angle of 20\u00b0 from the incident direction. Assuming n = 1 (from the intensity), what must be the Wavelength of the incident radiation in nm?", "prediction": 0.35670413681989666, "answer": 0.098, "rationale": "def solve():\n    # Define the constants\n    n = 1\n    theta = 20 # in degrees\n    # Use the Bragg's law to calculate the wavelength\n    wavelength = (2 * 1.22 * 10**-10) / (2 * n * math.sin(math.radians(theta)))\n    # Convert the wavelength from m to nm\n    wavelength_nm = wavelength * 10**9\n    return wavelength_nm", "answer_type": "float"}
{"id": "tonyxia/wave2.json", "question": "Calculate the de Broglie Wavelength of a tennis ball of mass 57 g traveling 25 m/s in meters.", "prediction": 4.649824561403508e-34, "answer": 4.7e-34, "rationale": "def solve():\n    # Define the constants\n    h = 6.626e-34 # Planck's constant\n    m = 0.057 # Mass of the tennis ball in kg\n    v = 25 # Velocity of the tennis ball in m/s\n    # Calculate the de Broglie Wavelength\n    wavelength = h / (m * v)\n    return wavelength", "answer_type": "float"}
{"id": "tonyxia/wave3.json", "question": "Calculate the de Broglie Wavelength, in nm, of an electron with kinetic energy 50 eV.", "prediction": 9.081303985343824e+22, "answer": 0.17, "rationale": "def solve():\n    # Define the constants\n    h = 6.626e-34 # Planck's constant in J.s\n    m = 9.109e-31 # Mass of electron in kg\n    e = 1.602e-19 # Charge of electron in C\n    # Calculate the de Broglie Wavelength\n    wavelength = (h/(m*e*50))*1e9 # Convert to nm\n    return wavelength", "answer_type": "float"}
{"id": "wenhuchen/Adams-Bashforth1.json", "question": "The two-step Adams-Bashforth method of approximation uses the approximation scheme $y_{i+2}=y_{i+1} - 1/2 * hf(t_i,y_i)+ 3/2 * hf(t_{i+1},y_{i+1})$. Given that y(0)=1 and y(1)=2, use the Adams-Bashforth method to approximate y(3) for y=-y^2 with a step size of h=1.", "prediction": -3.5, "answer": -19.875, "rationale": "def solve():\n    # Define the function f(t,y)\n    def f(t,y):\n        return -y**2\n    # Define the step size\n    h = 1\n    # Define the initial values\n    y0 = 1\n    y1 = 2\n    # Use the Adams-Bashforth method to approximate y(3)\n    y2 = y1 - (1/2)*h*f(0,y0) + (3/2)*h*f(1,y1)\n    return y2", "answer_type": "float"}
{"id": "wenhuchen/Adams-Bashforth2.json", "question": "We know that $y'=(x+y) / 2$, we also know that $y(x=0) = 2, y(x=0.5) = 2.636, y(x=1) = 3.595, y(x=1.5) = 4.9868$, what is the value of y(2) using Adams bashforth predictor method.", "prediction": 5.9128, "answer": 6.8731, "rationale": "def solve():\n    # Let's define the function\n    def f(x, y):\n        return (x + y) / 2\n    # Let's define the Adams bashforth predictor method\n    def adams_bashforth_predictor(x, y, h):\n        # define the coefficients\n        c = [3/2, -1/2]\n        # define the previous values\n        y_prev = [2.636, 3.595]\n        # define the previous derivatives\n        f_prev = [f(0, 2), f(0.5, 2.636)]\n        # calculate the predicted value\n        y_pred = y + h * (c[0] * f_prev[1] + c[1] * f_prev[0])\n        return y_pred\n    # calculate the value of y(2)\n    return adams_bashforth_predictor(1.5, 4.9868, 0.5)", "answer_type": "float"}
{"id": "wenhuchen/Aiken's_theorem.json", "question": "The root of the equation x = (1 / 2) + sin x by using the iteration method: x_{k+1} = 1/2 + sin(x_k), x_0 = 1 correct to o six decimals is x = 1.497300. Determine the number of iteration steps required to reach the root by linear iteration. If the Aitken \u22062-process is used after three approximations are available, how many iterations are required?", "prediction": [0, 3], "answer": 3, "rationale": "def solve():\n    # Let's define the function\n    def f(x):\n        return (1/2) + math.sin(x)\n    # Let's define the linear iteration function\n    def linear_iteration(x0, n):\n        x = x0\n        for i in range(n):\n            x = f(x)\n        return x\n    # Let's define the Aitken \u22062-process\n    def aitken_delta2(x0, x1, x2):\n        return x2 - ((x2 - x1)**2) / (x0 - 2*x1 + x2)\n    # Let's calculate the number of iteration steps required to reach the root by linear iteration\n    x0 = 1\n    x = linear_iteration(x0, 100)\n    n = 0\n    while abs(x - 1.497300) > 0.000001:\n        x = linear_iteration(x, 1)\n        n += 1\n    # Let's calculate the number of iterations required if the Aitken \u22062-process is used\n    x0 = linear_iteration(x0, n-2)\n    x1 = linear_iteration(x0, 1)\n    x2 = linear_iteration(x1, 1)\n    x = aitken_delta2(x0, x1, x2)\n    n_aitken = 0\n    while abs(x - 1.497300) > 0.000001:\n        x0 = x1\n        x1 = x2\n        x2 = linear_iteration(x2, 1)\n        x = aitken_delta2(x0, x1, x2)\n        n_aitken += 1\n    return [n, n_aitken]", "answer_type": "integer"}
{"id": "wenhuchen/Birg_vieta1.json", "question": "Use the Birge-Vieta method to find a real root correct to three decimals of the following equation: x^3 - 11x^2 + 32x - 22 = 0, p = 0.5", "prediction": -0.886, "answer": 1, "rationale": "def solve():\n    # Let's define the function\n    def birge_vieta(p):\n        # define the coefficients\n        a = 1\n        b = -11\n        c = 32\n        d = -22\n        # use the Birge-Vieta method\n        x1 = p\n        x2 = (a*x1**3 + b*x1**2 + c*x1 + d) / (3*a*x1**2 + 2*b*x1 + c)\n        x3 = (a*x2**3 + b*x2**2 + c*x2 + d) / (3*a*x2**2 + 2*b*x2 + c)\n        # return the root\n        return round(x3, 3)\n    return birge_vieta(0.5)", "answer_type": "integer"}
{"id": "wenhuchen/Birg_vieta2.json", "question": "Use the Birge-Vieta method to find a real root correct to three decimals of the following equation: x^5 - x + 1 = 0, p=-1.5.", "prediction": -1.1673660372226355, "answer": -1, "rationale": "def solve():\n    # Let's define the function\n    def birge_vieta(p, n):\n        # define the initial values\n        x0 = p\n        x1 = x0 - (x0**n - x0 + 1)/(n*x0**(n-1))\n        # define the loop\n        while abs(x1 - x0) > 0.001:\n            x0 = x1\n            x1 = x0 - (x0**n - x0 + 1)/(n*x0**(n-1))\n        return x1\n    return birge_vieta(-1.5, 5)", "answer_type": "integer"}
{"id": "wenhuchen/De_Moivre's_formula.json", "question": "What is $(\\frac{1 + cos(2x) + i*sin(2x)}{1 + cos(2x) - i*sin(2x)})^30$ with $x = \\pi / 60$?", "prediction": [-0.9999999999999994, 6.661338147750939e-16], "answer": -1.0, "rationale": "def solve():\n    import math\n    # define the given values\n    x = math.pi / 60\n    # calculate the numerator and denominator\n    numerator = 1 + math.cos(2*x) + 1j*math.sin(2*x)\n    denominator = 1 + math.cos(2*x) - 1j*math.sin(2*x)\n    # calculate the power\n    result = (numerator/denominator)**30\n    # return the real and imaginary parts\n    return result.real, result.imag", "answer_type": "float"}
{"id": "wenhuchen/Descartes_Rule_of_Signs.json", "question": "Determine the number of positive real zero of the given function: $f(x)=x^5+4*x^4-3x^2+x-6$.", "prediction": null, "answer": [3, 1], "rationale": "def solve():\n    # Let's define the function\n    def f(x):\n        return x**5 + 4*x**4 - 3*x**2 + x - 6\n    # Let's use the scipy library to find the roots of the function\n    from scipy.optimize import fsolve\n    # Let's find the roots of the function\n    roots = fsolve(f, [0, 1, 2, 3, 4, 5])\n    # Let's filter out the positive real zeros\n    positive_real_zeros = [x for x in roots if x > 0 and x.imag == 0]\n    return len(positive_real_zeros)", "answer_type": "list of integer"}
{"id": "wenhuchen/Fluid_mechanics1.json", "question": "A parachutist with mass m=80 kg is undergoing free fall. The drag force applied on him is $F_D = kv^2$, where v is the velocity measured relative to the air. The constant k=0.27 [Ns^2/m^2] is given. Find the distance traveled h in meters, until v=0.95$v_t$ is achieved, where $v_t$ is the terminal velocity. Return the numeric value.", "prediction": 526.3157894736842, "answer": 345.0, "rationale": "def solve():\n    # Define the constants\n    m = 80 # kg\n    k = 0.27 # Ns^2/m^2\n    vt = (2*m*9.81)/(k*1000) # m/s\n    v = 0.95*vt # m/s\n    # Define the function to calculate the distance\n    def distance(v):\n        return (m*9.81)/(k*v)\n    # Calculate the distance\n    h = distance(v)\n    return h", "answer_type": "float"}
{"id": "wenhuchen/Fluid_mechanics2.json", "question": "A container weighs 3.22 lb force when empty. Filled with water at 60\u00b0F the mass of the container and its contents is 1.95 slugs. Find its volume in cubic feet. Assume density of water = 62.4 lb force/ft3.", "prediction": 0.9546474358974361, "answer": 0.955, "rationale": "def solve():\n    # Let's define the variables\n    m_empty = 3.22 # mass of the container when empty in lb force\n    m_filled = 1.95 # mass of the container and its contents when filled in slugs\n    d_water = 62.4 # density of water in lb force/ft3\n    # Let's calculate the volume of the container\n    volume = (m_filled * 32.2 - m_empty) / d_water\n    return volume # volume of the container in cubic feet", "answer_type": "float"}
{"id": "wenhuchen/Graffe's_root1.json", "question": "Apply the Graeffe's root squaring method to find the roots of the following equation x^3 - 2x + 2 = 0 correct to two decimals. What's the sum of these roots?", "prediction": 0, "answer": 1, "rationale": "def solve():\n    # Let's define the equation\n    def equation(x):\n        return x**3 - 2*x + 2\n    # Let's define the Graeffe's root squaring method\n    def graeffe(x):\n        return equation(x)**2 - 2*(equation(x))**2\n    # Let's find the roots of the equation\n    roots = []\n    for i in range(-100, 100):\n        if graeffe(i) == 0:\n            roots.append(round(i, 2))\n    # Let's calculate the sum of the roots\n    return sum(roots)", "answer_type": "integer"}
{"id": "wenhuchen/Graffe's_root2.json", "question": "Apply the Graeffe's root squaring method to find the roots of the following equation x^3 + 3x^2 - 4 = 0 correct to two decimals. What's the sum of these roots?", "prediction": null, "answer": -3, "rationale": "def solve():\n    # Let's define the equation\n    def equation(x):\n        return x**3 + 3*x**2 - 4\n    # Let's define the Graeffe's root squaring method\n    def graeffe(x):\n        return equation(x)**2 - 2*(equation(x))*(equation(x))\n    # Let's define the function to find the roots\n    def find_roots(x):\n        return round(x - equation(x)/graeffe(x), 2)\n    # Let's find the roots\n    root1 = find_roots(1)\n    root2 = find_roots(root1)\n    root3 = find_roots(root2)\n    # Let's calculate the sum of the roots\n    return root1 + root2 + root3", "answer_type": "integer"}
{"id": "wenhuchen/L'H\u00f4pital_rule1.json", "question": "What is (sin(2x) / x)^(1+x) when x is approaching 0?", "prediction": null, "answer": 2.0, "rationale": "def solve():\n    # Let's define a function to calculate the value\n    def f(x):\n        return (math.sin(2*x) / x)**(1+x)\n    # Let's use the limit definition of the derivative\n    # to calculate the value when x is approaching 0\n    return (f(0.00001) - f(0)) / 0.00001", "answer_type": "float"}
{"id": "wenhuchen/L'H\u00f4pital_rule2.json", "question": "Is the function of f(x) = sin(x) / |x| continuous everywhere?", "prediction": "False", "answer": false, "rationale": "\n\nAt x = 0, the function is not defined. At all other points, the function is continuous. Therefore, the answer is False.", "answer_type": "bool"}
{"id": "wenhuchen/Lagrange's_multiplier1.json", "question": "Find the minimum of $f(x,y)=2x - 5y$, subject to the constraint $x^2+y^2=144$.", "prediction": 2.1989445031557786e+73, "answer": -64.62, "rationale": "def solve():\n    # Let's define the objective function\n    def f(x, y):\n        return 2*x - 5*y\n    # Let's define the constraint\n    def g(x, y):\n        return x**2 + y**2 - 144\n    # Let's define the Lagrangian\n    def L(x, y, lam):\n        return f(x, y) + lam*g(x, y)\n    # Let's define the gradient of the Lagrangian\n    def grad_L(x, y, lam):\n        return np.array([2 - 5*lam, -5 - 2*lam])\n    # Let's define the Hessian of the Lagrangian\n    def hess_L(x, y, lam):\n        return np.array([[2, 0], [0, -2]])\n    # Let's define the Newton's method\n    def newton_method(x, y, lam):\n        grad = grad_L(x, y, lam)\n        hess = hess_L(x, y, lam)\n        inv_hess = np.linalg.inv(hess)\n        delta = np.dot(inv_hess, grad)\n        x_new = x - delta[0]\n        y_new = y - delta[1]\n        lam_new = lam + (g(x_new, y_new) - g(x, y))/(x_new - x)\n        return x_new, y_new, lam_new\n    # Let's set the initial values\n    x = 0\n    y = 12\n    lam = 0\n    # Let's iterate the Newton's method\n    for i in range(100):\n        x, y, lam = newton_method(x, y, lam)\n    return f(x, y)", "answer_type": "float"}
{"id": "wenhuchen/Lagrange's_multiplier2.json", "question": "Find the absolute minimum value of the function $f(x,y)=x^2+y^2$ subject to the constraint $x^2+2*y^2=1$.", "prediction": 8.090394475319094e-120, "answer": 0.5, "rationale": "def solve():\n    # Let's define the objective function\n    def f(x, y):\n        return x**2 + y**2\n    # Let's define the constraint\n    def g(x, y):\n        return x**2 + 2*y**2 - 1\n    # Let's define the Lagrangian\n    def L(x, y, lam):\n        return f(x, y) + lam*g(x, y)\n    # Let's define the gradient of the Lagrangian\n    def grad_L(x, y, lam):\n        return np.array([2*x + 2*lam*x, 2*y + 4*lam*y])\n    # Let's define the Hessian of the Lagrangian\n    def hess_L(x, y, lam):\n        return np.array([[2 + 2*lam, 0], [0, 2 + 8*lam]])\n    # Let's define the Newton's method\n    def newton(x, y, lam):\n        grad = grad_L(x, y, lam)\n        hess = hess_L(x, y, lam)\n        inv_hess = np.linalg.inv(hess)\n        delta = np.dot(inv_hess, grad)\n        x -= delta[0]\n        y -= delta[1]\n        lam -= np.dot(delta, grad_L(x, y, lam))\n        return x, y, lam\n    # Let's set the initial values\n    x = 0.5\n    y = 0.5\n    lam = 0.5\n    # Let's iterate the Newton's method\n    for i in range(100):\n        x, y, lam = newton(x, y, lam)\n    return f(x, y)", "answer_type": "float"}
{"id": "wenhuchen/Lagrange's_theorem.json", "question": "Is there a y bewteen x and x+h such that $sin(x+h) - sinx = h * cos(y)$?", "prediction": "True", "answer": true, "rationale": "\n\nWe can rewrite the equation as $sin(x+h) - sinx = h * cos(y)$ as $sin(x+h) - sinx - h * cos(y) = 0$.\n\nWe can then use the identity $sin(x+h) - sinx = 2sin(\\frac{x+h-x}{2})cos(\\frac{x+h+x}{2})$ to rewrite the equation as $2sin(\\frac{h}{2})cos(\\frac{x+h+x}{2}) - h * cos(y) = 0$.\n\nWe can then solve for $cos(\\frac{x+h+x}{2})$ to get $cos(\\frac{x+h+x}{2}) = \\frac{h * cos(y)}{2sin(\\frac{h}{2})}$.\n\nTherefore, the answer is True.", "answer_type": "bool"}
{"id": "wenhuchen/Liouville\u2019s_theorem1.json", "question": "Let f = u(z) + iv(z) be an entire function in complex plane C. If |u(z)| < M for every z in C, where M is a positive constant, is f is a constant function?", "prediction": "True", "answer": true, "rationale": "\n\nSince f is an entire function, it is continuous and differentiable everywhere in C. This means that the partial derivatives of u and v with respect to x and y must be continuous and differentiable everywhere in C.\n\nNow, since |u(z)| < M for every z in C, this implies that the partial derivatives of u and v with respect to x and y must be bounded.\n\nTherefore, if the partial derivatives of u and v with respect to x and y are bounded, then f must be a constant function.\n\nTherefore, the answer is True.", "answer_type": "bool"}
{"id": "wenhuchen/Liouville\u2019s_theorem2.json", "question": "Let f be an entire function such that |f(z)| $\\geq$ 1 for every z in C. Is f is a constant function?", "prediction": "True", "answer": true, "rationale": " Since f is an entire function, it is analytic everywhere in C. This means that its derivative is zero everywhere in C. Since the derivative of a constant function is zero, it follows that f is a constant function. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "wenhuchen/ODE1.json", "question": "Derive the solution y = f(t) to the following IVP. $ty' - 2y = t^5sin(2t) - t^3 + 4t^4$, where $y(\\pi) = 3\\pi^4/2$. What is y(t) when $t=pi/2$.", "prediction": 146.11363655100362, "answer": 19.095, "rationale": "def solve():\n    # Define the function\n    def f(t):\n        # Use the given initial value\n        y = 3*(math.pi**4)/2\n        # Define the differential equation\n        dy = (t**5*math.sin(2*t) - t**3 + 4*t**4 + 2*y)/t\n        # Use the Euler's method to solve the differential equation\n        while t < math.pi/2:\n            y = y + dy*t\n            dy = (t**5*math.sin(2*t) - t**3 + 4*t**4 + 2*y)/t\n            t = t + 0.01\n        return y\n    return f(math.pi/2)", "answer_type": "float"}
{"id": "wenhuchen/ODE2.json", "question": "Use Euler's Method to calculate the approximation of y(0.2) where y(x) is the solution of the initial-value problem that is as follows. y''+xy'+y=0 and y(0)=2 and y'(0) = 3.", "prediction": 3.0, "answer": 2.58, "rationale": "def solve():\n    # Let's define the function for the differential equation\n    def f(x, y, y_prime):\n        return y_prime + x*y + y\n\n    # Let's define the Euler's Method\n    def euler(x0, y0, y_prime0, h, x):\n        # Initialize the variables\n        x_n = x0\n        y_n = y0\n        y_prime_n = y_prime0\n\n        # Iterate until x_n is equal to x\n        while x_n < x:\n            # Calculate the next values\n            y_n_plus_1 = y_n + h*f(x_n, y_n, y_prime_n)\n            y_prime_n_plus_1 = y_prime_n + h*f(x_n, y_n, y_prime_n)\n\n            # Update the values\n            x_n = x_n + h\n            y_n = y_n_plus_1\n            y_prime_n = y_prime_n_plus_1\n\n        return y_n_plus_1\n\n    # Let's call the Euler's Method\n    return euler(0, 2, 3, 0.2, 0.2)", "answer_type": "float"}
{"id": "wenhuchen/ODE3.json", "question": "Find the solutions to the second order boundary-value problem. y''-2y'+2y=0, y(0)=0, y(\\pi/2) = 1. What is y(\\pi/4)?", "prediction": null, "answer": 0.322, "rationale": "def solve():\n    # Let's define the differential equation\n    def diff_eq(x, y):\n        return [y[1], -2*y[1] + 2*y[0]]\n    # Let's define the boundary conditions\n    bc = [[0, 0], [np.pi/2, 1]]\n    # Let's solve the differential equation\n    x = np.linspace(0, np.pi/2, 100)\n    y = odeint(diff_eq, [0, 0], x, bc)\n    # Let's return the value of y at x = \\pi/4\n    return y[int(len(x)/4)][0]", "answer_type": "float"}
{"id": "wenhuchen/Poisson_process1.json", "question": "Let {N(t), t=[0, \\infty]} be a Poisson process with rate $\\lambda = 5$. Find the probability of no arrivals in [3, 5)", "prediction": 0.006737946999085467, "answer": 0.37, "rationale": "def solve():\n    # Let's define the Poisson probability function\n    def poisson_prob(lam, k):\n        return (lam**k * math.exp(-lam)) / math.factorial(k)\n    # Let's calculate the probability of no arrivals in [3, 5)\n    return poisson_prob(5, 0)", "answer_type": "float"}
{"id": "wenhuchen/Poisson_process2.json", "question": "Let {N(t), t \\in [0, \\infty)} be a Poisson process with rate of $\\lambda = 4$. Find it covariance function $C_N(t1, t2) for t1, t2 \\in [0, \\infy)$. What is C_N(2, 4)?", "prediction": 32, "answer": 8, "rationale": "def solve():\n    # Let's define the covariance function\n    def cov_func(t1, t2):\n        return t1*t2*4\n    return cov_func(2, 4)", "answer_type": "integer"}
{"id": "wenhuchen/Poisson_process3.json", "question": "Let {N(t), t \\in [0, \\infty)} be a Poisson process with rate of $\\lambda = 4$ and $X_1$ be the first arrival time. Given N(t) = 1, then what is $P(X_1 <= t / 2)$?", "prediction": null, "answer": 0.5, "rationale": "def solve():\n    # Let's define the Poisson probability function\n    def poisson_prob(lam, k, t):\n        return (lam**k * math.exp(-lam) * t**(k-1)) / math.factorial(k-1)\n    # Let's calculate the probability\n    return poisson_prob(4, 1, t/2)", "answer_type": "float"}
{"id": "wenhuchen/Poisson_process4.json", "question": "Let $N_1(t)$ and $N_2(t)$ be two independent Posson processes with rate $\\lambda_1 = 1$ and $\\lambda_2 = 2$, respectively. Let N(t) be the merged process N(t) = N_1(t) + N_2(t). Given that N(1) = 2, Find the probability that N_1(1) = 1.", "prediction": 0.0995741367357279, "answer": 0.4444, "rationale": "def solve():\n    # Let's define the probability density function of Posson process\n    def poisson_pdf(k, lam):\n        return (lam**k * np.exp(-lam)) / np.math.factorial(k)\n    # Let's calculate the probability\n    prob = poisson_pdf(1, 1) * poisson_pdf(1, 2)\n    return prob", "answer_type": "float"}
{"id": "wenhuchen/Regula-Falsi.json", "question": "Given the following equation: x - e^{-x} = 0. determine the initial approximations for finding the smallest positive root. Use these to find the root correct to three decimal places with Regula-Falsi method.", "prediction": 0.567, "answer": 0.567, "rationale": "def solve():\n    # Let's define the equation\n    def equation(x):\n        return x - math.exp(-x)\n    # Let's define the initial approximations\n    x0 = 0\n    x1 = 1\n    # Let's define the Regula-Falsi method\n    def regula_falsi(x0, x1):\n        x2 = x1 - equation(x1)*(x1 - x0)/(equation(x1) - equation(x0))\n        return x2\n    # Let's find the root correct to three decimal places\n    x2 = regula_falsi(x0, x1)\n    x3 = regula_falsi(x1, x2)\n    x4 = regula_falsi(x2, x3)\n    return round(x4, 3)", "answer_type": "float"}
{"id": "wenhuchen/Rolle's_theorem.json", "question": "for a given function f(x)=x^2*sin(x). Is there a value $x$ between 10pi and 11pi such that $f'(x) = 0$?", "prediction": "False", "answer": true, "rationale": "\n\nFirst, we need to calculate the derivative of the given function:\n\n$f'(x) = 2xsin(x) + x^2cos(x)$\n\nNow, we need to find the value of $x$ such that $f'(x) = 0$.\n\n$2xsin(x) + x^2cos(x) = 0$\n\n$2xsin(x) = -x^2cos(x)$\n\n$\\frac{2xsin(x)}{-x^2} = cos(x)$\n\n$\\frac{2sin(x)}{-x} = cos(x)$\n\n$2sin(x) = -xcos(x)$\n\n$2sin(x) + xcos(x) = 0$\n\n$x(2sin(x) + cos(x)) = 0$\n\n$x = 0$ or $2sin(x) + cos(x) = 0$\n\nNow, we need to check if there is a value of $x$ between 10pi and 11pi such that $2sin(x) + cos(x) = 0$.\n\nWe can solve this equation using a graphing calculator. The graph of the equation shows that there is no value of $x$ between 10pi and 11pi such that $2sin(x) + cos(x) = 0$.\n\nTherefore, the answer is False.", "answer_type": "bool"}
{"id": "wenhuchen/Runge-Kutta_Method1.json", "question": "Use the Runge-Kutta method with $h=0.1$ to find approximate values for the solution of the initial value problem $y' + 2y = x^3e^{-2x}$ with y(0)=1 at $x=0.2$.", "prediction": 0.818753802828079, "answer": 0.6705, "rationale": "def solve():\n    # Define the function\n    def f(x, y):\n        return x**3 * math.exp(-2*x) - 2*y\n\n    # Define the initial values\n    x0 = 0\n    y0 = 1\n    h = 0.1\n\n    # Define the Runge-Kutta method\n    def runge_kutta(x0, y0, h):\n        k1 = h * f(x0, y0)\n        k2 = h * f(x0 + 0.5*h, y0 + 0.5*k1)\n        k3 = h * f(x0 + 0.5*h, y0 + 0.5*k2)\n        k4 = h * f(x0 + h, y0 + k3)\n\n        y1 = y0 + (1/6)*(k1 + 2*k2 + 2*k3 + k4)\n        return y1\n\n    # Calculate the approximate value\n    y1 = runge_kutta(x0, y0, h)\n    return y1", "answer_type": "float"}
{"id": "wenhuchen/Runge-Kutta_Method2.json", "question": "Use the Runge-Kutta method with $h=0.1$ to find approximate values of the solution of $(y-1)^2 * y' = 2x + 3$ with y(1) = 4. What is y(0)?", "prediction": 2.8802390258160333, "answer": 3.46621207, "rationale": "def solve():\n    # Let's define the Runge-Kutta function\n    def runge_kutta(x, y, h):\n        k1 = h * (2 * x + 3 - (y - 1)**2)\n        k2 = h * (2 * (x + h/2) + 3 - (y + k1/2 - 1)**2)\n        k3 = h * (2 * (x + h/2) + 3 - (y + k2/2 - 1)**2)\n        k4 = h * (2 * (x + h) + 3 - (y + k3 - 1)**2)\n        y_next = y + (k1 + 2 * k2 + 2 * k3 + k4) / 6\n        return y_next\n    # Let's define the initial values\n    x = 1\n    y = 4\n    h = 0.1\n    # Let's iterate the Runge-Kutta function\n    while x > 0:\n        y = runge_kutta(x, y, h)\n        x -= h\n    return y", "answer_type": "float"}
{"id": "wenhuchen/Schwarz_lemma1.json", "question": "Suppose f is analytic on the closed unit disk, f(0) = 0, and |f(z)| $\\leq$ |e^z| whenever |z| = 1. How big can f((1 + i)/2) be? Return a numerical number.", "prediction": null, "answer": 1.9221, "rationale": "def solve():\n    # Let's define the function f\n    def f(z):\n        return z\n    # Let's define the function e^z\n    def e_z(z):\n        return math.exp(z)\n    # Let's define the value of z\n    z = (1 + 1j)/2\n    # Let's calculate the value of f(z)\n    f_z = f(z)\n    # Let's calculate the value of e^z\n    e_z = e_z(z)\n    # Let's calculate the maximum value of f(z)\n    max_f_z = max(abs(f_z), abs(e_z))\n    return max_f_z", "answer_type": "float"}
{"id": "wenhuchen/Schwarz_lemma2.json", "question": "Suppose that f is analytic on the closed unit disk, f(0) = 0, and $|Rf(z)| \\leq |e^z|$ for |z| < 1. What's the maximum value of f((1 + i)/2)?", "prediction": null, "answer": 17.95, "rationale": "def solve():\n    # Let's define a function to calculate the maximum value of f((1 + i)/2)\n    def max_value(f):\n        # define the maximum value\n        max_val = 0\n        # define the radius\n        r = 1\n        # define the step size\n        step = 0.01\n        # loop through the unit disk\n        for theta in range(0, 360, step):\n            # calculate the x and y coordinates\n            x = r * math.cos(theta)\n            y = r * math.sin(theta)\n            # calculate the value of f at the point\n            val = f(x + y*1j)\n            # update the maximum value\n            if abs(val) > max_val:\n                max_val = abs(val)\n        return max_val\n    return max_value(lambda z: z**2)", "answer_type": "float"}
{"id": "wenhuchen/Simpson's_rule1.json", "question": "Using n=6 approximate the value of $\\int_{-1}^2 \\sqrt{e^{-x^2} + 1} dx$ using the Simpson's rule.", "prediction": 3.7035814477099316, "answer": 3.70358145, "rationale": "def solve():\n    # Let's define the function\n    def f(x):\n        return np.sqrt(np.exp(-x**2) + 1)\n    # Let's define the Simpson's rule\n    def simpson(f, a, b, n):\n        h = (b - a) / n\n        s = f(a) + f(b)\n        for i in range(1, n, 2):\n            s += 4 * f(a + i * h)\n        for i in range(2, n-1, 2):\n            s += 2 * f(a + i * h)\n        return s * h / 3\n    return simpson(f, -1, 2, 6)", "answer_type": "float"}
{"id": "wenhuchen/Simpson's_rule2.json", "question": "Using n=8 approximate the value of $\\int_{0}^4 cos(1 + \\sqrt{x}) dx$ using the Simpson's rule.", "prediction": -2.471601362944378, "answer": -2.47160136, "rationale": "def solve():\n    # Let's define the function to be integrated\n    def f(x):\n        return np.cos(1 + np.sqrt(x))\n    # Let's define the Simpson's rule\n    def simpson(f, a, b, n):\n        h = (b - a) / n\n        s = f(a) + f(b)\n        for i in range(1, n, 2):\n            s += 4 * f(a + i * h)\n        for i in range(2, n-1, 2):\n            s += 2 * f(a + i * h)\n        return s * h / 3\n    return simpson(f, 0, 4, 8)", "answer_type": "float"}
{"id": "wenhuchen/Sturm.json", "question": "Obtain the number of real roots between 0 and 3 of the equation P(x) = x^4 -4x^3 + 3x^2 + 4x - 4 = 0 using Sturm's sequence.", "prediction": null, "answer": 2, "rationale": "def solve():\n    # Let's define the polynomial P(x)\n    def P(x):\n        return x**4 - 4*x**3 + 3*x**2 + 4*x - 4\n    # Let's define the Sturm's sequence\n    def sturm_seq(P, a, b):\n        # define the first two polynomials\n        P0 = P(a)\n        P1 = P(b)\n        # define the sequence\n        seq = [P0, P1]\n        # define the loop\n        for i in range(2, 100):\n            # define the next polynomial\n            P2 = -(P0 % P1)\n            # append the polynomial to the sequence\n            seq.append(P2)\n            # update the polynomials\n            P0 = P1\n            P1 = P2\n        return seq\n    # Let's define the number of real roots\n    def num_real_roots(seq):\n        # define the counter\n        cnt = 0\n        # define the loop\n        for i in range(len(seq)):\n            # check if the polynomial is positive or negative\n            if seq[i] > 0:\n                cnt += 1\n            elif seq[i] < 0:\n                cnt -= 1\n        return cnt\n    # Let's call the functions\n    seq = sturm_seq(P, 0, 3)\n    return num_real_roots(seq)", "answer_type": "integer"}
{"id": "wenhuchen/area.json", "question": "Compute the are of that part of the helicoid z = arctan(y/x) which lies in the first octant between the cylinder $x^2+y^2 = 1^2$ and $x^2+y^2 = 2^2$.", "prediction": null, "answer": 2.843, "rationale": "def solve():\n    # Let's define the function to calculate the area\n    def area(x, y):\n        return (x * y)\n    # Let's define the limits of integration\n    x_min = 1\n    x_max = 2\n    y_min = 0\n    y_max = 1\n    # Let's define the step size\n    step_size = 0.001\n    # Let's define the area\n    area = 0\n    # Let's iterate over the x and y values\n    for x in range(x_min, x_max, step_size):\n        for y in range(y_min, y_max, step_size):\n            # Let's calculate the area\n            area += area(x, y)\n    return area", "answer_type": "float"}
{"id": "wenhuchen/binomial.json", "question": "What is the coefficient of $x^2y^5$ for the formula $(x + 2y)^7$?", "prediction": 672, "answer": 672, "rationale": "def solve():\n    # Let's use the binomial theorem\n    # The coefficient of $x^2y^5$ is the 7th coefficient of the expansion of $(x + 2y)^7$\n    # The 7th coefficient is equal to $\\binom{7}{2} \\cdot 2^5$\n    return int(math.factorial(7) / (math.factorial(2) * math.factorial(5))) * (2**5)", "answer_type": "integer"}
{"id": "wenhuchen/bisection1.json", "question": "Find the interval in which the smallest positive root of the following equations lies: tan x + tanh x = 0. Determine the roots correct to two decimal places using the bisection method", "prediction": null, "answer": 2.37, "rationale": "def solve():\n    # Let's define the function\n    def f(x):\n        return tan(x) + tanh(x)\n    # Let's define the bisection method\n    def bisection(a, b):\n        # Let's define the tolerance\n        tol = 0.01\n        # Let's define the midpoint\n        mid = (a + b) / 2\n        # Let's check if the midpoint is the root\n        if f(mid) == 0 or abs(a - b) < tol:\n            return mid\n        # Let's check if the midpoint is in the left or right interval\n        elif f(mid) > 0:\n            return bisection(a, mid)\n        else:\n            return bisection(mid, b)\n    # Let's define the interval\n    a = 0\n    b = pi/2\n    # Let's call the bisection method\n    return bisection(a, b)", "answer_type": "float"}
{"id": "wenhuchen/bisection2.json", "question": "Find the interval in which the smallest positive root of the following equations lies: x^3 - x - 4 = 0. Determine the roots correct to two decimal places using the bisection method", "prediction": 1.79296875, "answer": 1.8, "rationale": "def solve():\n    # Let's define the function\n    def f(x):\n        return x**3 - x - 4\n    # Let's define the bisection method\n    def bisection(a, b):\n        # Let's define the tolerance\n        tol = 0.01\n        # Let's define the midpoint\n        mid = (a + b) / 2\n        # Let's check if the midpoint is the root\n        if f(mid) == 0 or abs(a - b) < tol:\n            return mid\n        # Let's check if the midpoint is greater than 0\n        elif f(mid) > 0:\n            return bisection(a, mid)\n        # Let's check if the midpoint is less than 0\n        elif f(mid) < 0:\n            return bisection(mid, b)\n    # Let's define the interval\n    a = 0\n    b = 4\n    # Let's call the bisection method\n    return bisection(a, b)", "answer_type": "float"}
{"id": "wenhuchen/cauchy_integral1.json", "question": "Evaluate $\\int_c z^2 / (z - 5) dz$, where c is the circle that $|z| = 2$.", "prediction": -1.9047619047619047, "answer": 0, "rationale": "def solve():\n    # Let's define the function\n    def f(z):\n        return z**2 / (z - 5)\n    # Let's define the circle\n    c = [z for z in range(-2, 3) if abs(z) == 2]\n    # Let's define the integral\n    integral = 0\n    for z in c:\n        integral += f(z)\n    return integral", "answer_type": "integer"}
{"id": "wenhuchen/cauchy_integral2.json", "question": "Evaluate $\\int_c 1 / (z^ + 4)^2 dz$ over the contour. This contour is a circle centered at (0, i) with a diameter of 3 on the (Re, Im) plane, the contour goes counter-clockwise.", "prediction": null, "answer": 0.19634, "rationale": "def solve():\n    # Let's define the function\n    def f(z):\n        return 1 / (z + 4)**2\n    # Let's define the contour\n    c = np.linspace(0, 3, 100) + 1j * np.linspace(0, 3, 100)\n    # Let's evaluate the integral\n    return np.sum(f(c) * np.diff(c))", "answer_type": "float"}
{"id": "wenhuchen/cauchy_integral3.json", "question": "Compute the real integral $I=\\int_{-\\infty}^{\\infty} 1/(x^2 + 1)^2 dx$.", "prediction": null, "answer": 1.57, "rationale": "def solve():\n    # Let's define the function\n    def f(x):\n        return 1/(x**2 + 1)**2\n    # Let's define the integral\n    from scipy.integrate import quad\n    I, err = quad(f, -float('inf'), float('inf'))\n    return I", "answer_type": "float"}
{"id": "wenhuchen/cauchy_residue1.json", "question": "Compute $\\int_{|z| = 2} (5z - 2) / (z * (z - 1)) dz$. The answer is Ai with i denoting the imaginary unit, what is A?", "prediction": null, "answer": 31.4, "rationale": "def solve():\n    # Let's define the function\n    def f(z):\n        return (5*z - 2) / (z * (z - 1))\n    # Let's define the integral\n    def integral(f, z, r):\n        # Let's define the step size\n        h = 0.001\n        # Let's define the initial value\n        s = 0\n        # Let's define the loop\n        for k in range(1, int(r/h)):\n            s += h * (f(z + k*h) + f(z + (k-1)*h))/2\n        return s\n    # Let's define the radius\n    r = 2\n    # Let's define the answer\n    A = integral(f, 0, r)\n    return A", "answer_type": "float"}
{"id": "wenhuchen/cauchy_residue2.json", "question": "Compute $\\int_{|z| = 1} z^2 sin(1/z) dz$. The answer is Ai with i denoting the imaginary unit, what is A?", "prediction": 0.0, "answer": -1.047, "rationale": "def solve():\n    # Let's define the integral function\n    def integral(z):\n        return z**2 * np.sin(1/z)\n    # Let's define the integration range\n    r = np.linspace(0, 2*np.pi, 1000)\n    # Let's compute the integral\n    A = np.trapz(integral(np.exp(1j*r)), r)\n    return A.real", "answer_type": "float"}
{"id": "wenhuchen/cauchy_residue3.json", "question": "Compute $\\int_C dz / (z * (z-2)^2)dz$, where C: |z - 2| = 1. The answer is Ai with i denoting the imaginary unit, what is A?", "prediction": null, "answer": -0.3926, "rationale": "def solve():\n    # Let's define the integral function\n    def integral(z):\n        return 1/(z*(z-2)**2)\n    # Let's define the contour integral\n    def contour_integral(z):\n        return integral(z)*1j\n    # Let's define the contour\n    def contour(z):\n        return abs(z-2) - 1\n    # Let's define the integral\n    def solve_integral():\n        return integrate.quad(contour_integral, 0, 2*np.pi)[0]\n    return solve_integral()/2j", "answer_type": "float"}
{"id": "wenhuchen/cauchy_riemann1.json", "question": "Determine values of the real numbers a, b, and c to make the function $x^2 + ay^2 + y + i(bxy + cx)$ by an analytical function of the complex variable of $x+iy$? Return your answer as a list [a, b, c].", "prediction": [-1, 0, 0], "answer": [-1, 2, -1], "rationale": "def solve():\n    # Let's define the function\n    def f(x, y):\n        return x**2 + a*y**2 + y + 1j*(b*x*y + c*x)\n    # Let's solve for a, b, and c\n    a = -1\n    b = 0\n    c = 0\n    return [a, b, c]", "answer_type": "list of integer"}
{"id": "wenhuchen/cauchy_riemann2.json", "question": "If $u(x, y) = 4x^3y - 4xy^3$, is there a function v(x, y) such that u(x,y) + iv(x,y) is an analytical function?", "prediction": "True", "answer": true, "rationale": " First, we need to check if u(x,y) is an analytical function. An analytical function is a function that can be expressed as a power series in both x and y. Since u(x,y) is a polynomial, it is an analytical function.\n\nNext, we need to check if u(x,y) + iv(x,y) is an analytical function. Since u(x,y) is an analytical function, if v(x,y) is also an analytical function, then u(x,y) + iv(x,y) is an analytical function.\n\nTherefore, the answer is True.", "answer_type": "bool"}
{"id": "wenhuchen/cauchy_riemann3.json", "question": "Suppose f is an analytic function defined on $\\{z \\in C : IM(z) > 0\\}$, the upper half plane. Given the information that f(f(z)) = z and f'(z) = 1/z^2 for every z. Find the most general possible expression of f(z). What is f(2)?", "prediction": 4, "answer": -0.5, "rationale": "def solve():\n    # Let's define the function f\n    def f(z):\n        # use the given information\n        return z**2\n    # Let's find the most general possible expression of f(z)\n    # f(z) = z^2 + c\n    # where c is a constant\n    # Let's find the value of c\n    # f(f(z)) = z\n    # f(z^2 + c) = z\n    # z^2 + c = z\n    # c = -z^2\n    # Therefore, the most general possible expression of f(z) is\n    # f(z) = z^2 - z^2\n    # f(z) = 0\n    # Let's find the value of f(2)\n    return f(2)", "answer_type": "float"}
{"id": "wenhuchen/cauchy_riemann4.json", "question": "If u is the real part of a function, and v is the imaginary part, then the Cauchy-Riemann equations for u and v take the following form in polar coordinates: r\\frac{\\partial u}{\\partial r} = \\frac{\\partial v}{\\partial \\theta} and r\\frac{\\partial v}{\\partial r} = -\\frac{\\partial u}{\\partial \\theta}. Is this argument True or False?", "prediction": "True", "answer": true, "rationale": " The Cauchy-Riemann equations for u and v in polar coordinates are r\\frac{\\partial u}{\\partial r} = \\frac{\\partial v}{\\partial \\theta} and r\\frac{\\partial v}{\\partial r} = -\\frac{\\partial u}{\\partial \\theta}. This statement is true. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "wenhuchen/chain_rule1.json", "question": "If z = arctan(e^{1 + (1 + x)^2}), what's the derivative of $\\frac{\\partial z}{\\partial x}$ at x = 0.", "prediction": 0.2658022288340797, "answer": 0.3017, "rationale": "def solve():\n    # Let's define the function\n    def f(x):\n        return np.arctan(np.exp(1 + (1 + x)**2))\n    # Let's define the derivative of the function\n    def f_derivative(x):\n        return (2*np.exp(1 + (1 + x)**2)*(1 + x))/(np.exp(2*(1 + (1 + x)**2)) + 1)\n    # Let's calculate the derivative at x = 0\n    return f_derivative(0)", "answer_type": "float"}
{"id": "wenhuchen/chain_rule2.json", "question": "If z = \\frac{1 + e^{-2x}}{x + tan(12x)}, what's the derivative of $\\frac{\\partial z}{\\partial x}$ at $x = 1$.", "prediction": -50.847927915510304, "answer": -153.59, "rationale": "def solve():\n    # Let's define the function\n    def z(x):\n        return (1 + np.exp(-2*x))/(x + np.tan(12*x))\n    # Let's define the derivative of the function\n    def dz(x):\n        return (-2*np.exp(-2*x)*(x + np.tan(12*x)) - (1 + np.exp(-2*x))*(1 + 12*np.tan(12*x)**2))/(x + np.tan(12*x))**2\n    return dz(1)", "answer_type": "float"}
{"id": "wenhuchen/chebyshev1.json", "question": "Suppose a fair coin is tossed 50 times. The bound on the probability that the number of heads will be greater than 35 or less than 15 can be found using Chebyshev's Inequality. What is the upper bound of the probability?", "prediction": 0.8, "answer": 0.125, "rationale": "def solve():\n    # Let's define the mean and variance\n    mean = 50/2\n    variance = 25\n    # Let's calculate the upper bound of the probability using Chebyshev's Inequality\n    upper_bound = 1 - (variance/(variance + (mean - 35)**2))\n    return upper_bound", "answer_type": "float"}
{"id": "wenhuchen/chebyshev2.json", "question": "What is the smallest number of standard deviations from the mean that we must go if we want to ensure that we have at least 50% of the data of a distribution?", "prediction": null, "answer": 1.4, "rationale": "def solve():\n    # Let's define the standard deviation function\n    def standard_deviation(data):\n        # calculate the mean of the data\n        mean = sum(data) / len(data)\n        # calculate the variance\n        variance = sum([(x - mean)**2 for x in data]) / len(data)\n        # calculate the standard deviation\n        sd = variance**0.5\n        return sd\n    # Let's define the function to calculate the number of standard deviations\n    def num_std_dev(data, percentage):\n        # calculate the mean of the data\n        mean = sum(data) / len(data)\n        # calculate the standard deviation\n        sd = standard_deviation(data)\n        # calculate the number of standard deviations\n        num_std_dev = (percentage * mean) / sd\n        return num_std_dev\n    return num_std_dev(data, 0.5)", "answer_type": "float"}
{"id": "wenhuchen/circular1.json", "question": "ABCD is a square. Inscribed Circle center is O. Find the the angle of \u2220AMK. Return the numeric value.", "prediction": 90.0, "answer": 130.9, "rationale": "def solve():\n    # Let's define the angle of \u2220AMK\n    angle_AMK = 360/4 # since ABCD is a square, the angle of \u2220AMK is 360/4\n    return angle_AMK", "answer_type": "float"}
{"id": "wenhuchen/circular2.json", "question": "Tangent Circle at C. AB: common tangent. \u2220OQB=112. What is \u2220BAC? Return the numeric value.", "prediction": 55, "answer": 34.0, "rationale": "def solve():\n    # Let's define the angle BAC\n    angle_BAC = 180 - 112\n    return angle_BAC\ndef solve():\n    # Let's write the program step by step\n    # Let's define a function to calculate the sum\n    def sum_natural_numbers(n):\n        # define the base case\n        if n == 1:\n            return 1\n        else:\n            # use the recursive formula\n            return n + sum_natural_numbers(n-1)\n    return sum_natural_numbers(10)", "answer_type": "float"}
{"id": "wenhuchen/compound_interest1.json", "question": "A teacher wants to invest $30,000 into an account that compounds annually. The interest rate at this bank is 1.8%. How much money will be in the account after 6 years?", "prediction": 33389.34678034261, "answer": 33389.35, "rationale": "def solve():\n    # Let's define the function to calculate the amount after 6 years\n    def calculate_amount(principal, rate, time):\n        # use the formula for compound interest\n        amount = principal * (1 + rate/100)**time\n        return amount\n    return calculate_amount(30000, 1.8, 6)", "answer_type": "float"}
{"id": "wenhuchen/compound_interest2.json", "question": "Calculate the interest rate (between 0 and 1) for an account that started with $5,000 and now has $13,000 and has been compounded annually for the past 12 years. Answer with the numeric value.", "prediction": 0.08288194398431958, "answer": 0.0828, "rationale": "def solve():\n    # Let's define the variables\n    P = 5000 # initial amount\n    F = 13000 # final amount\n    n = 12 # number of years\n    # Let's calculate the interest rate\n    r = (F/P)**(1/n) - 1\n    return r", "answer_type": "float"}
{"id": "wenhuchen/covariance1.json", "question": "Compute covariance of x=(1,2,3,4), y=(2,3,4,5)", "prediction": 1.6666666666666667, "answer": 1.67, "rationale": "def solve():\n    # Let's define the function to compute covariance\n    def covariance(x, y):\n        # Let's calculate the mean of x and y\n        x_mean = sum(x) / len(x)\n        y_mean = sum(y) / len(y)\n        # Let's calculate the covariance\n        cov = 0\n        for i in range(len(x)):\n            cov += (x[i] - x_mean) * (y[i] - y_mean)\n        return cov / (len(x) - 1)\n    # Let's define the x and y\n    x = [1,2,3,4]\n    y = [2,3,4,5]\n    return covariance(x, y)", "answer_type": "float"}
{"id": "wenhuchen/covariance2.json", "question": "Assuming $x$ and $y$ are both 2-d random variable. The covariance matrix of $x=((1,2),(2,3),(3,5),(4,4))$, $y=((3,4),(1,5),(5,3),(3,3))$ is $Cov$. What is the trace of $Cov$?", "prediction": 13.5, "answer": -0.166, "rationale": "def solve():\n    # Let's define the covariance matrix\n    x = np.array([[1,2],[2,3],[3,5],[4,4]])\n    y = np.array([[3,4],[1,5],[5,3],[3,3]])\n    cov = np.cov(x,y)\n    # Let's calculate the trace of the covariance matrix\n    trace = np.trace(cov)\n    return trace", "answer_type": "float"}
{"id": "wenhuchen/covariance3.json", "question": "Assuming $x$ and $y$ are both 2-d random variable. The covariance matrix of $x=((1,2),(2,3),(3,3),(4,4))$, $y=((3,4),(1,5),(5,3),(3,3))$ is $Cov$. What is summation of the eigenvalue of $Cov$?", "prediction": 11.5, "answer": 2.767, "rationale": "def solve():\n    # Let's import the necessary libraries\n    import numpy as np\n    # Let's define the x and y\n    x = np.array([[1,2],[2,3],[3,3],[4,4]])\n    y = np.array([[3,4],[1,5],[5,3],[3,3]])\n    # Let's calculate the covariance matrix\n    cov = np.cov(x,y)\n    # Let's calculate the eigenvalues\n    eig_val, eig_vec = np.linalg.eig(cov)\n    # Let's calculate the summation of the eigenvalues\n    summation = np.sum(eig_val)\n    return summation", "answer_type": "float"}
{"id": "wenhuchen/cramer's_rule1.json", "question": "For the two linear equations $2 * x + 3 * y = 10$ and $4 * x + 4 * y = 12$ iwth variables x and y. Use cramer's rule to solve these two variables.", "prediction": [-1.0, 4.0], "answer": [-1, 4], "rationale": "def solve():\n    # Let's define the cramer's rule function\n    def cramer_rule(a, b, c, d, e, f):\n        # calculate the determinant\n        det = a * d - b * c\n        # calculate the x and y\n        x = (e * d - b * f) / det\n        y = (a * f - e * c) / det\n        return x, y\n    # Let's call the cramer's rule function\n    x, y = cramer_rule(2, 3, 4, 4, 10, 12)\n    return x, y", "answer_type": "list of integer"}
{"id": "wenhuchen/cramer's_rule2.json", "question": "For the two linear equations $2 * x + 3 * y + z = 8$ and $4 * x + 4 * y + 4z = 12$ and $x + y + 8z = 10$ with variables x, y and z. Use cramer's rule to solve these three variables.", "prediction": null, "answer": [-1, 3, 1], "rationale": "def solve():\n    # Let's define a function to calculate the determinant of a 3x3 matrix\n    def det3x3(matrix):\n        # define the determinant\n        det = matrix[0][0] * (matrix[1][1] * matrix[2][2] - matrix[1][2] * matrix[2][1]) - matrix[0][1] * (matrix[1][0] * matrix[2][2] - matrix[1][2] * matrix[2][0]) + matrix[0][2] * (matrix[1][0] * matrix[2][1] - matrix[1][1] * matrix[2][0])\n        return det\n    # Let's define a function to calculate the value of x, y and z using cramer's rule\n    def cramer(matrix, b):\n        # calculate the determinant of the matrix\n        det = det3x3(matrix)\n        # calculate the determinant of the matrix with x replaced by b\n        det_x = det3x3([[b, matrix[0][1], matrix[0][2]], [matrix[1][0], matrix[1][1], matrix[1][2]], [matrix[2][0], matrix[2][1], matrix[2][2]]])\n        # calculate the determinant of the matrix with y replaced by b\n        det_y = det3x3([[matrix[0][0], b, matrix[0][2]], [matrix[1][0], matrix[1][1], matrix[1][2]], [matrix[2][0], matrix[2][1], matrix[2][2]]])\n        # calculate the determinant of the matrix with z replaced by b\n        det_z = det3x3([[matrix[0][0], matrix[0][1], b], [matrix[1][0], matrix[1][1], matrix[1][2]], [matrix[2][0], matrix[2][1], matrix[2][2]]])\n        # calculate the value of x, y and z\n        x = det_x / det\n        y = det_y / det\n        z = det_z / det\n        return [x, y, z]\n    # define the matrix\n    matrix = [[2, 3, 1], [4, 4, 4], [1, 1, 8]]\n    # define the b vector\n    b = [8, 12, 10]\n    # calculate the value of x, y and z\n    return cramer(matrix, b)", "answer_type": "list of integer"}
{"id": "wenhuchen/curvature1.json", "question": "Find the curvature for r(t) = 5cos(t)i + 4sin(t)j + 3tk, t=4\\pi/3.", "prediction": null, "answer": 0.16, "rationale": "def solve():\n    # Define the function r(t)\n    def r(t):\n        return 5*math.cos(t) + 4*math.sin(t) + 3*t*k\n    # Calculate the derivatives of r(t)\n    r_t = -5*math.sin(t) + 4*math.cos(t) + 3*k\n    r_tt = -5*math.cos(t) - 4*math.sin(t)\n    # Calculate the curvature\n    t = 4*math.pi/3\n    k = (r_t*r_tt)/(math.pow(math.pow(r_t,2)+math.pow(r_tt,2),3/2))\n    return k", "answer_type": "float"}
{"id": "wenhuchen/curvature2.json", "question": "Find the curvature for f(x) = \\sqrt{4x - x^2}, x = 2.", "prediction": 0.0, "answer": 0.5, "rationale": "def solve():\n    # Define the function\n    def f(x):\n        return (4*x - x**2)**(1/2)\n    # Calculate the first derivative\n    def f_prime(x):\n        return (2 - x)/(2*(4*x - x**2)**(1/2))\n    # Calculate the second derivative\n    def f_prime_prime(x):\n        return (2*x - 4)/(4*(4*x - x**2)**(3/2))\n    # Calculate the curvature\n    def curvature(x):\n        return (f_prime_prime(x))/(1 + f_prime(x)**2)**(3/2)\n    return curvature(2)", "answer_type": "float"}
{"id": "wenhuchen/curvature3.json", "question": "If r(t) = (6t+2)i + 5t^2j - 8tk, find the Binormal vector as [xi, yj, zk]. What are x, y, z? Return them as a list.", "prediction": null, "answer": [0.8, 0.0, 0.6], "rationale": "def solve():\n    # Let's define the Binormal vector\n    def binormal_vector(t):\n        x = -6*t - 2\n        y = 10*t\n        z = -8\n        return [x, y, z]\n    return binormal_vector(t)", "answer_type": "list of float"}
{"id": "wenhuchen/definite_matrix1.json", "question": "Consider the matrix of A=[[1, 4], [4, 1]], is this a positive definite matrix?", "prediction": "False", "answer": false, "rationale": " First, we need to calculate the determinant of the matrix A. The determinant of A is -15. Then, we need to check if the determinant is greater than 0. Since the determinant of A is -15, which is less than 0, the matrix A is not a positive definite matrix. Therefore, the answer is False.", "answer_type": "bool"}
{"id": "wenhuchen/definite_matrix2.json", "question": "Consider the matrix of A=[[1, -1], [-1, 4]], is this a positive definite matrix?", "prediction": "True", "answer": true, "rationale": " First, we need to calculate the determinant of the matrix A. The determinant of A is 5. Then, we need to calculate the eigenvalues of the matrix A. The eigenvalues of A are 3 and 2. Since both of the eigenvalues are positive, the matrix A is a positive definite matrix. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "wenhuchen/derivative2.json", "question": "Does the function $y=xe^{-x^2/2}$, does it satisfy the equation $xy' = (1 - x^2)y$", "prediction": "True", "answer": true, "rationale": "\n\nFirst, we need to differentiate the function $y=xe^{-x^2/2}$ with respect to $x$.\n\n$y' = e^{-x^2/2} - x^2e^{-x^2/2}$\n\nThen, we need to substitute the derivative of $y$ into the equation $xy' = (1 - x^2)y$.\n\n$xy' = xe^{-x^2/2} - x^3e^{-x^2/2} = (1 - x^2)xe^{-x^2/2}$\n\nFinally, we need to simplify the equation.\n\n$xe^{-x^2/2} = xe^{-x^2/2}$\n\nTherefore, the answer is True.", "answer_type": "bool"}
{"id": "wenhuchen/derivative3.json", "question": "If $x=4*cost(t)$ and $y=8*sin(x)$, what is $y{''}_{xx}$ at t=pi/3?", "prediction": -94.13840853228402, "answer": -4.0, "rationale": "def solve():\n    import math\n    # Define the function\n    def f(t):\n        x = 4 * math.cos(t)\n        y = 8 * math.sin(x)\n        return y\n    # Define the first derivative\n    def f_prime(t):\n        x = 4 * math.cos(t)\n        y_prime = -32 * math.sin(t) * math.cos(x)\n        return y_prime\n    # Define the second derivative\n    def f_prime_prime(t):\n        x = 4 * math.cos(t)\n        y_prime_prime = -32 * math.cos(t) * math.cos(x) - 128 * math.sin(t) * math.sin(x)\n        return y_prime_prime\n    # Return the answer\n    return f_prime_prime(math.pi/3)", "answer_type": "float"}
{"id": "wenhuchen/determinant1.json", "question": "For matrix A = [[2, 4, 3], [3, 0, 1], [1, 2, 5]], what is its determinant?", "prediction": -42, "answer": -42, "rationale": "def solve():\n    # Let's define a function to calculate the determinant of a matrix\n    def determinant(A):\n        # define the base case\n        if len(A) == 2:\n            return A[0][0]*A[1][1] - A[0][1]*A[1][0]\n        else:\n            # use the recursive formula\n            det = 0\n            for i in range(len(A)):\n                det += (-1)**i * A[0][i] * determinant(get_minor(A, 0, i))\n            return det\n    # define a function to get the minor of a matrix\n    def get_minor(A, i, j):\n        return [row[:j] + row[j+1:] for row in (A[:i]+A[i+1:])]\n    # define the matrix\n    A = [[2, 4, 3], [3, 0, 1], [1, 2, 5]]\n    return determinant(A)", "answer_type": "integer"}
{"id": "wenhuchen/determinant2.json", "question": "For matrix A = [[2, 4, 3], [3, 3, 1], [42, 20, 51]], what is its determinant?", "prediction": -376, "answer": -376, "rationale": "def solve():\n    # Let's define a function to calculate the determinant of a matrix\n    def determinant(A):\n        # define the base case\n        if len(A) == 2:\n            return A[0][0]*A[1][1] - A[0][1]*A[1][0]\n        else:\n            # use the formula to calculate the determinant\n            det = 0\n            for i in range(len(A)):\n                det += (-1)**i * A[0][i] * determinant(get_minor(A, 0, i))\n            return det\n    # define a function to get the minor of a matrix\n    def get_minor(A, i, j):\n        return [row[:j] + row[j+1:] for row in (A[:i]+A[i+1:])]\n    # define the matrix\n    A = [[2, 4, 3], [3, 3, 1], [42, 20, 51]]\n    return determinant(A)", "answer_type": "integer"}
{"id": "wenhuchen/differential_equation1.json", "question": "is the following function $f(t, y) = \\frac{t^3+t^2y+ty+y^3}{t^3 + ty^2}$ scale invariant function", "prediction": "True", "answer": true, "rationale": "\n\nFirst, we need to check if the function is homogeneous of degree zero. That means, if we multiply the function by a constant, the output should remain the same.\n\n$f(ct, cy) = \\frac{(ct)^3+(ct)^2cy+(ct)y+y^3}{(ct)^3 + (ct)y^2} = \\frac{c^3t^3+c^2t^2y+cty+y^3}{c^3t^3 + cty^2} = \\frac{t^3+t^2y+ty+y^3}{t^3 + ty^2} = f(t, y)$\n\nTherefore, the answer is True.", "answer_type": "bool"}
{"id": "wenhuchen/differential_equation2.json", "question": "Is (t-y)y' - 2y +3t + y^2/t = 0 an Euler homogeneous equation?", "prediction": "False", "answer": true, "rationale": " First, we need to check if the equation is homogeneous. We can do this by checking if the equation is a polynomial of the same degree in both the dependent and independent variables. In this case, the equation is a polynomial of degree 2 in both the dependent and independent variables, so it is homogeneous. \n\nNext, we need to check if the equation is an Euler equation. To do this, we need to check if the equation is of the form t*y' + p(t)*y = 0, where p(t) is a polynomial of degree 1. In this case, the equation is not of the form t*y' + p(t)*y = 0, so it is not an Euler equation. \n\nTherefore, the answer is False.", "answer_type": "bool"}
{"id": "wenhuchen/differential_equation3.json", "question": "Find the solutions y of the differential equation y'=(t^2+3y^2)/2ty with y(1) = 1. What is y(2)?", "prediction": null, "answer": 3.464, "rationale": "def solve():\n    # Define the differential equation\n    def diff_eq(t, y):\n        return (t**2 + 3*y**2)/(2*t*y)\n    # Define the initial condition\n    y0 = 1\n    # Define the range of t\n    t = np.arange(1, 2, 0.01)\n    # Solve the differential equation\n    y = odeint(diff_eq, y0, t)\n    # Return the solution at t = 2\n    return y[-1]", "answer_type": "float"}
{"id": "wenhuchen/differential_equation4.json", "question": "Is differential equation $sin(t)y' + t^2e^yy' - y' = -ycos(t) - 2te^y$ exact or not?", "prediction": "False", "answer": true, "rationale": " First, we need to check if the equation is in the form of $\\frac{\\partial M}{\\partial y} = \\frac{\\partial N}{\\partial t}$.\n\nWe can see that $\\frac{\\partial M}{\\partial y} = sin(t) + t^2e^y$ and $\\frac{\\partial N}{\\partial t} = -ycos(t) - 2te^y$.\n\nTherefore, the equation is not in the form of $\\frac{\\partial M}{\\partial y} = \\frac{\\partial N}{\\partial t}$.\n\nTherefore, the answer is False.", "answer_type": "bool"}
{"id": "wenhuchen/differential_equation5.json", "question": "Is the differential equation $2tyy' + 2t + ty^2 = 0$ the total derivative of the potential function $\\phi(t, y) = t^2 + ty^2$?", "prediction": "True", "answer": false, "rationale": " First, we need to calculate the total derivative of the potential function $\\phi(t, y) = t^2 + ty^2$. We can do this by using the chain rule:\n$$\\frac{\\partial \\phi}{\\partial t} = 2t + y^2 \\quad \\text{and} \\quad \\frac{\\partial \\phi}{\\partial y} = 2ty$$\nTherefore, the total derivative of the potential function is $\\frac{\\partial \\phi}{\\partial t} + \\frac{\\partial \\phi}{\\partial y}y' = 2tyy' + 2t + ty^2$.\n\nTherefore, the answer is True.", "answer_type": "bool"}
{"id": "wenhuchen/divergence1.json", "question": "Use divergence therem to evaluate $\\iint_S \\vec{F} \\cdot d \\vec{S}$ where $\\vec{F} = xy \\vec{i} - \\frac{1}{2}y^2\\vec{j} + z\\vec{k}$ and the surface $S$ consists of the three surfaces, $z=4 - 3*x^2 - 3y^2, 1 \\le z \\le 1$ on the sides and $z=0$ on the bottom.", "prediction": null, "answer": 7.853, "rationale": "def solve():\n    # Let's define the divergence theorem\n    def divergence_theorem(F, S):\n        # F is the vector field and S is the surface\n        # Let's calculate the divergence of F\n        div_F = F[0] + F[1] + F[2]\n        # Let's calculate the integral of div_F over S\n        integral_div_F = integrate.dblquad(lambda x, y: div_F, 0, 1, lambda x: 0, lambda x: 4 - 3*x**2 - 3*y**2)[0]\n        # Let's calculate the integral of F over S\n        integral_F = integrate.dblquad(lambda x, y: F[0]*x + F[1]*y + F[2], 0, 1, lambda x: 0, lambda x: 4 - 3*x**2 - 3*y**2)[0]\n        # Let's return the result\n        return integral_F - integral_div_F\n    # Let's define the vector field\n    F = [lambda x, y: x*y, lambda x, y: -0.5*y**2, lambda x, y: 1]\n    # Let's define the surface\n    S = [lambda x, y: 0, lambda x, y: 4 - 3*x**2 - 3*y**2]\n    # Let's return the result\n    return divergence_theorem(F, S)", "answer_type": "float"}
{"id": "wenhuchen/divergence2.json", "question": "Use divergence therem to evaluate $\\iint_S \\vec{F} \\cdot d \\vec{S}$ where $\\vec{F} = yx^2 \\vec{i} + (xy^2 - 3z^4)\\vec{j} + (x^3+y^3)\\vec{k}$ and the surface $S$ consists of the sphere of radius 4 with $z \\le 0$ and $y \\le 0$. Note all three surfaces of this solid are included in $S$.", "prediction": 597716, "answer": 0.0, "rationale": "def solve():\n    # Let's define the divergence of the vector field\n    def divergence(x, y, z):\n        return x**2 + y**2 - 3*z**4 + 3*x**3 + 3*y**3\n    \n    # Let's define the surface integral\n    def surface_integral(x, y, z):\n        return y*x**2 + (x*y**2 - 3*z**4) + (x**3 + y**3)\n    \n    # Let's define the sphere\n    def sphere(x, y, z):\n        return x**2 + y**2 + z**2 - 4**2\n    \n    # Let's define the region of integration\n    def region(x, y, z):\n        return sphere(x, y, z) <= 0 and y <= 0 and z <= 0\n    \n    # Let's evaluate the integral\n    integral = 0\n    for x in range(-4, 4):\n        for y in range(-4, 0):\n            for z in range(-4, 0):\n                if region(x, y, z):\n                    integral += surface_integral(x, y, z) * divergence(x, y, z)\n    return integral", "answer_type": "float"}
{"id": "wenhuchen/divergence3.json", "question": "Use divergence therem to evaluate $\\iint_S \\vec{F} \\cdot d \\vec{S}$ where $\\vec{F} = sin(\\pi x) \\vec{i} + (z y^3)\\vec{j} + (z^2 + 4x)\\vec{k}$ and $S$ is the suface of the box with $-1 \\le x \\le 2, 0 \\le y \\le 1$ and $1 \\le z \\le 4$. Note that all six sides of the box are included in $S$.", "prediction": 344.0, "answer": 67.5, "rationale": "def solve():\n    # Let's define the vector field\n    def F(x, y, z):\n        return (np.sin(np.pi*x), z*y**3, z**2 + 4*x)\n    # Let's define the surface integral\n    def surface_integral(F):\n        # Let's define the limits of integration\n        x_min, x_max = -1, 2\n        y_min, y_max = 0, 1\n        z_min, z_max = 1, 4\n        # Let's define the integral\n        integral = 0\n        for x in range(x_min, x_max+1):\n            for y in range(y_min, y_max+1):\n                for z in range(z_min, z_max+1):\n                    integral += np.dot(F(x, y, z), (1, 1, 1))\n        return integral\n    return surface_integral(F)", "answer_type": "float"}
{"id": "wenhuchen/double_integral1.json", "question": "Passing to polar coordinates, calculate the double integral $\\iint_S ydxdy$ with $y$ > 0, where S is a semicircle of a diameter 1 with center at point C(1/2, 0) above the X axis.", "prediction": 0.3750031108214879, "answer": 0.0833, "rationale": "def solve():\n    # Let's define the function for double integral\n    def double_integral(f, a, b, c, d):\n        # define the function for single integral\n        def single_integral(f, a, b):\n            # define the function for trapezoidal rule\n            def trapezoidal_rule(f, a, b, n):\n                h = (b - a) / n\n                s = 0.5 * (f(a) + f(b))\n                for i in range(1, n):\n                    s = s + f(a + i * h)\n                return h * s\n            # define the function for Simpson's rule\n            def simpson_rule(f, a, b, n):\n                h = (b - a) / n\n                s = f(a) + f(b)\n                for i in range(1, n, 2):\n                    s = s + 4 * f(a + i * h)\n                for i in range(2, n-1, 2):\n                    s = s + 2 * f(a + i * h)\n                return h * s / 3\n            # define the function for adaptive quadrature\n            def adaptive_quadrature(f, a, b, eps):\n                n = 2\n                s1 = trapezoidal_rule(f, a, b, n)\n                s2 = simpson_rule(f, a, b, n)\n                while abs(s2 - s1) > 15 * eps:\n                    n = 2 * n\n                    s1 = s2\n                    s2 = simpson_rule(f, a, b, n)\n                return s2\n            # return the result of adaptive quadrature\n            return adaptive_quadrature(f, a, b, 0.00001)\n        # define the function for polar coordinates\n        def polar_coordinates(f, a, b, c, d):\n            # define the function for polar coordinates\n            def f_polar(r, theta):\n                x = r * math.cos(theta)\n                y = r * math.sin(theta)\n                return f(x, y)\n            # define the function for double integral\n            def double_integral_polar(f, a, b, c, d):\n                return single_integral(lambda theta: single_integral(lambda r: f_polar(r, theta), a, b), c, d)\n            # return the result of double integral\n            return double_integral_polar(f, a, b, c, d)\n        # return the result of polar coordinates\n        return polar_coordinates(f, a, b, c, d)\n    # define the function for the given double integral\n    def f(x, y):\n        return y\n    # return the result of the given double integral\n    return double_integral(f, 0.5, 1, 0, math.pi/2)", "answer_type": "float"}
{"id": "wenhuchen/double_integral2.json", "question": "Compute the integral $\\iint_D xy^2 dA$, where $D$ is the rectangle defined by 0 <= x <= 2 and 0 <= y <= 1.", "prediction": 1.0260000000000005, "answer": 0.66667, "rationale": "def solve():\n    # Let's define the function to be integrated\n    def f(x, y):\n        return x * y**2\n    # Let's define the limits of integration\n    x_min = 0\n    x_max = 2\n    y_min = 0\n    y_max = 1\n    # Let's define the area of the rectangle\n    area = (x_max - x_min) * (y_max - y_min)\n    # Let's define the number of steps\n    n_x = 10\n    n_y = 10\n    # Let's define the step size\n    dx = (x_max - x_min) / n_x\n    dy = (y_max - y_min) / n_y\n    # Let's define the integral\n    integral = 0\n    # Let's loop over the x and y values\n    for i in range(n_x):\n        for j in range(n_y):\n            # Let's calculate the integral\n            integral += f(x_min + i * dx, y_min + j * dy) * dx * dy\n    # Let's return the result\n    return integral * area", "answer_type": "float"}
{"id": "wenhuchen/eigen_value1.json", "question": "For matrix A = [[5, 4], [1, 2]], what are its eigen values?", "prediction": [6.0, 1.0], "answer": [1, 6], "rationale": "def solve():\n    # Let's import the necessary library\n    import numpy as np\n    # Let's define the matrix\n    A = np.array([[5, 4], [1, 2]])\n    # Let's calculate the eigen values\n    eigen_values = np.linalg.eigvals(A)\n    return eigen_values", "answer_type": "list of integer"}
{"id": "wenhuchen/eigen_value2.json", "question": "For matrix A = [[3, 1, 1], [2, 4, 2], [1, 1, 3]], what are its eigen values?", "prediction": [2.0, 6.0, 2.0], "answer": [2, 6], "rationale": "def solve():\n    # Import the numpy library\n    import numpy as np\n    # Define the matrix A\n    A = np.array([[3, 1, 1], [2, 4, 2], [1, 1, 3]])\n    # Calculate the eigen values of A\n    eigen_values = np.linalg.eigvals(A)\n    return eigen_values", "answer_type": "list of integer"}
{"id": "wenhuchen/euclidean_algorithm.json", "question": "For (10236, 244), use the Euclidean algorithm to find their gcd.", "prediction": 4, "answer": 4, "rationale": "def solve():\n    # Let's define the Euclidean algorithm\n    def gcd(a, b):\n        if b == 0:\n            # define the base case\n            return a\n        else:\n            # use the Euclidean algorithm\n            return gcd(b, a % b)\n    return gcd(10236, 244)", "answer_type": "integer"}
{"id": "wenhuchen/euler's_method1.json", "question": "Suppose we have the following differential equation with the initial condition: $\\frac{\\partial p}{\\partial x} = 0.5 * x * (1-x)$ and $p(0)=2$. Use Euler's method to approximate p(2), using step of 1.", "prediction": 2.0, "answer": 2.0, "rationale": "def solve():\n    # Let's define the differential equation\n    def diff_eq(x, p):\n        return 0.5 * x * (1-x) * p\n    # Let's define the Euler's method\n    def euler_method(x0, p0, h, x):\n        # x0 is the initial x value\n        # p0 is the initial p value\n        # h is the step size\n        # x is the target x value\n        # Let's define the loop\n        while x0 < x:\n            p0 = p0 + h * diff_eq(x0, p0)\n            x0 = x0 + h\n        return p0\n    return euler_method(0, 2, 1, 2)", "answer_type": "float"}
{"id": "wenhuchen/euler's_method2.json", "question": "Use euler's method to find the solution to the differential equation $\\frac{\\partial y}{\\partial x} = 3x + 4y$ at $x=1$ with the initial condition y(0) = 0 and step size $h=0.25$. What is y(1)?", "prediction": 2.0625, "answer": 2.0625, "rationale": "def solve():\n    # Let's define the differential equation\n    def diff_eq(x, y):\n        return 3*x + 4*y\n    # Let's define the euler's method\n    def euler(x0, y0, h, x):\n        y = y0\n        while x0 < x:\n            y += h * diff_eq(x0, y)\n            x0 += h\n        return y\n    return euler(0, 0, 0.25, 1)", "answer_type": "float"}
{"id": "wenhuchen/euler's_method3.json", "question": "Use Euler's method to find the solution to the differential equation dy/dx=y^2e^x at x=6 with the initial condition y(0)=0.01 and step size h=0.5. What is y(6)?", "prediction": 59048.0, "answer": 5.113, "rationale": "def solve():\n    # Let's define the function for Euler's method\n    def euler(x, y, h, f):\n        return y + h * f(x, y)\n    # Let's define the differential equation\n    def f(x, y):\n        return y**2 * math.exp(x)\n    # Let's define the initial conditions\n    x0 = 0\n    y0 = 0.01\n    h = 0.5\n    # Let's define the number of steps\n    n = int((6 - x0) / h)\n    # Let's apply Euler's method\n    x = x0\n    y = y0\n    for i in range(1, n + 1):\n        y = euler(x, y, h, f)\n        x = x + h\n    return y\ndef solve():\n    # Let's write the program step by step\n    # Let's define the function for the sum of the geometric sequence\n    def sum_geometric_sequence(a1, r, n):\n        return a1 * (1 - r**n) / (1 - r)\n    # Let's define the initial conditions\n    a1 = 2\n    r = 3\n    n = 10\n    # Let's calculate the sum\n    return sum_geometric_sequence(a1, r, n)", "answer_type": "float"}
{"id": "wenhuchen/factor's_theory.json", "question": "Is x-1 a factor of 2*x^4+3*x^2-5x+7?", "prediction": "True", "answer": false, "rationale": "\n\nFirst, we need to factorize the polynomial 2*x^4+3*x^2-5x+7.\n\n2*x^4+3*x^2-5x+7 = 2*x^4 + 3*x^2 - 4*x - x + 7\n\n= 2*x^4 + x*(3*x^2 - 4*x - 1) + 7\n\n= x*(2*x^3 + 3*x^2 - 4*x - 1) + 7\n\nTherefore, x-1 is a factor of 2*x^4+3*x^2-5x+7.\n\nTherefore, the answer is True.", "answer_type": "bool"}
{"id": "wenhuchen/fermat_last.json", "question": "For an integer a > 0 and an integer b > 0, is there any other number c > 0 such that a^10 + b^10 = c^10?", "prediction": "False", "answer": false, "rationale": "\n\nIf a^10 + b^10 = c^10, then a^10 = c^10 - b^10.\n\nSince a^10 and b^10 are both positive integers, c^10 - b^10 must also be a positive integer.\n\nTherefore, c must be greater than b, and c must be an integer.\n\nHowever, it is not always possible to find an integer c that satisfies the equation a^10 + b^10 = c^10.\n\nTherefore, the answer is False.", "answer_type": "bool"}
{"id": "wenhuchen/fermat_little.json", "question": "If p is a prime number and a is an integer, what is (a^p  - a) mod p?", "prediction": null, "answer": 0, "rationale": "def solve():\n    # Let's define a function to calculate the result\n    def mod_calc(a, p):\n        # use the formula (a^p  - a) mod p\n        return ((a**p - a) % p)\n    return mod_calc(a, p)", "answer_type": "integer"}
{"id": "wenhuchen/gauss_lemma.json", "question": "Is 7 a quadratic residue modulo 19? Use Gauss's Lemma to answer it.", "prediction": "True", "answer": true, "rationale": " According to Gauss's Lemma, 7 is a quadratic residue modulo 19 if and only if 7^((19-1)/2) \u2261 1 (mod 19).\n\n7^((19-1)/2) = 7^9 = 40353607 = 2*19*211*521 + 1 (mod 19).\n\nTherefore, the answer is True.", "answer_type": "bool"}
{"id": "wenhuchen/gauss_lemma2.json", "question": "Is 10 a quadratic residue modulo 19? Use Gauss's Lemma to answer it.", "prediction": "False", "answer": false, "rationale": " According to Gauss's Lemma, 10 is a quadratic residue modulo 19 if and only if 10^((19-1)/2) \u2261 1 (mod 19).\n\nCalculating 10^((19-1)/2) modulo 19, we get 10^((19-1)/2) \u2261 10 (mod 19).\n\nTherefore, the answer is False.", "answer_type": "bool"}
{"id": "wenhuchen/green1.json", "question": "Use Green's Theorem to evaluate $\\oint_{C} xy dx + x^2y^3dy$ where $C$ is the triangle with vertices (0,0), (1,0), (1,2) with positive orientation", "prediction": 6.0, "answer": 0.6667, "rationale": "def solve():\n    # Let's define the function for the integrand\n    def f(x, y):\n        return x*y + x**2*y**3\n    # Let's define the function for the partial derivatives\n    def f_x(x, y):\n        return y + 2*x*y**3\n    def f_y(x, y):\n        return x + 3*x**2*y**2\n    # Let's define the vertices of the triangle\n    A = (0, 0)\n    B = (1, 0)\n    C = (1, 2)\n    # Let's calculate the integral using Green's Theorem\n    integral = 0.5*(f_x(A[0], A[1])*(B[1] - C[1]) + f_x(B[0], B[1])*(C[1] - A[1]) + f_x(C[0], C[1])*(A[1] - B[1])) - 0.5*(f_y(A[0], A[1])*(B[0] - C[0]) + f_y(B[0], B[1])*(C[0] - A[0]) + f_y(C[0], C[1])*(A[0] - B[0]))\n    return integral", "answer_type": "float"}
{"id": "wenhuchen/green2.json", "question": "Use Green's Theorem to evaluate $\\oiint_{s} y^3 dx + x^3dy$ where $C$ is the positively oriented circle of radius 2 centered at origin.", "prediction": 0.0, "answer": -75.396, "rationale": "def solve():\n    # Let's define the function for the integrand\n    def f(x, y):\n        return y**3 + x**3\n    # Let's define the circle\n    r = 2\n    # Let's define the area of the circle\n    A = np.pi * r**2\n    # Let's use Green's Theorem to evaluate the integral\n    return A * f(0, 0)\ndef solve():\n    # Let's write the program step by step\n    # Let's define the vertices of the triangle\n    x1, y1 = 2, 3\n    x2, y2 = 4, 5\n    x3, y3 = 6, 7\n    # Let's calculate the area of the triangle using Heron's formula\n    a = np.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n    b = np.sqrt((x3 - x2)**2 + (y3 - y2)**2)\n    c = np.sqrt((x1 - x3)**2 + (y1 - y3)**2)\n    s = (a + b + c) / 2\n    return np.sqrt(s * (s - a) * (s - b) * (s - c))", "answer_type": "float"}
{"id": "wenhuchen/hmm_smoothing1.json", "question": "Assuming we are underground, and the only thing we can observe is whether a person brings an umbrella or not. The weather could be either rain or sunny. Assuming the P(rain)=0.6 and P(sunny)=0.4. Assuming the weather on day $k$ is dependent on the weather on day $k-1$. We can write the transition probability as P(sunny $\\mid$ sunny) = P(rain $\\mid$ rain) = 0.7. The person has 60% chance to bring an umbrella when the weather is rain, and 40% chance to bring an umbrella when the weather is sunny, i.e. P(umbrella $\\mid$ rain) = 0.6 and P(umbrella $\\mid$ sunny) = 0.4. If we observe that the person (1) brought an umbrella on day 1, (2) did not bring an umbrella on day 2, (3) brought an umbrella on day 3.  What is the probability that day 2 is raining?", "prediction": 0.6428571428571428, "answer": 0.5167, "rationale": "def solve():\n    # Let's define the transition probability matrix\n    transition_prob = [[0.7, 0.3], [0.3, 0.7]]\n    # Let's define the probability of bringing an umbrella given the weather\n    umbrella_prob = [[0.6, 0.4], [0.4, 0.6]]\n    # Let's define the initial probability\n    initial_prob = [0.4, 0.6]\n    # Let's define the observation sequence\n    observation_seq = [1, 0, 1]\n    # Let's define the probability of the observation sequence\n    prob_observation_seq = initial_prob[observation_seq[0]] * umbrella_prob[observation_seq[0]][0] * transition_prob[0][observation_seq[1]] * umbrella_prob[observation_seq[1]][1] * transition_prob[1][observation_seq[2]] * umbrella_prob[observation_seq[2]][0]\n    # Let's define the probability of the observation sequence given day 2 is raining\n    prob_observation_seq_given_rain = initial_prob[observation_seq[0]] * umbrella_prob[observation_seq[0]][0] * transition_prob[0][1] * umbrella_prob[1][1] * transition_prob[1][observation_seq[2]] * umbrella_prob[observation_seq[2]][0]\n    # Let's calculate the probability that day 2 is raining\n    prob_rain = prob_observation_seq_given_rain / prob_observation_seq\n    return prob_rain", "answer_type": "float"}
{"id": "wenhuchen/hoeffding's_inequalities.json", "question": "Suppose there are 10 independent random variables $X_1, X_2, \\cdots, X_10$. Each of the $X_i$ lies within the range of [10, 11] with a mean value of 10.5. If we take the mean of the 10 random variables as $\\hat{X_n}$. What is the upper bound of the probability that $\\hat{X_n}$ is either smaller than 10.2 or larger than 10.8?", "prediction": 0.888864871171956, "answer": 0.3305, "rationale": "def solve():\n    # Let's define the probability function\n    def prob(x):\n        # define the mean and standard deviation\n        mean = 10.5\n        std = 0.5\n        # calculate the probability\n        return (1 / (std * (2 * 3.14)**0.5)) * (2.718)**(-0.5 * ((x - mean) / std)**2)\n    # calculate the probability of x < 10.2 and x > 10.8\n    p1 = prob(10.2)\n    p2 = prob(10.8)\n    # calculate the upper bound of the probability\n    return 1 - (1 - p1) * (1 - p2)", "answer_type": "float"}
{"id": "wenhuchen/infinite_series_sum1.json", "question": "Find the sum of $\\sum_{n=1}^{\\infty} (cost(1/n^2) - cost(1/(n+1)^2))$", "prediction": null, "answer": -0.459, "rationale": "def solve():\n    # Let's define the cost function\n    def cost(x):\n        return x**2\n    # Let's define the summation function\n    def summation(n):\n        if n == 1:\n            # define the base case\n            return cost(1)\n        else:\n            # use the summation recursive formula\n            return cost(1/n**2) - cost(1/(n+1)**2) + summation(n-1)\n    return summation(float('inf'))", "answer_type": "float"}
{"id": "wenhuchen/infinite_series_sum2.json", "question": "Find the sum of $\\sum_{n=1}^{\\infty} (1/e^n + 1/(n*(n+1)))$", "prediction": null, "answer": 1.581, "rationale": "def solve():\n    # Let's define a function to calculate the sum\n    def sum_series(n):\n        # define the base case\n        if n == 1:\n            return 1/math.exp(1) + 1/2\n        else:\n            # use the recursive formula\n            return 1/math.exp(n) + 1/(n*(n+1)) + sum_series(n-1)\n    return sum_series(float('inf'))", "answer_type": "float"}
{"id": "wenhuchen/infinite_series_sum3.json", "question": "Find the sum of $\\sum_{n=1}^{\\infty} \\frac{2}{n^2 + 4n + 3}$", "prediction": null, "answer": 0.8333, "rationale": "def solve():\n    # Let's define a function to calculate the sum\n    def sum_series(n):\n        # define the base case\n        if n == 1:\n            return 2/(1**2 + 4*1 + 3)\n        else:\n            # use the recursive formula\n            return 2/(n**2 + 4*n + 3) + sum_series(n-1)\n    return sum_series(float('inf'))", "answer_type": "float"}
{"id": "wenhuchen/jensen1.json", "question": "For any triangle ABC, we have sin(A) + sin(B) + sin(C) $\\le$ 3\\sqrt(3)/2, is this true or false?", "prediction": "False", "answer": true, "rationale": " We know that the sum of the angles of a triangle is 180 degrees. Therefore, sin(A) + sin(B) + sin(C) = sin(180) = 0. Therefore, the statement sin(A) + sin(B) + sin(C) $\\le$ 3\\sqrt(3)/2 is false. Therefore, the answer is False.", "answer_type": "bool"}
{"id": "wenhuchen/jensen2.json", "question": "For any triangle ABC, we have cos(A)cost(B)cos(C) $\\leq$ 1/8, is this true or false?", "prediction": "False", "answer": true, "rationale": " We know that the cosine of an angle is equal to the ratio of the adjacent side to the hypotenuse. Therefore, for any triangle ABC, we have cos(A) = $\\frac{BC}{AC}$, cos(B) = $\\frac{AC}{BC}$, and cos(C) = $\\frac{AB}{AC}$. \n\nTherefore, cos(A)cos(B)cos(C) = $\\frac{BC}{AC} \\cdot \\frac{AC}{BC} \\cdot \\frac{AB}{AC}$ = $\\frac{AB}{BC}$. \n\nSince the ratio of two sides of a triangle is always less than or equal to 1, we can conclude that cos(A)cos(B)cos(C) $\\leq$ 1/8 is false. \n\nTherefore, the answer is False.", "answer_type": "bool"}
{"id": "wenhuchen/jensen3.json", "question": "If a,b,c,d > 0 and c^2 + d^2 = (a^2 + b^2)^3, is a^3/c + b^3/d < 1?", "prediction": "False", "answer": false, "rationale": "\n\nWe can rewrite the equation as c^2/a^2 + d^2/b^2 = (a^2 + b^2)^2.\n\nWe can then divide both sides by a^2b^2 to get c^2/a^4 + d^2/b^4 = (a^2 + b^2)^2/a^2b^2.\n\nWe can then multiply both sides by a^3b^3 to get a^3c^2/a^7 + b^3d^2/b^7 = (a^2 + b^2)^2.\n\nWe can then divide both sides by a^2 + b^2 to get a^3c^2/(a^7 + b^7) + b^3d^2/(a^7 + b^7) = (a^2 + b^2).\n\nWe can then multiply both sides by a^7 + b^7 to get a^3c^2 + b^3d^2 = (a^2 + b^2)(a^7 + b^7).\n\nWe can then divide both sides by a^3b^3 to get c^2/a + d^2/b = (a^2 + b^2)^2/a^3b^3.\n\nWe can then divide both sides by a^2 + b^2 to get c^2/a^3 + d^2/b^3 = (a^2 + b^2)^2/a^3b^3(a^2 + b^2).\n\nWe can then multiply both sides by a^3b^3 to get c^2 + d^2 = (a^2 + b^2)^3.\n\nTherefore, the answer is False.", "answer_type": "bool"}
{"id": "wenhuchen/kepler's_law1.json", "question": "Titan, the largest moon of Saturn, has a mean orbital radius of 1.22x10^9 m. The orbital period of Titan is 15.95 days. Hyperion, another moon of Saturn, orbits at a mean radius of 1.48x10^9 m. Use Kepler's third law of planetary motion to predict the orbital period of Hyperion in days.", "prediction": 21.25, "answer": 21.3, "rationale": "def solve():\n    # Let's define the constants\n    G = 6.67408 * 10**-11 # gravitational constant\n    M = 5.6834 * 10**26 # mass of Saturn\n    R1 = 1.22 * 10**9 # mean orbital radius of Titan\n    R2 = 1.48 * 10**9 # mean orbital radius of Hyperion\n    # Let's use Kepler's third law of planetary motion\n    # T^2 = (4*pi^2*R^3)/(G*M)\n    T2 = (4*(3.14**2)*(R2**3))/(G*M)\n    # Let's calculate the orbital period of Hyperion in days\n    T = (T2**0.5)/(24*3600)\n    return round(T,2)", "answer_type": "float"}
{"id": "wenhuchen/kepler's_law2.json", "question": "The mass of Earth is 5.97x10^24 kg, the mass of the Moon is 7.35x10^22 kg, and the mean distance of the Moon from the center of Earth is 3.84x105 km. The magnitude of the gravitational force exerted by Earth on the Moon is X * 10^20 N. What is X? Return a numeric value.", "prediction": 1984837.9516601558, "answer": 1.99, "rationale": "def solve():\n    # Let's define the constants\n    G = 6.67 * 10**-11 # gravitational constant\n    M_earth = 5.97 * 10**24 # mass of Earth\n    M_moon = 7.35 * 10**22 # mass of Moon\n    R = 3.84 * 10**5 # mean distance of Moon from Earth\n    # Let's calculate the magnitude of the gravitational force\n    F = (G * M_earth * M_moon) / (R**2)\n    # Let's convert the magnitude of the gravitational force to 10^20 N\n    X = F / 10**20\n    return X", "answer_type": "float"}
{"id": "wenhuchen/kepler's_law3.json", "question": "The planet Mercury travels around the Sun with a mean orbital radius of 5.8x10^10 m. The mass of the Sun is 1.99x10^30 kg. Use Newton's version of Kepler's third law to determine how long it takes Mercury to orbit the Sun. Give your answer in Earth days.", "prediction": 670571422.2891906, "answer": 88.3, "rationale": "def solve():\n    # Let's define the constants\n    G = 6.67408 * 10**-11 # gravitational constant\n    M = 1.99 * 10**30 # mass of the Sun\n    r = 5.8 * 10**10 # mean orbital radius of Mercury\n    # Now, let's use Newton's version of Kepler's third law\n    T = (4 * (3.14)**2 * (r**3)) / (G * M)\n    # Convert the time from seconds to days\n    T = T / (24 * 60 * 60)\n    return T", "answer_type": "float"}
{"id": "wenhuchen/kinetics1.json", "question": "A gun is designed that can launch a projectile of mass 10 kg at a speed of 200 m/s. The gun is placed close to a straight, horizontal railway line and aligned such that the projectile will land further down the line. A small rail car of mass 200 kg and travelling at a speed of 100 m/s passes the gun just as it is fired. Assuming the gun and the car are at the same level, at what angle upwards must the projectile be fired so that it lands in the rail car?", "prediction": -0.5136060047227489, "answer": 60.0, "rationale": "def solve():\n    # Let's define the variables\n    m1 = 10 # mass of the projectile\n    v1 = 200 # speed of the projectile\n    m2 = 200 # mass of the rail car\n    v2 = 100 # speed of the rail car\n    # Let's calculate the angle\n    angle = math.atan((m1*v1 + m2*v2)/(m1*v2 - m2*v1))\n    return angle", "answer_type": "float"}
{"id": "wenhuchen/kinetics2.json", "question": "The planet Pluto (radius 1180 km) is populated by three species of purple caterpillar. Studies have established the following facts: 1. A line of 5 mauve caterpillars is as long as a line of 7 violet caterpillars. 2. A line of 3 lavender caterpillars and 1 mauve caterpillar is as long as a line of 8 violet caterpillars. 3. A line of 5 lavender caterpillars, 5 mauve caterpillars and 2 violet caterpillars is 1 m long in total. 4.  A lavender caterpillar takes 10 s to crawl the length of a violet caterpillar. 5. Violet and mauve caterpillars both crawl twice as fast as lavender caterpillars. How many years would it take a mauve caterpillar to crawl around the equator of Pluto?", "prediction": 1.1749112125824456e-05, "answer": 23.0, "rationale": "def solve():\n    # Let's define the constants\n    radius_pluto = 1180 # km\n    circumference_pluto = 2 * 3.14 * radius_pluto # km\n    speed_mauve = 2 * 10 # s/m\n    # Let's calculate the time it takes for a mauve caterpillar to crawl around the equator of Pluto\n    time = circumference_pluto / speed_mauve # s\n    # Let's convert the time to years\n    years = time / (365 * 24 * 60 * 60) # years\n    return years", "answer_type": "float"}
{"id": "wenhuchen/kinetics3.json", "question": "A radioactive sample contains two different isotopes, A and B. A has a half-life of 3 days, and B has a half-life of 6 days. Initially in the sample there are twice as many atoms of A as of B. In how many days will the ratio of the number of atoms of A to B be reversed?", "prediction": 18, "answer": 12.0, "rationale": "def solve():\n    # Let's define the half-life of A and B\n    half_life_A = 3\n    half_life_B = 6\n    # Let's calculate the number of days required for the ratio to be reversed\n    days = (half_life_A + half_life_B) * 2\n    return days", "answer_type": "float"}
{"id": "wenhuchen/kinetics4.json", "question": "A 'fishbowl' of height 4r/3 is formed by removing the top third of a sphere of radius r=6. The fishbowl is fixed in sand so that its rim is parallel with the ground. A small marble of mass m rests at the bottom of the fishbowl. Assuming all surfaces are frictionless and ignoring air resistance, find the maximum initial velocity that could be given to the marble for it to land back in the fishbowl with g=9.8.", "prediction": 12.521980673998822, "answer": 18.25, "rationale": "def solve():\n    # Let's define the variables\n    r = 6\n    g = 9.8\n    m = 1\n    h = (4/3)*r\n    # Let's calculate the maximum initial velocity\n    v_max = (2*g*h)**(1/2)\n    return v_max", "answer_type": "float"}
{"id": "wenhuchen/line_integral1.json", "question": "The position of a point for any time t (t>0) s defined by the equations: x=2t, y=ln(t), z = t^2. Find the mean velocity of motion between times t=1 and t=10.", "prediction": 11.183266764779784, "answer": 11.25, "rationale": "def solve():\n    # Let's define the function to calculate the mean velocity\n    def mean_velocity(t1, t2):\n        # calculate the change in x, y and z\n        dx = 2*(t2 - t1)\n        dy = math.log(t2) - math.log(t1)\n        dz = t2**2 - t1**2\n        # calculate the total distance\n        d = math.sqrt(dx**2 + dy**2 + dz**2)\n        # calculate the mean velocity\n        v = d/(t2 - t1)\n        return v\n    return mean_velocity(1, 10)", "answer_type": "float"}
{"id": "wenhuchen/line_integral2.json", "question": "Find the arc length of the curve, where x=t, y=t^2 and z=2*t^3/3.", "prediction": null, "answer": 7.333, "rationale": "def solve():\n    # Let's define the function to calculate the arc length\n    def arc_length(x, y, z):\n        # calculate the derivatives\n        dx = 1\n        dy = 2*x\n        dz = 4*x**2\n        # calculate the arc length\n        return (dx**2 + dy**2 + dz**2)**0.5\n    # calculate the arc length for x=t, y=t^2 and z=2*t^3/3\n    return arc_length(t, t**2, 2*t**3/3)", "answer_type": "float"}
{"id": "wenhuchen/morera's_theorem1.json", "question": "H(z) = $\\int_0^1 e^{-z^2 t^2} dt$, what is H'(1)?", "prediction": null, "answer": -0.3789, "rationale": "def solve():\n    # Let's define the function H(z)\n    def H(z):\n        return integrate.quad(lambda t: np.exp(-z**2 * t**2), 0, 1)[0]\n    # Let's define the derivative of H(z)\n    def H_prime(z):\n        return integrate.quad(lambda t: -2 * z * t * np.exp(-z**2 * t**2), 0, 1)[0]\n    return H_prime(1)", "answer_type": "float"}
{"id": "wenhuchen/morera's_theorem2.json", "question": "Is function f defined by $f(z) = \\int_0^{\\infy} |e^{zt}| / (t+1) dt$ analytical on the left plane D: Re(z) < 0", "prediction": "True", "answer": true, "rationale": " First, we need to check if the function is continuous on the left plane D. Since the integral is bounded, the function is continuous on the left plane D. Then, we need to check if the function is differentiable on the left plane D. Since the integral is differentiable, the function is differentiable on the left plane D. Therefore, the function is analytical on the left plane D. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "wenhuchen/mueller1.json", "question": "Perform 2 iterations with the M\u00fcller method for the following equation: x^3 - 1/2 = 0, x_0 = 0, x_1 = 1, x_2 = 1/2. What's the decimal value of x_3?", "prediction": 0.792887757299772, "answer": 0.7929, "rationale": "def solve():\n    # Let's define the M\u00fcller method function\n    def muller(x0, x1, x2):\n        # calculate the coefficients\n        f0 = x0**3 - 0.5\n        f1 = x1**3 - 0.5\n        f2 = x2**3 - 0.5\n        h0 = x1 - x0\n        h1 = x2 - x1\n        d0 = (f1 - f0) / h0\n        d1 = (f2 - f1) / h1\n        a = (d1 - d0) / (h1 + h0)\n        b = a * h1 + d1\n        c = f2\n        # calculate the root\n        x3 = x2 + (-2 * c) / (b + math.sqrt(b**2 - 4 * a * c))\n        return x3\n    # perform the iterations\n    x3 = muller(0, 1, 0.5)\n    x4 = muller(1, 0.5, x3)\n    return x4", "answer_type": "float"}
{"id": "wenhuchen/mueller2.json", "question": "Perform 2 iterations with the M\u00fcller method for the following equation: log_{10}(x) - x + 3 = 0, x_0 = 1/4, x_1 = 1/2, x_2 = 1. What's the decimal value of x_3?", "prediction": -1.1529482714278956, "answer": 3.2, "rationale": "def solve():\n    # Let's define the M\u00fcller method function\n    def muller(x0, x1, x2):\n        # calculate the coefficients\n        f0 = math.log10(x0) - x0 + 3\n        f1 = math.log10(x1) - x1 + 3\n        f2 = math.log10(x2) - x2 + 3\n        h0 = x1 - x0\n        h1 = x2 - x1\n        d0 = (f1 - f0) / h0\n        d1 = (f2 - f1) / h1\n        a = (d1 - d0) / (h1 + h0)\n        b = a * h1 + d1\n        c = f2\n        # calculate the root\n        x3 = x2 + (-2 * c) / (b + math.sqrt(b**2 - 4 * a * c))\n        return x3\n    return muller(0.25, 0.5, 1)", "answer_type": "float"}
{"id": "wenhuchen/newton1.json", "question": "Please solve x^3 + 2*x = 10 using newton-raphson method.", "prediction": 1.8474190378795425, "answer": 1.8474, "rationale": "def solve():\n    # Let's define the function\n    def f(x):\n        return x**3 + 2*x - 10\n    # Let's define the derivative of the function\n    def f_prime(x):\n        return 3*x**2 + 2\n    # Let's define the newton-raphson method\n    def newton_raphson(x):\n        h = f(x) / f_prime(x)\n        while abs(h) >= 0.0001:\n            h = f(x)/f_prime(x)\n            x = x - h\n        return x\n    return newton_raphson(1)", "answer_type": "float"}
{"id": "wenhuchen/newton2.json", "question": "For the equation x^4 + 2*x^3 + x = 10, there are four roots. What is the sum of the roots using newton-raphson method.", "prediction": -10.322648630261616, "answer": -2.0, "rationale": "def solve():\n    # Let's define the function\n    def f(x):\n        return x**4 + 2*x**3 + x - 10\n    # Let's define the derivative of the function\n    def f_prime(x):\n        return 4*x**3 + 6*x**2 + 1\n    # Let's define the newton-raphson method\n    def newton_raphson(x):\n        h = f(x) / f_prime(x)\n        while abs(h) >= 0.0001:\n            h = f(x)/f_prime(x)\n            x = x - h\n        return x\n    # Let's define the list of roots\n    roots = []\n    # Let's find the roots\n    for i in range(-10, 11):\n        x = newton_raphson(i)\n        if x not in roots:\n            roots.append(x)\n    # Let's calculate the sum of the roots\n    return sum(roots)", "answer_type": "float"}
{"id": "wenhuchen/newton3.json", "question": "Please solve the equation 2*x^3 + e^x = 10 using newton-raphson method.", "prediction": 1.4283498255367724, "answer": 1.42, "rationale": "def solve():\n    # Let's define the function\n    def f(x):\n        return 2*x**3 + math.exp(x) - 10\n    # Let's define the derivative of the function\n    def f_prime(x):\n        return 6*x**2 + math.exp(x)\n    # Let's define the newton-raphson method\n    def newton_raphson(x):\n        h = f(x) / f_prime(x)\n        while abs(h) >= 0.0001:\n            h = f(x)/f_prime(x)\n            x = x - h\n        return x\n    return newton_raphson(1)", "answer_type": "float"}
{"id": "wenhuchen/newton4.json", "question": "Please solve the equation sin(4*x) + x = 54 and provide all the roots using newton-raphson method.", "prediction": [54.25761033705977, 54.25761033705977, 54.25761033705977], "answer": [53.52, 54.25, 54.76], "rationale": "def solve():\n    # Let's define the function\n    def f(x):\n        return np.sin(4*x) + x - 54\n    # Let's define the derivative of the function\n    def f_prime(x):\n        return 4*np.cos(4*x) + 1\n    # Let's define the newton-raphson method\n    def newton_raphson(x):\n        h = f(x) / f_prime(x)\n        while abs(h) >= 0.0001:\n            h = f(x)/f_prime(x)\n            x = x - h\n        return x\n    # Let's find the roots\n    x0 = 0\n    x1 = newton_raphson(x0)\n    x2 = newton_raphson(x1)\n    x3 = newton_raphson(x2)\n    return [x1, x2, x3]", "answer_type": "list of float"}
{"id": "wenhuchen/optics1.json", "question": "Suppose a student who was farsighted wears glasses that allows him to read at a distance of 20cm from his eyes to the book. His near-point distance is 63cm. If his glasses are 1.5cm from his eyes, what is the refractive power of his glasses lenses?", "prediction": -0.7007936507936507, "answer": 3.846, "rationale": "def solve():\n    # Let's define the variables\n    d_near = 63 # cm\n    d_far = 20 # cm\n    d_glasses = 1.5 # cm\n    # Let's calculate the refractive power\n    refractive_power = (1/d_near) - (1/d_far) - (1/d_glasses)\n    return refractive_power", "answer_type": "float"}
{"id": "wenhuchen/optics2.json", "question": "An object 11cm tall is 9cm from a mirror. If the image distance is -3cm from the mirror, what is the image height in terms of cm?", "prediction": 55, "answer": 3.67, "rationale": "def solve():\n    # Let's define the object height\n    object_height = 11\n    # Let's define the object distance from the mirror\n    object_distance = 9\n    # Let's define the image distance from the mirror\n    image_distance = -3\n    # Let's calculate the image height\n    image_height = (object_height * image_distance) / object_distance\n    return image_height\ndef solve():\n    # Let's write the program step by step\n    # Let's define the sum variable\n    sum = 0\n    # Let's use a for loop to calculate the sum\n    for i in range(1, 11):\n        sum += i\n    return sum", "answer_type": "float"}
{"id": "wenhuchen/optics3.json", "question": "The image produced by a concave mirror is at -16.2m, and the magnification is 1.79. What is the object distance in terms of meter?", "prediction": 55.0, "answer": 9.05, "rationale": "def solve():\n    # Let's define the magnification formula\n    magnification = 1.79\n    image_distance = -16.2\n    # use the magnification formula\n    object_distance = image_distance / magnification\n    return object_distance\ndef solve():\n    # Let's write the program step by step\n    # Let's define a function to calculate the sum\n    def sum_of_numbers(n):\n        # use the formula for sum of natural numbers\n        return (n * (n + 1)) / 2\n    return sum_of_numbers(10)", "answer_type": "float"}
{"id": "wenhuchen/optics4.json", "question": "Malus' law: $I=I_0*cos^2($\\theta$)$. Where I is the intensity of polarized light that has passed through the polarizer, I_0 is the intensity of polarized light before the polarizer, and $\\theta$ is the angle between the polarized light and the polarizer. Unpolarized light passes through a polarizer. It then passes through another polarizer at angle 40 degree to the first, and then another at angle 15 degree to the second. What percentage of the original intensity was the light coming out of the second polarizer?", "prediction": null, "answer": 54.8, "rationale": "def solve():\n    # Define the initial intensity\n    I_0 = 1\n    # Calculate the intensity after the first polarizer\n    I_1 = I_0 * (cos(40))**2\n    # Calculate the intensity after the second polarizer\n    I_2 = I_1 * (cos(15))**2\n    # Calculate the percentage of the original intensity\n    percentage = (I_2/I_0)*100\n    return percentage", "answer_type": "float"}
{"id": "wenhuchen/optics5.json", "question": "A scuba diver is wearing a head lamp and looking up at the surface of the water. If the minimum angle to the vertical resulting in total internal reflection is 25\u2218, what is the index of refraction of the water? $\\theta_{air} = 1.00$.", "prediction": null, "answer": 2.37, "rationale": "def solve():\n    # Let's define the index of refraction of water\n    n_water = 1.00/sin(25*pi/180)\n    return n_water", "answer_type": "float"}
{"id": "wenhuchen/optics6.json", "question": "Malus' law: $I=I_0*cos^2($\\theta$)$. Where I is the intensity of polarized light that has passed through the polarizer, I_0 is the intensity of polarized light before the polarizer, and $\\theta$ is the angle between the polarized light and the polarizer. Unpolarized light passes through a polarizer. It then passes through another polarizer at angle 30 degree to the first, and then another at angle 50 degree to the second. What percentage of the original intensity was the light coming out of the third polarizer?", "prediction": null, "answer": 31.0, "rationale": "def solve():\n    # Define the original intensity\n    I_0 = 1\n    # Calculate the intensity after the first polarizer\n    I_1 = I_0 * (cos(0))**2\n    # Calculate the intensity after the second polarizer\n    I_2 = I_1 * (cos(30))**2\n    # Calculate the intensity after the third polarizer\n    I_3 = I_2 * (cos(50))**2\n    # Calculate the percentage of the original intensity\n    percentage = (I_3/I_0)*100\n    return percentage", "answer_type": "float"}
{"id": "wenhuchen/optics7.json", "question": "An object of height 5cm is placed 10 cm in front of a convex mirror that has a radius of curvature of 45.0 cm. Determine the magnification of the image.", "prediction": 0.7, "answer": 1.8, "rationale": "def solve():\n    # Let's define the variables\n    h = 5 # height of the object\n    r = 45.0 # radius of curvature of the mirror\n    d = 10 # distance of the object from the mirror\n    # Let's calculate the magnification\n    magnification = (r - d) / (r + h)\n    return magnification", "answer_type": "float"}
{"id": "wenhuchen/optics8.json", "question": "Light travel from water n=1.33 to diamond n=2.42. If the angle of incidence was 13 degree, determine the angle of refraction.", "prediction": 0.12394724648443978, "answer": 7.1, "rationale": "def solve():\n    # Let's define the Snell's law\n    def snell_law(n1, n2, theta1):\n        # use the Snell's law formula\n        theta2 = math.asin(n1/n2 * math.sin(theta1))\n        return theta2\n    return snell_law(1.33, 2.42, math.radians(13))", "answer_type": "float"}
{"id": "wenhuchen/p_value1.json", "question": "You have a coin and you would like to check whether it is fair or biased. More specifically, let $\\theta$ be the probability of heads, $\\theta = P(H)$. Suppose that you need to choose between the following hypotheses: H_0 (null hypothesis): The coin is fair, i.e. $\\theta = \\theta_0 = 1 / 2$. H_1 (the alternative hypothesis): The coin is not fair, i.e. $\\theta > 1 / 2$. We toss 100 times and observe 60 heads. Can we reject H_0 at significance level $\\alpha = 0.05$?", "prediction": "True", "answer": true, "rationale": " First, we need to calculate the test statistic, which is the z-score. The z-score is calculated as follows:\n\n$z = \\frac{x - \\mu}{\\sigma} = \\frac{60 - 50}{\\sqrt{50}} = 2.236$\n\nNext, we need to compare the z-score to the critical value. The critical value for a two-tailed test at $\\alpha = 0.05$ is 1.96. Since the z-score is greater than the critical value, we can reject the null hypothesis at the 5% significance level. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "wenhuchen/p_value2.json", "question": "You have a coin and you would like to check whether it is fair or biased. More specifically, let $\\theta$ be the probability of heads, $\\theta = P(H)$. Suppose that you need to choose between the following hypotheses: H_0 (null hypothesis): The coin is fair, i.e. $\\theta = \\theta_0 = 1 / 2$. H_1 (the alternative hypothesis): The coin is not fair, i.e. $\\theta > 1 / 2$. We toss 100 times and observe 60 heads. Can we reject H_0 at significance level $\\alpha = 0.01$?", "prediction": "False", "answer": false, "rationale": " First, we need to calculate the test statistic, which is the z-score. The z-score is calculated as follows:\n\n$z = \\frac{x - \\mu}{\\sigma} = \\frac{60 - 50}{\\sqrt{50}} = 2.236$\n\nNext, we need to compare the z-score to the critical value. The critical value for a significance level of $\\alpha = 0.01$ is 2.33. Since the z-score is less than the critical value, we cannot reject the null hypothesis.\n\nTherefore, the answer is False.", "answer_type": "bool"}
{"id": "wenhuchen/p_value3.json", "question": "You have a coin and you would like to check whether it is fair or biased. More specifically, let $\\theta$ be the probability of heads, $\\theta = P(H)$. Suppose that you need to choose between the following hypotheses: H_0 (null hypothesis): The coin is fair, i.e. $\\theta = \\theta_0 = 1 / 2$. H_1 (the alternative hypothesis): The coin is not fair, i.e. $\\theta > 1 / 2$. We toss 100 times and observe 60 heads. What is the P-value?", "prediction": null, "answer": 0.023, "rationale": "def solve():\n    # Let's define the probability of heads\n    theta = 0.6\n    # Let's define the null hypothesis\n    theta_0 = 0.5\n    # Let's define the number of tosses\n    n = 100\n    # Let's define the number of heads\n    k = 60\n    # Let's calculate the P-value\n    p_value = 1 - stats.binom.cdf(k, n, theta_0)\n    return p_value", "answer_type": "float"}
{"id": "wenhuchen/parallelogram1.json", "question": "ABCD is a parallelogram such that AB is parallel to DC and DA parallel to CB. The length of side AB is 20 cm. E is a point between A and B such that the length of AE is 3 cm. F is a point between points D and C. Find the length of DF in cm such that the segment EF divide the parallelogram in two regions with equal areas.", "prediction": 20.0, "answer": 17, "rationale": "def solve():\n    # Let's define the length of AB\n    AB = 20\n    # Let's define the length of AE\n    AE = 3\n    # Let's define the area of the parallelogram\n    Area = (AB * AE) / 2\n    # Let's calculate the length of DF\n    DF = (2 * Area) / AE\n    return DF", "answer_type": "integer"}
{"id": "wenhuchen/parallelogram2.json", "question": "ABCD is a parallelogram. E is the midpoint, F is also a midpoint. Area of AFG = 10, Area of EGH = 3. What is Area CDH?", "prediction": 25, "answer": 7, "rationale": "def solve():\n    # Area of parallelogram = base * height\n    # Since AFG and EGH are midpoints, we can assume that AFG and EGH are equal in area\n    # Therefore, Area of AFG = Area of EGH = 10/2 = 5\n    # Since AFG and EGH are equal in area, we can assume that the base of CDH is equal to the height of AFG\n    # Therefore, Area of CDH = base * height = 5 * 5 = 25\n    return 25", "answer_type": "integer"}
{"id": "wenhuchen/quadrilateral1.json", "question": "Find the size of angle x in the figure.", "prediction": 0, "answer": 24, "rationale": "def solve():\n    # Let's define the given angles\n    angle_a = 30\n    angle_b = 60\n    angle_c = 90\n    # Let's use the triangle sum theorem\n    x = 180 - (angle_a + angle_b + angle_c)\n    return x", "answer_type": "integer"}
{"id": "wenhuchen/quadrilateral2.json", "question": "ABCD is a Quadrilateral. E is the midpoint of BC. F is the midpoint of AD. Area of ABG=9 and Area of GEHF=21. What is the Area of CHD?", "prediction": 6.9544547551373446e-15, "answer": 12, "rationale": "def solve():\n    # Let's define the area of a triangle function\n    def area_triangle(a, b, c):\n        # use Heron's formula\n        s = (a + b + c) / 2\n        return (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    # Let's define the area of a quadrilateral function\n    def area_quadrilateral(a, b, c, d):\n        # use the formula for the area of a quadrilateral\n        return area_triangle(a, b, c) + area_triangle(a, d, c)\n    # Let's calculate the area of CHD\n    return area_quadrilateral(9, 21, 9, 21)", "answer_type": "integer"}
{"id": "wenhuchen/rectangle1.json", "question": "Square ABCD center O. Right AEB. \u2220ABE = 53. Find the numeric value of \u2220OFC.", "prediction": 127, "answer": 82.0, "rationale": "def solve():\n    # Let's define the angle of the triangle\n    angle_ABE = 53\n    # Since the triangle is a right triangle, the sum of the angles is 180\n    angle_OFC = 180 - angle_ABE\n    return angle_OFC", "answer_type": "float"}
{"id": "wenhuchen/rectangle2.json", "question": "Square ABCD. CT: tangent to semicircle. Find the angle \u2220CTD. Return the numeric value.", "prediction": 55, "answer": 63.4, "rationale": "def solve():\n    # Let's define the angle \u2220CTD\n    angle_CTD = 180 - 90 # since CT is tangent to semicircle\n    return angle_CTD\ndef solve():\n    # Let's write the program step by step\n    # Let's define a function to calculate the sum\n    def sum_natural_numbers(n):\n        # define the base case\n        if n == 0:\n            return 0\n        else:\n            # use the recursive formula\n            return n + sum_natural_numbers(n-1)\n    return sum_natural_numbers(10)", "answer_type": "float"}
{"id": "wenhuchen/rectangle3.json", "question": "Square ABCD. Rectangle AEFG. The degree of \u2220AFG=20. Please find \u2220AEB in terms of degree. Return the numeric value.", "prediction": 70, "answer": 25.0, "rationale": "def solve():\n    # Let's define the angles of the square ABCD\n    angle_A = 90\n    angle_B = 90\n    angle_C = 90\n    angle_D = 90\n    # Let's define the angles of the rectangle AEFG\n    angle_E = 90\n    angle_F = 20\n    angle_G = 90\n    # Let's calculate the angle AEB\n    angle_AEB = angle_A + angle_E - angle_F - angle_G\n    return angle_AEB", "answer_type": "float"}
{"id": "wenhuchen/relativity1.json", "question": "The earth and sun are 8.3 light-minutes apart. Ignore their relative motion for this problem and assume they live in a single inertial frame, the Earth-Sun frame. Events A and B occur at t = 0 on the earth and at 2 minutes on the sun respectively. Find the time difference in minutes between the events according to an observer moving at u = 0.8c from Earth to Sun. Repeat if observer is moving in the opposite direction at u = 0.8c.", "prediction": [0.3999999999999999, 3.6], "answer": 14, "rationale": "def solve():\n    # Define the speed of light\n    c = 3 * 10**8\n    # Define the speed of the observer\n    u = 0.8 * c\n    # Define the time difference between the events\n    t_diff = 2 - 0\n    # Define the distance between the Earth and the Sun\n    d = 8.3 * 60 * c\n    # Calculate the time difference according to the observer moving from Earth to Sun\n    t_diff_observer_1 = t_diff * (1 - u/c)\n    # Calculate the time difference according to the observer moving from Sun to Earth\n    t_diff_observer_2 = t_diff * (1 + u/c)\n    return [t_diff_observer_1, t_diff_observer_2]", "answer_type": "integer"}
{"id": "wenhuchen/relativity2.json", "question": "A muon has a lifetime of 2 x 10^{-6} s in its rest frame. It is created 100 km above the earth and moves towards it at a speed of 2.97 x 10^8 m/s. At what altitude in km does it decay? Return a numeric number.", "prediction": 99.406, "answer": 4.2, "rationale": "def solve():\n    # Define the lifetime of the muon\n    lifetime = 2 * 10**-6\n    # Define the speed of the muon\n    speed = 2.97 * 10**8\n    # Calculate the distance travelled by the muon\n    distance = speed * lifetime\n    # Calculate the altitude at which the muon decays\n    altitude = 100 - (distance / 1000)\n    return altitude", "answer_type": "float"}
{"id": "wenhuchen/relativity3.json", "question": "An observer S who lives on the x-axis sees a flash of red light at x = 1210 m, then after 4.96 \u00b5s, a flash of blue at x = 480 m. Use subscripts R and B to label the coordinates of the events. What is the measured time interval (in \u00b5s) between these flashes?", "prediction": 4960000.0, "answer": 4.32, "rationale": "def solve():\n    # Let's define the coordinates of the events\n    x_R = 1210\n    x_B = 480\n    # Let's define the time interval\n    t_R = 0\n    t_B = 4.96\n    # Let's calculate the time interval\n    t_interval = t_B - t_R\n    # Let's convert the time interval to \u00b5s\n    t_interval_micros = t_interval * 10**6\n    return t_interval_micros", "answer_type": "float"}
{"id": "wenhuchen/scent.json", "question": "Given the following equation: x^4 - x - 10 = 0. determine the initial approximations for finding the smallest positive root. Use these to find the root correct to three decimal places with Secant method.", "prediction": null, "answer": 1.856, "rationale": "def solve():\n    # Let's define the equation\n    def equation(x):\n        return x**4 - x - 10\n    # Let's define the Secant method\n    def secant(x0, x1, epsilon):\n        x2 = x1 - equation(x1)*(x1 - x0)/(equation(x1) - equation(x0))\n        while abs(x2 - x1) > epsilon:\n            x0 = x1\n            x1 = x2\n            x2 = x1 - equation(x1)*(x1 - x0)/(equation(x1) - equation(x0))\n        return x2\n    # Let's define the initial approximations\n    x0 = 0\n    x1 = 1\n    # Let's define the accuracy\n    epsilon = 0.001\n    # Let's find the root\n    return secant(x0, x1, epsilon)", "answer_type": "float"}
{"id": "wenhuchen/series_convergen1.json", "question": "Does the following series $\\sum_{i=0}^{\\infty} \\frac{n!}{n^2 cos(n)}$ converge?", "prediction": null, "answer": 0.0, "rationale": "def solve():\n    # Let's define the series\n    def series(n):\n        return (math.factorial(n) / (n**2 * math.cos(n)))\n    # Let's define the sum of the series\n    def sum_series(n):\n        sum = 0\n        for i in range(n):\n            sum += series(i)\n        return sum\n    # Let's check if the series converges\n    for i in range(1, 1000):\n        if sum_series(i) == sum_series(i+1):\n            return False\n    return True", "answer_type": "float"}
{"id": "wenhuchen/series_convergen2.json", "question": "Does the following series $\\sum_{i=0}^{\\infty} \\frac{n-1}{n^3+1}$ converge?", "prediction": null, "answer": 1.0, "rationale": "def solve():\n    # Let's define a function to calculate the sum of the series\n    def series_sum(n):\n        # define the base case\n        if n == 0:\n            return 0\n        else:\n            # use the formula for the series\n            return (n-1)/(n**3+1) + series_sum(n-1)\n    # Let's calculate the sum of the series for n = 1000\n    sum_1000 = series_sum(1000)\n    # Let's calculate the sum of the series for n = 10000\n    sum_10000 = series_sum(10000)\n    # Let's compare the two sums\n    if sum_1000 == sum_10000:\n        # if the two sums are equal, the series converges\n        return True\n    else:\n        # if the two sums are not equal, the series diverges\n        return False", "answer_type": "float"}
{"id": "wenhuchen/series_convergen3.json", "question": "Does the following series $\\sum_{i=0}^{\\infty} \\frac{n^2 ln(n)}{n!}$ converge?", "prediction": null, "answer": 1.0, "rationale": "def solve():\n    # Let's define a function to calculate the sum of the series\n    def series_sum(n):\n        # define the base case\n        if n == 0:\n            return 0\n        # use the recursive formula\n        else:\n            return (n**2 * math.log(n))/math.factorial(n) + series_sum(n-1)\n    # Let's calculate the sum of the series for n = 1000\n    sum_1000 = series_sum(1000)\n    # Let's calculate the sum of the series for n = 1001\n    sum_1001 = series_sum(1001)\n    # Let's compare the two sums\n    if sum_1000 == sum_1001:\n        # if the two sums are equal, the series converges\n        return True\n    else:\n        # if the two sums are not equal, the series diverges\n        return False", "answer_type": "float"}
{"id": "wenhuchen/stoke's_theorem1.json", "question": "Use Stoke's Theorem to evaluate $\\iint_S curl \\vec{F} \\cdot d \\vec{r}$ where $\\vec{F} = z^2 \\vec{i} - 3xy \\vec{j} + x^3y^3 \\vec{k}$ and $S$ is the part of $z = 5 - x^2 - y^2$ above the plane $z$=1. Assume that S is oriented upwards.", "prediction": -223.99679999999694, "answer": 0.0, "rationale": "def solve():\n    # Let's define the vector field\n    def F(x, y, z):\n        return [z**2, -3*x*y, x**3*y**3]\n    # Let's define the surface\n    def S(x, y):\n        return 5 - x**2 - y**2\n    # Let's define the normal vector\n    def n(x, y):\n        return [2*x, 2*y, -1]\n    # Let's define the curl of F\n    def curlF(x, y, z):\n        return [-3*y, 3*x, 6*z]\n    # Let's define the integral\n    def integral(xmin, xmax, ymin, ymax):\n        # Let's define the step size\n        h = 0.01\n        # Let's define the sum\n        sum = 0\n        # Let's loop through the x and y values\n        for x in np.arange(xmin, xmax, h):\n            for y in np.arange(ymin, ymax, h):\n                # Let's calculate the z value\n                z = S(x, y)\n                # Let's calculate the dot product\n                dot = np.dot(curlF(x, y, z), n(x, y))\n                # Let's add the value to the sum\n                sum += dot * h**2\n        return sum\n    # Let's calculate the integral\n    return integral(-2, 2, -2, 2)", "answer_type": "float"}
{"id": "wenhuchen/stoke's_theorem2.json", "question": "Use Stoke's Theorem to evaluate $\\int_C \\vec{F} \\cdot d \\vec{r}$ where $\\vec{F} = z^2 \\vec{i} + y^2 \\vec{j} + x \\vec{k}$ and $C$ is the triangle with vertices (1,0,0), (0,1,0) and (0,0,1) with counter-clockwise rotation.", "prediction": 0.5, "answer": -0.166, "rationale": "def solve():\n    # Let's define the vector field\n    def F(x, y, z):\n        return z**2 * x + y**2 * y + x * z\n    # Let's define the triangle\n    triangle = [(1, 0, 0), (0, 1, 0), (0, 0, 1)]\n    # Let's define the normal vector\n    normal = (1, 1, 1)\n    # Let's define the area of the triangle\n    area = 0.5\n    # Let's use Stoke's Theorem to evaluate the integral\n    integral = 0\n    for i in range(3):\n        integral += F(*triangle[i]) * normal[i]\n    integral *= area\n    return integral", "answer_type": "float"}
{"id": "wenhuchen/synthetic_division.json", "question": "Determine the multiplicity of the root \u03be = 1, of the polynomial P(x) = x^5 - 2x^4 + 4x^3 - x^2 - 7x + 5 = 0 using synthetic division. What is P'(2) + P''(2)? Please return the decimal number.", "prediction": 163, "answer": 163, "rationale": "def solve():\n    # Let's define the polynomial P(x)\n    def P(x):\n        return x**5 - 2*x**4 + 4*x**3 - x**2 - 7*x + 5\n    # Let's define the derivative of P(x)\n    def P_prime(x):\n        return 5*x**4 - 8*x**3 + 12*x**2 - 2*x - 7\n    # Let's define the second derivative of P(x)\n    def P_double_prime(x):\n        return 20*x**3 - 24*x**2 + 24*x - 2\n    # Let's use synthetic division to determine the multiplicity of the root\n    # Let's define the divisor\n    divisor = [1, -1, 0, 0, 0, 0]\n    # Let's define the dividend\n    dividend = [1, -2, 4, -1, -7, 5]\n    # Let's perform the synthetic division\n    quotient = [1, -3, 8, -9, -2]\n    # The multiplicity of the root is 3\n    # Let's calculate P'(2) + P''(2)\n    return P_prime(2) + P_double_prime(2)", "answer_type": "integer"}
{"id": "wenhuchen/t_test1.json", "question": "Based on field experiments, a new variety green gram is expected to given an yield of 12.0 quintals per hectare. The variety was tested on 10 randomly selected farmers fields. The yield ( quintals/hectare) were recorded as 14.3,12.6,13.7,10.9,13.7,12.0,11.4,12.0,12.6,13.1. Do the results conform the expectation with Level of significance being 5%?", "prediction": "False", "answer": true, "rationale": " First, we need to calculate the mean of the yield of the 10 farmers fields. The mean is 12.62 quintals/hectare. Then, we need to calculate the standard deviation of the yield of the 10 farmers fields. The standard deviation is 0.919 quintals/hectare. Finally, we need to calculate the t-statistic. The t-statistic is 0.845.\n\nTherefore, the answer is False.", "answer_type": "bool"}
{"id": "wenhuchen/t_test2.json", "question": "A group of 5 patients treated with medicine. A is of weight 42,39,38,60 &41 kgs. Second group of 7 patients from the same hospital treated with medicine B is of weight 38, 42, 56, 64, 68, 69, & 62 kgs. Is there any difference between medicines under significance level of 5%?", "prediction": "True", "answer": false, "rationale": " First, we need to calculate the mean of the two groups. The mean of group A is 43.2 kgs and the mean of group B is 58.3 kgs. Then, we need to calculate the standard deviation of the two groups. The standard deviation of group A is 8.3 kgs and the standard deviation of group B is 8.7 kgs. Finally, we need to calculate the t-test statistic to determine if there is a significant difference between the two groups. The t-test statistic is -5.8, which is greater than the critical value of -1.645 at a significance level of 5%.\n\nTherefore, the answer is True.", "answer_type": "bool"}
{"id": "wenhuchen/t_test3.json", "question": "The following data related the rubber percentage of two types of rubber plants, where the sample have been drawn independently. Test for their mean difference. Type 1: 6.21 5.70 6.04 4.47 5.22 4.45 4.84 5.84 5.88 5.82 6.09 5.59 6.06 5.59 6.74 5.55, Type 2: 4.28 7.71 6.48 7.71 7.37 7.20 7.06 6.40 8.93 5.91 5.51 6.36. Are there difference between these two rubber plants?", "prediction": "a difference between these two rubber plants", "answer": true, "rationale": " First, we need to calculate the mean of the two samples. The mean of Type 1 is 5.945 and the mean of Type 2 is 6.735. Then, we need to calculate the standard deviation of the two samples. The standard deviation of Type 1 is 0.812 and the standard deviation of Type 2 is 1.072. Finally, we need to calculate the t-statistic. The t-statistic is -2.845.\n\nTherefore, the answer is True, there is a difference between these two rubber plants.", "answer_type": "bool"}
{"id": "wenhuchen/taylor_expansion1.json", "question": "Let $P_5(x)$ be the fifth-degree Taylor polynomial approximation for f(x)=sin(x), centered at x=0. What is the Lagrange error of the polynomial approximation to sin(1)?.", "prediction": null, "answer": 0.000198, "rationale": "def solve():\n    # Let's define the Taylor polynomial\n    def P_5(x):\n        return x - (x**3)/6 + (x**5)/120\n    # Let's define the Lagrange error\n    def lagrange_error(x):\n        return abs(sin(x) - P_5(x))\n    return lagrange_error(1)", "answer_type": "float"}
{"id": "wenhuchen/taylor_expansion2.json", "question": "Is the Taylor Series for $f$ at x=5 where $f(x)=\\sum_{n=0}^{\\infty}\\frac{x^n}{n!} absolutely converging?", "prediction": true, "answer": 1.0, "rationale": "def solve():\n    # Let's define the Taylor Series function\n    def taylor_series(x):\n        # define the sum\n        sum = 0\n        # define the loop\n        for n in range(0, 100):\n            # calculate the sum\n            sum += (x**n)/math.factorial(n)\n        return sum\n    # calculate the Taylor Series for x=5\n    taylor_series_x5 = taylor_series(5)\n    # check if the Taylor Series is absolutely converging\n    if taylor_series_x5 < math.inf:\n        return True\n    else:\n        return False", "answer_type": "float"}
{"id": "wenhuchen/trapezoidal_rule1.json", "question": "Use the Trapezoidal Rule with to approximate $\\int_0^{\\pi} sin^2(x)dx$. Return the approximated demical value.", "prediction": null, "answer": 1.570796, "rationale": "def solve():\n    # Define the function\n    def f(x):\n        return (sin(x)**2)\n    # Define the interval\n    a = 0\n    b = pi\n    # Define the number of subintervals\n    n = 1000\n    # Calculate the width of each subinterval\n    h = (b-a)/n\n    # Calculate the sum of the first and last terms\n    s = f(a) + f(b)\n    # Calculate the sum of the remaining terms\n    for i in range(1, n):\n        s += 2*f(a+i*h)\n    # Calculate the approximated value\n    I = (h/2)*s\n    return I", "answer_type": "float"}
{"id": "wenhuchen/trapezoidal_rule2.json", "question": "A function f(x) is given by f(0)=3, f(2)=7, f(4)=11, f(6)=9, f(8)=3. Approximate the area under the curve y=f(x) between x=0 and x=8 using Trapezoidal rule with n=4 subintervals.", "prediction": 60.0, "answer": 60.0, "rationale": "def solve():\n    # Let's define the function f(x)\n    def f(x):\n        if x == 0:\n            return 3\n        elif x == 2:\n            return 7\n        elif x == 4:\n            return 11\n        elif x == 6:\n            return 9\n        elif x == 8:\n            return 3\n        else:\n            return 0\n    # Let's define the trapezoidal rule\n    def trapezoidal_rule(f, a, b, n):\n        h = (b - a) / n\n        s = 0.5 * (f(a) + f(b))\n        for i in range(1, n):\n            s = s + f(a + i * h)\n        return h * s\n    # Let's calculate the area\n    area = trapezoidal_rule(f, 0, 8, 4)\n    return area", "answer_type": "float"}
{"id": "wenhuchen/trapezoidal_rule3.json", "question": "Approximate the area under the curve y=2^{x} between x=-1 and x=3 using the Trapezoidal rule with n=4 subintervals.", "prediction": 11.25, "answer": 11.25, "rationale": "def solve():\n    # Let's define the function\n    def f(x):\n        return 2**x\n    # Let's define the trapezoidal rule\n    def trapezoidal_rule(f, a, b, n):\n        h = (b - a) / n\n        s = 0.5 * (f(a) + f(b))\n        for i in range(1, n):\n            s = s + f(a + i * h)\n        return h * s\n    # Let's call the trapezoidal rule\n    return trapezoidal_rule(f, -1, 3, 4)", "answer_type": "float"}
{"id": "wenhuchen/triangle1.json", "question": "Find the size of angle MBD in the figure below.", "prediction": 60, "answer": 72, "rationale": "def solve():\n    # Let's define the angles\n    angle_MBC = 90\n    angle_BCD = 30\n    # Use the formula for finding the size of angle MBD\n    angle_MBD = 180 - (angle_MBC + angle_BCD)\n    return angle_MBD", "answer_type": "integer"}
{"id": "wenhuchen/triangle2.json", "question": "ABC is a right triangle. AM is perpendicular to BC. The size of angle ABC is equal to 55 degrees. Find the size of angle MAC.", "prediction": 35, "answer": 55, "rationale": "def solve():\n    # We know that the sum of angles in a triangle is 180 degrees\n    # So, angle MAC = 180 - (angle ABC + angle BAC)\n    angle_ABC = 55\n    angle_BAC = 90\n    angle_MAC = 180 - (angle_ABC + angle_BAC)\n    return angle_MAC", "answer_type": "integer"}
{"id": "wenhuchen/triangle3.json", "question": "Find the measure of angle A in the figure below. Return the numeric value.", "prediction": 0, "answer": 87, "rationale": "def solve():\n    # Let's define the angles of the triangle\n    angleA = 0\n    angleB = 60\n    angleC = 120\n    # Use the triangle sum theorem\n    angleA = 180 - (angleB + angleC)\n    return angleA", "answer_type": "integer"}
{"id": "wenhuchen/vieta's_formula.json", "question": "Let m and n be the roots of the equation 2x^2 + 15x + 16 = 0. What is the value of 1/m + 1/n?", "prediction": -0.9375, "answer": -0.9375, "rationale": "def solve():\n    # Let's define the equation\n    def equation(x):\n        return 2*x**2 + 15*x + 16\n    # Let's solve the equation\n    m, n = np.roots([2, 15, 16])\n    # Let's calculate the value of 1/m + 1/n\n    return 1/m + 1/n", "answer_type": "float"}
{"id": "wenhuchen/vieta's_formula2.json", "question": "The polynomial $x^3 - Ax + 15$ has three real roots. Two of these roots sum to 5. What is |A|?", "prediction": null, "answer": 22.0, "rationale": "def solve():\n    # Let's define a function to calculate the roots of the polynomial\n    def poly_roots(a):\n        # use the quadratic formula to calculate the roots\n        root1 = (-a + (a**2 - 4*1*15)**0.5) / (2*1)\n        root2 = (-a - (a**2 - 4*1*15)**0.5) / (2*1)\n        root3 = 15/a\n        return root1, root2, root3\n    # Let's define a function to calculate the absolute value of A\n    def abs_A(r1, r2):\n        return abs(r1 + r2 - 5)\n    # Let's call the functions\n    r1, r2, r3 = poly_roots(a)\n    return abs_A(r1, r2)", "answer_type": "float"}
{"id": "wenhuchen/vieta's_formula3.json", "question": "Let $x_1$ and $x_2$ be the roots of the equation $x^2 + 3x + 1 =0$. Compute $(x_1/(x_2 + 1))^2 + (x_2 / (x_1 + 1))^2$.", "prediction": 18.0, "answer": 18.0, "rationale": "def solve():\n    # Let's define the equation\n    def equation(x):\n        return x**2 + 3*x + 1\n    # Let's solve the equation\n    x1, x2 = np.roots([1, 3, 1])\n    # Let's compute the result\n    result = (x1/(x2 + 1))**2 + (x2/(x1 + 1))**2\n    return result", "answer_type": "float"}
{"id": "wenhuchen/vieta's_formula4.json", "question": "If the quartic x^4 + 3x^3 + 11x^2 + 9x + A has roots k, l, m, and n such that kl = mn, find A.", "prediction": null, "answer": 9, "rationale": "def solve():\n    # Let's define the quartic equation\n    def quartic(x, A):\n        return x**4 + 3*x**3 + 11*x**2 + 9*x + A\n    # Let's define the function to find the roots of the quartic equation\n    def find_roots(A):\n        # Use the numpy library to find the roots of the quartic equation\n        return np.roots([1, 3, 11, 9, A])\n    # Let's define the function to check if the roots satisfy the given condition\n    def check_condition(roots):\n        # Check if the product of the first two roots is equal to the product of the last two roots\n        return roots[0]*roots[1] == roots[2]*roots[3]\n    # Let's define the function to find the value of A\n    def find_A(k, l, m, n):\n        # Use the quartic equation to find the value of A\n        return quartic(k, 0) + quartic(l, 0) - quartic(m, 0) - quartic(n, 0)\n    # Let's define the main function\n    def main():\n        # Initialize the value of A\n        A = 0\n        # Loop until the condition is satisfied\n        while True:\n            # Find the roots of the quartic equation\n            roots = find_roots(A)\n            # Check if the condition is satisfied\n            if check_condition(roots):\n                # Return the value of A\n                return A\n            # Increment the value of A\n            A += 1\n    return main()", "answer_type": "integer"}
{"id": "wenhuchen/vieta's_formula5.json", "question": "The product of two of the four roots of the quartic equation x^4 - 18x^3 +kx2 + 200x - 1984 = 0 is -32. Determine the value of k.", "prediction": 86, "answer": 86, "rationale": "def solve():\n    # Let's define the quartic equation\n    def quartic_eq(x, k):\n        return x**4 - 18*x**3 + k*x**2 + 200*x - 1984\n    # Let's define the function to calculate the product of two roots\n    def product_roots(k):\n        # Let's define the derivative of the quartic equation\n        def quartic_eq_derivative(x):\n            return 4*x**3 - 54*x**2 + 2*k*x + 200\n        # Let's find the roots of the quartic equation\n        roots = []\n        for x in range(-100, 100):\n            if quartic_eq(x, k) == 0:\n                roots.append(x)\n        # Let's find the roots of the derivative of the quartic equation\n        roots_derivative = []\n        for x in range(-100, 100):\n            if quartic_eq_derivative(x) == 0:\n                roots_derivative.append(x)\n        # Let's find the product of two roots\n        product = 1\n        for root in roots:\n            if root not in roots_derivative:\n                product *= root\n        return product\n    # Let's find the value of k\n    for k in range(-100, 100):\n        if product_roots(k) == -32:\n            return k", "answer_type": "integer"}
{"id": "wenhuchen/viterbi1.json", "question": "Assuming we are underground, and the only thing we can observe is whether a person brings an umbrella or not. The weather could be either rainy or sunny. Assuming the P(rain)=0.6 and P(sunny)=0.4. Assuming the weather on day $k$ is dependent on the weather on day $k-1$. We can write the transition probability as P(sunny $\\mid$ sunny) = P(rain $\\mid$ rain) = 0.55. The person has 60\\% chance to bring an umbrella when the weather is rainy, and 40\\% chance to bring an umbrella when the weather is sunny, i.e. P(umbrella $\\mid$ rain) = 0.6 and P(umbrella $\\mid$ sunny) = 0.4. If we observe that the person (1) brought an umbrella on day 1, (2) did not bring an umbrella on day 2, (3) brought an umbrella on day 3.  What are the most likely weather from day 1 to day 3? Return the answer as a list of binary values, where 1 represents rain and 0 represents sunny.", "prediction": [0, 1, 1], "answer": [1, 0, 1], "rationale": "def solve():\n    # Let's define the transition probability matrix\n    transition_prob = [[0.55, 0.45], [0.45, 0.55]]\n    # Let's define the emission probability matrix\n    emission_prob = [[0.6, 0.4], [0.4, 0.6]]\n    # Let's define the initial probability\n    initial_prob = [0.5, 0.5]\n    # Let's define the observations\n    observations = [1, 0, 1]\n    # Let's define the Viterbi algorithm\n    def viterbi(obs, states, start_p, trans_p, emit_p):\n        V = [{}]\n        for st in states:\n            V[0][st] = start_p[st] * emit_p[st][obs[0]]\n        # Run Viterbi when t > 0\n        for t in range(1, len(obs)):\n            V.append({})\n            for st in states:\n                max_tr_prob = max(V[t-1][prev_st] * trans_p[prev_st][st] for prev_st in states)\n                V[t][st] = emit_p[st][obs[t]] * max_tr_prob\n        opt = []\n        # The highest probability\n        max_prob = max(value for value in V[-1].values())\n        previous = None\n        # Get most probable state and its backtrack\n        for st, data in V[-1].items():\n            if data == max_prob:\n                opt.append(st)\n                previous = st\n        # Follow the backtrack till the first observation\n        for t in range(len(V) - 2, -1, -1):\n            opt.insert(0, previous)\n            max_prob = max(V[t][prev_st] * trans_p[prev_st][previous] for prev_st in states)\n            for st, data in V[t].items():\n                if data * trans_p[st][previous] == max_prob:\n                    previous = st\n        return opt\n    # Let's call the Viterbi algorithm\n    states = [0, 1]\n    return viterbi(observations, states, initial_prob, transition_prob, emission_prob)", "answer_type": "list of integer"}
{"id": "wenhuchen/viterbi2.json", "question": "Assuming we are underground, and the only thing we can observe is whether a person brings an umbrella or not. The weather could be either rainy or sunny. Assuming the P(rain)=0.6 and P(sunny)=0.4. Assuming the weather on day $k$ is dependent on the weather on day $k-1$. We can write the transition probability as P(sunny $\\mid$ sunny) = P(rain $\\mid$ rain) = 0.7. The person has 60\\% chance to bring an umbrella when the weather is rainy, and 40\\% chance to bring an umbrella when the weather is sunny, i.e. P(umbrella $\\mid$ rain) = 0.6 and P(umbrella $\\mid$ sunny) = 0.4. If we observe that the person (1) brought an umbrella on day 1, (2) did not bring an umbrella on day 2, (3) brought an umbrella on day 3.  What are the most likely weather from day 1 to day 3? Return the answer as a list of binary values, where 1 represents rain and 0 represents sunny.", "prediction": [1, 1, 1], "answer": [1, 1, 1], "rationale": "def solve():\n    # Let's define the transition probability matrix\n    transition_prob = [[0.7, 0.3], [0.3, 0.7]]\n    # Let's define the emission probability matrix\n    emission_prob = [[0.6, 0.4], [0.4, 0.6]]\n    # Let's define the initial probability\n    initial_prob = [0.5, 0.5]\n    # Let's define the observations\n    observations = [1, 0, 1]\n    # Let's define the Viterbi algorithm\n    def viterbi(obs, states, start_p, trans_p, emit_p):\n        V = [{}]\n        for st in states:\n            V[0][st] = start_p[st] * emit_p[st][obs[0]]\n        # Run Viterbi when t > 0\n        for t in range(1, len(obs)):\n            V.append({})\n            for st in states:\n                max_tr_prob = max(V[t-1][prev_st] * trans_p[prev_st][st] for prev_st in states)\n                V[t][st] = emit_p[st][obs[t]] * max_tr_prob\n        opt = []\n        # The highest probability\n        max_prob = max(value for value in V[-1].values())\n        previous = None\n        # Get most probable state and its backtrack\n        for st, data in V[-1].items():\n            if data == max_prob:\n                opt.append(st)\n                previous = st\n        # Follow the backtrack till the first observation\n        for t in range(len(V) - 2, -1, -1):\n            opt.insert(0, previous)\n            max_prob = max(V[t][prev_st] * trans_p[prev_st][previous] for prev_st in states)\n            for st, data in V[t].items():\n                if data * trans_p[st][previous] == max_prob:\n                    previous = st\n        return opt\n    # Let's define the states\n    states = [0, 1]\n    # Let's call the Viterbi algorithm\n    result = viterbi(observations, states, initial_prob, transition_prob, emission_prob)\n    return result", "answer_type": "list of integer"}
{"id": "wenhuchen/viterbi3.json", "question": "Assuming we are underground, and the only thing we can observe is whether a person brings an umbrella or not. The weather could be either rainy or sunny. Assuming the P(rain)=0.6 and P(sunny)=0.4. Assuming the weather on day $k$ is dependent on the weather on day $k-1$. We can write the transition probability as P(sunny $\\mid$ sunny) = P(rain $\\mid$ rain) = 0.7. The person has 60\\% chance to bring an umbrella when the weather is rainy, and 40\\% chance to bring an umbrella when the weather is sunny, i.e. P(umbrella $\\mid$ rain) = 0.6 and P(umbrella $\\mid$ sunny) = 0.4. If we observe that the person (1) brought an umbrella on day 1, (2) did not bring an umbrella on day 2, (3) brought an umbrella on day 3, (4) did not bring an umbrella on day 4.  What are the most likely weather from day 1 to day 4? Return the answer as a list of binary values, where 1 represents rain and 0 represents sunny.", "prediction": [1, 1, 1, 1], "answer": [1, 1, 1, 1], "rationale": "def solve():\n    # Let's define the transition probability matrix\n    transition_prob = [[0.7, 0.3], [0.3, 0.7]]\n    # Let's define the emission probability matrix\n    emission_prob = [[0.6, 0.4], [0.4, 0.6]]\n    # Let's define the initial probability\n    initial_prob = [0.5, 0.5]\n    # Let's define the observations\n    observations = [1, 0, 1, 0]\n    # Let's define the Viterbi algorithm\n    def viterbi(obs, states, start_p, trans_p, emit_p):\n        V = [{}]\n        for st in states:\n            V[0][st] = start_p[st] * emit_p[st][obs[0]]\n        # Run Viterbi when t > 0\n        for t in range(1, len(obs)):\n            V.append({})\n            for st in states:\n                max_tr_prob = max(V[t-1][prev_st] * trans_p[prev_st][st] for prev_st in states)\n                for prev_st in states:\n                    if V[t-1][prev_st] * trans_p[prev_st][st] == max_tr_prob:\n                        max_prob = max_tr_prob * emit_p[st][obs[t]]\n                        V[t][st] = max_prob\n                        break\n        opt = []\n        # The highest probability\n        max_prob = max(value for value in V[-1].values())\n        previous = None\n        # Get most probable state and its backtrack\n        for st, data in V[-1].items():\n            if data == max_prob:\n                opt.append(st)\n                previous = st\n                break\n        # Follow the backtrack till the first observation\n        for t in range(len(V) - 2, -1, -1):\n            opt.insert(0, previous)\n            max_prob = max(V[t][prev_st] * trans_p[prev_st][previous] for prev_st in states)\n            for prev_st in states:\n                if V[t][prev_st] * trans_p[prev_st][previous] == max_prob:\n                    previous = prev_st\n                    break\n        return opt\n    # Let's define the states\n    states = [0, 1]\n    # Let's call the Viterbi algorithm\n    result = viterbi(observations, states, initial_prob, transition_prob, emission_prob)\n    return result", "answer_type": "list of integer"}
{"id": "wenhuchen/volume.json", "question": "Find the volume of a solid bounded by the elliptical paraboloid $z=2x^2 + y^2 + 1$, the plane x+y=1, and the coordinate planes.", "prediction": null, "answer": 0.75, "rationale": "def solve():\n    # Let's define the function to calculate the volume\n    def volume(x, y):\n        # use the formula for the volume of a solid\n        return (2*x**2 + y**2 + 1)*(x+y-1)\n    # Let's define the limits of integration\n    x_min = 0\n    x_max = 1\n    y_min = 0\n    y_max = 1\n    # Let's use the double integral to calculate the volume\n    return integrate.dblquad(volume, x_min, x_max, y_min, y_max)[0]", "answer_type": "float"}
{"id": "wenhuchen/wiener_process1.json", "question": "Let W(t) be the standard Brownian motion. Find P(W(1) + W(2) > 2).", "prediction": null, "answer": 0.186, "rationale": "def solve():\n    # Let's import the necessary libraries\n    import numpy as np\n    from scipy.stats import norm\n    # Let's define the probability function\n    def prob(x):\n        return norm.cdf(x)\n    # Let's calculate the probability\n    return 1 - prob(2)", "answer_type": "float"}
{"id": "wenhuchen/wiener_process2.json", "question": "Let W(t) be the standard Brownian motion, and 0 < s < t. Find the conditional PDF of W(s = 1/2) given that W(t = 1) = 2. What are the mean and variance? Return the list of [mean, variance].", "prediction": [2, 0.25], "answer": [1, 0], "rationale": "def solve():\n    # Let's define the conditional PDF of W(s) given W(t)\n    def cond_pdf(s, t, wt):\n        # define the parameters\n        mu = 0\n        sigma = (t - s)**0.5\n        # calculate the conditional PDF\n        pdf = (1 / (sigma * (2 * np.pi)**0.5)) * np.exp(-0.5 * ((wt - mu) / sigma)**2)\n        return pdf\n    # calculate the mean and variance\n    mean = 2\n    variance = (1/2)**2\n    return [mean, variance]", "answer_type": "list of integer"}
{"id": "wenhuchen/wiener_process3.json", "question": "Let W(t) be the standard Brownian motion. Define X(t) = exp{W(t)}, for all t \\in [0, \\infty). Let 0 < s < t. Find Cov(X(s=1/2), X(t=1)).", "prediction": 2.123505016288045, "answer": 1.3733, "rationale": "def solve():\n    # Let's define the standard Brownian motion\n    def W(t):\n        return t**2\n    # Let's define X(t)\n    def X(t):\n        return math.exp(W(t))\n    # Let's define the covariance\n    def Cov(s, t):\n        return X(s)*X(t) - X(s/2)*X(t/2)\n    return Cov(1/2, 1)", "answer_type": "float"}
{"id": "xinyi/Concavity_of_second_law_of_thermodynamics.json", "question": "$H(X_n|X_0)$ is a concave function of n for a stationary Markov process. True or False?", "prediction": "True", "answer": true, "rationale": " A stationary Markov process is a process whose transition probability matrix does not change over time. The entropy of a random variable is a measure of the uncertainty associated with it. Therefore, the entropy of a random variable $X_n$ given $X_0$ is a measure of the uncertainty associated with $X_n$ given the knowledge of $X_0$. Since the transition probability matrix does not change over time, the entropy of $X_n$ given $X_0$ is a concave function of n.\n\nTherefore, the answer is True.", "answer_type": "bool"}
{"id": "xinyi/Gaussian_channel.json", "question": "Consider an additive white Gaussian noise channel with an expected output power constraint $P=2$. Thus $Y = X + Z$, $Z \\sim N(0, 1)$, $Z$ is independent of $X$, and $E(Y)^2 \\leq 2$. Find the channel capacity in bits.", "prediction": 1.584962500721156, "answer": 0.5, "rationale": "def solve():\n    # Let's define the channel capacity function\n    def channel_capacity(P):\n        # use the formula for channel capacity\n        return np.log2(1 + P)\n    return channel_capacity(2)", "answer_type": "float"}
{"id": "xinyi/angular_momentum.json", "question": "Under some circumstances, a star can collapse into an extremely dense object made mostly of neutrons and called a neutron star. The density of a neutron star is roughly $10^14$ times as great as that of ordinary solid matter. Suppose we represent the star as a uniform, solid, rigid sphere, both before and after the collapse. The star's initial radius was $7 \\tims 10^5$ km (comparable to our sun); its final radius is 16 km. If the original star rotated once in 30 days, find the angular speed (in rad/s) of the neutron star.", "prediction": 5.5407277841089827e-11, "answer": 4600.0, "rationale": "def solve():\n    # Let's define the variables\n    initial_radius = 7 * 10**5 # km\n    final_radius = 16 # km\n    period = 30 # days\n    \n    # Let's calculate the angular speed\n    angular_speed = (2 * np.pi) / (period * 24 * 3600) # rad/s\n    \n    # Let's calculate the ratio of the radii\n    ratio = initial_radius / final_radius\n    \n    # Let's calculate the angular speed of the neutron star\n    angular_speed_neutron_star = angular_speed / ratio # rad/s\n    \n    return angular_speed_neutron_star", "answer_type": "float"}
{"id": "xinyi/binary_symmetric_channel_1.json", "question": "A cascade of $n$ identical independent binary symmetric channels each with raw error probability $p$, and $0<p<1$. What is the capacity of the cascade when $n$ goes to infinity?", "prediction": null, "answer": 0.0, "rationale": "def solve():\n    # Let's define a function to calculate the capacity of the cascade\n    def capacity(n, p):\n        # use the formula for capacity of cascade\n        return 1 - (1 - p)**n\n    # Let's define a function to calculate the capacity when n goes to infinity\n    def capacity_inf(p):\n        # use the formula for capacity of cascade when n goes to infinity\n        return 1 - (1 - p)\n    return capacity_inf(p)", "answer_type": "float"}
{"id": "xinyi/binary_symmetric_channel_2.json", "question": "Suppose that feedback is used on a binary symmetric channel with parameter $p=0.5$. Each time a $Y$ is received, it becomes the next transmission. Thus $X_1$ is Bern(1/2), $X_2=Y_1$, $X_3=Y_2$, \\ldots, X_n=Y_{n-1}. Find $\\lim_{n\\to\\infty} \\frac{1}{n} I(X_n;Y_n)$ in bits.", "prediction": 55.0, "answer": 1.0, "rationale": "def solve():\n    # Let's define the function to calculate the mutual information\n    def mutual_information(p):\n        # use the formula for mutual information\n        return p*np.log2(p) + (1-p)*np.log2(1-p)\n    # Let's calculate the limit\n    return np.lim(mutual_information(0.5)/n)\ndef solve():\n    # Let's write the program step by step\n    # Let's define a function to calculate the sum\n    def sum_of_numbers(n):\n        # use the formula for sum of natural numbers\n        return n*(n+1)/2\n    return sum_of_numbers(10)", "answer_type": "float"}
{"id": "xinyi/capacity_of_photographic_film.json", "question": "We are interested in the capacity of photographic film. The film consists of silver iodide crystals, Poisson distributed, with a density of 100 particles per unit area. The film is illuminated without knowledge of the position of the silver iodide particles. It is then developed and the receiver sees only the silver iodide particles that have been illuminated. It is assumed that light incident on a cell exposes the grain if it is there and otherwise results in a blank response. Silver iodide particles that are not illuminated and vacant portions of the film remain blank. We make the following assumptions: We grid the film very finely into cells of area $dA$. It is assumed that there is at most one silver iodide particle per cell and that no silver iodide particle is intersected by the cell boundaries. Thus, the film can be considered to be a large number of parallel binary asymmetric channels with crossover probability $1 - 100dA$. What is the capacity of a 0.1 unit area film?", "prediction": NaN, "answer": 10.0, "rationale": "def solve():\n    # Let's define the crossover probability\n    crossover_prob = 1 - 100 * 0.1\n    # Let's calculate the capacity\n    capacity = 0.5 * np.log2(1 + crossover_prob)\n    return capacity", "answer_type": "float"}
{"id": "xinyi/change_of_variable.json", "question": "Consider a probability density $p_x(x)$ defined over a continuous variable x, and suppose that we make a nonlinear change of variable using $x = g(y)$. The location $\\hat{y}$ of the maximum of the density in $y$ is not in general related to the location $\\hat{x}$ \u0302of the maximum of the density over x by the simple functional relation $\\hat{x} = g(\u0302\\hat{y})$.", "prediction": "False", "answer": true, "rationale": "\n\nFirst, we need to find the maximum of the density in $y$. We can do this by taking the derivative of the density with respect to $y$ and setting it equal to zero.\n\nSecond, we need to find the maximum of the density over $x$. We can do this by taking the derivative of the density with respect to $x$ and setting it equal to zero.\n\nFinally, we need to compare the two maxima. We can do this by comparing the two equations we found in the first two steps.\n\nTherefore, the answer is False.", "answer_type": "bool"}
{"id": "xinyi/change_of_variable_linear.json", "question": "Consider a probability density $p_x(x)$ defined over a continuous variable x, and suppose that we make a nonlinear change of variable using $x = g(y)$. In the case of a linear transformation, the location of the maximum density transforms in the same way as the variable itself.", "prediction": "True", "answer": true, "rationale": "\n\nFirst, we need to find the probability density $p_x(x)$. Then, we need to make a nonlinear change of variable using $x = g(y)$. Finally, we need to determine if the location of the maximum density transforms in the same way as the variable itself.\n\nTherefore, the answer is True.", "answer_type": "bool"}
{"id": "xinyi/channel_capacity_1.json", "question": "One is given a communication channel with transition probabilities $p(y|x)$ and channel capacity $C=max_{p(x)}I(X;Y)$. If we preprocesses the output by forming $Y=g(Y)$ the capacity will not improve. True or False?", "prediction": "True", "answer": true, "rationale": " The capacity of a channel is the maximum mutual information between the input and output. If we preprocess the output, the mutual information between the input and output will not change, so the capacity will not improve. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "xinyi/channel_capacity_2.json", "question": "Consider a 26-key typewriter. Suppose that pushing a key results in printing that letter or the next (with equal probability). Thus A results in A or B, ..., Z results in Z or A. What is the capacity in bits?", "prediction": 13.0, "answer": 3.7, "rationale": "def solve():\n    # Let's define the capacity in bits\n    capacity = 0\n    # Let's calculate the capacity for each key\n    for i in range(26):\n        # Let's calculate the probability of each letter\n        p = 0.5\n        # Let's calculate the capacity for each key\n        capacity += p * math.log2(1/p)\n    return capacity", "answer_type": "float"}
{"id": "xinyi/channel_capacity_3.json", "question": "Adding a row to a channel transition matrix does not decrease capacity. True or False?", "prediction": "True", "answer": true, "rationale": " A channel transition matrix is a matrix that describes the probability of transitioning from one state to another. Adding a row to the matrix does not change the probability of transitioning from one state to another, so it does not decrease capacity. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "xinyi/channel_capacity_4.json", "question": "Consider the discrete memoryless channel $Y=XZ$ where $X$ and $Z$ are independent binary random variables that take on values 0 and 1. Let $P(Z=1)=0.5$. Find the capacity of this channel in bits.", "prediction": -2.0, "answer": 0.322, "rationale": "def solve():\n    # Let's define the probability of X and Z\n    p_x = 0.5\n    p_z = 0.5\n    # Let's calculate the capacity of the channel\n    capacity = p_x * p_z * np.log2(p_x * p_z) + (1 - p_x) * p_z * np.log2((1 - p_x) * p_z) + p_x * (1 - p_z) * np.log2(p_x * (1 - p_z)) + (1 - p_x) * (1 - p_z) * np.log2((1 - p_x) * (1 - p_z))\n    return capacity", "answer_type": "float"}
{"id": "xinyi/chi_square_test.json", "question": "The Chi-square statistic $\\chi^2=\\sum_c\\frac{(P(x)-Q(x))^2}{Q(x)}$ is (twice) the first term in the Taylor series expansion of $D(P||Q)$ about $Q$. True or False?", "prediction": "True", "answer": true, "rationale": " The Chi-square statistic $\\chi^2$ is the first term in the Taylor series expansion of $D(P||Q)$ about $Q$. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "xinyi/concavity.json", "question": "Consider a source X with a distortion measure $d(x, \\hat{x})$ that satisfies the following property: all columns of the distortion matrix are permutations of the set $\\{d_1, d_2, \\ldots, d_m\\}$. The function $\\phi(D) = \\max_{b:\\sum_{i=1}^m p_i d_i \\leq D} H(p)$ is concave. True or False?", "prediction": "True", "answer": true, "rationale": " First, we need to understand what the given statement is saying. It is saying that the distortion measure $d(x, \\hat{x})$ has all columns of the distortion matrix as permutations of the set $\\{d_1, d_2, \\ldots, d_m\\}$. Then, it is saying that the function $\\phi(D) = \\max_{b:\\sum_{i=1}^m p_i d_i \\leq D} H(p)$ is concave. \n\nTherefore, the answer is True.", "answer_type": "bool"}
{"id": "xinyi/convex_hull.json", "question": "Two sets of points are linearly separable if and only if their convex hulls are disjoint. True or False?", "prediction": "True", "answer": true, "rationale": " A set of points is linearly separable if there exists a line that can separate the points into two distinct groups. The convex hull of a set of points is the smallest convex set that contains all the points. Therefore, two sets of points are linearly separable if and only if their convex hulls are disjoint. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "xinyi/cramer_rao_lower_bound_1.json", "question": "What is the Cramer-Rao lower bound on $E_\\theta(\\hat{\\theta}(X)-\\theta)^2$, where $\\hat{\\theta}(X)$ is an unbaised estimator of $\\theta$ for the Gaussian distribution family $f_\\theta(x)=N(0,\\theta)$? (a) $2\\theta$. (b) $2\\theta^2$. (c) $0.5\\theta^{-1}$. (d) $0.5\\theta^{-2}$. Which option is correct?", "prediction": "(b)", "answer": "(b)", "rationale": " The Cramer-Rao lower bound is the lower bound of the variance of an unbiased estimator. For the Gaussian distribution family $f_\\theta(x)=N(0,\\theta)$, the variance of an unbiased estimator is $\\theta^2$. Therefore, the Cramer-Rao lower bound on $E_\\theta(\\hat{\\theta}(X)-\\theta)^2$ is $2\\theta^2$. Therefore, the answer is (b).", "answer_type": "option"}
{"id": "xinyi/cramer_rao_lower_bound_2.json", "question": "What is the Cramer-Rao lower bound on $E_\\theta(\\hat{\\theta}(X)-\\theta)^2$, where $\\hat{\\theta}(X)$ is an unbaised estimator of $\\theta$ for the distribution family $f_\\theta(x)=\\theta e^{-\\theta x}$, $x \\geq 0$? (a) $\\theta$. (b) $\\theta^2$. (c) $\\theta^{-1}$. (d) $\\theta^{-2}$.", "prediction": "(d) $\\theta^{-2}$", "answer": "(a)", "rationale": "\n\nFirst, the Cramer-Rao lower bound is the lower bound of the variance of an unbiased estimator.\n\nSecond, for the given distribution family $f_\\theta(x)=\\theta e^{-\\theta x}$, $x \\geq 0$, the variance of an unbiased estimator $\\hat{\\theta}(X)$ is $\\theta^{-2}$.\n\nTherefore, the answer is (d) $\\theta^{-2}$.", "answer_type": "option"}
{"id": "xinyi/dag_1.json", "question": "If there exists an ordered numbering of the nodes such that for each node there are no links going to a lower-numbered node, then there are no directed cycles in a directed graph. True or false?", "prediction": "True", "answer": true, "rationale": " If there exists an ordered numbering of the nodes such that for each node there are no links going to a lower-numbered node, then there are no directed cycles in a directed graph. This means that if the nodes are numbered in a way that no node has a link to a lower-numbered node, then there are no directed cycles in the graph. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "xinyi/dag_2.json", "question": "A distribution represented by a directed tree can be written as an equivalent distribution over the corresponding undirected tree. True or false?", "prediction": "True", "answer": true, "rationale": " A directed tree is a graph with directed edges, while an undirected tree is a graph with undirected edges. Therefore, a distribution represented by a directed tree can be written as an equivalent distribution over the corresponding undirected tree if the directed edges are replaced by undirected edges.\n\nTherefore, the answer is True.", "answer_type": "bool"}
{"id": "xinyi/dag_3.json", "question": "How many distinct directed trees can be constructed from a undirected tree with 100 nodes?", "prediction": 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, "answer": 100, "rationale": "def solve():\n    # Let's define a function to calculate the number of distinct directed trees\n    def num_distinct_trees(n):\n        # use the formula to calculate the number of distinct directed trees\n        return (n**(n-2))\n    return num_distinct_trees(100)", "answer_type": "integer"}
{"id": "xinyi/data_processing.json", "question": "Is the conditional entropy $H(X_0|X_n)$ non-decreasing with n for any Markov chain?", "prediction": "True", "answer": true, "rationale": " The conditional entropy $H(X_0|X_n)$ is the entropy of $X_0$ given the knowledge of $X_n$. Since the Markov chain is a memoryless process, the knowledge of $X_n$ does not provide any additional information about $X_0$ and thus the conditional entropy $H(X_0|X_n)$ is non-decreasing with n. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "xinyi/differential_entropy.json", "question": "Roughly how many bits are required on the average to describe to 3 digit accuracy the decay time (in years) of a radium atom if the half-life of radium is 80 years? Note that half-life is the median of the distribution.", "prediction": 6, "answer": 19, "rationale": "def solve():\n    # Let's calculate the number of bits required\n    # We know that the half-life of radium is 80 years\n    # We need to describe the decay time to 3 digit accuracy\n    # So, the range of values is 0 to 80 years\n    # We can calculate the number of bits required using the formula:\n    # Number of bits = log2(range)\n    # So, the number of bits required is:\n    return int(math.log2(80))", "answer_type": "integer"}
{"id": "xinyi/distortion_rate_function_1.json", "question": "The distortion rate function $D(R)=\\min_{p(\\hat{x}|x):I(X;\\hat{X})\\leq R} E(d(X,\\hat{X}))$ is nonincreasing. True or False?", "prediction": "True", "answer": true, "rationale": " The distortion rate function $D(R)$ is a function of $R$, which means that it is a function of the mutual information between $X$ and $\\hat{X}$. Since the mutual information is nonincreasing, the distortion rate function $D(R)$ is also nonincreasing. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "xinyi/distortion_rate_function_2.json", "question": "The distortion rate function $D(R)=\\min_{p(\\hat{x}|x):I(X;\\hat{X})\\leq R} E(d(X,\\hat{X}))$ is convex. True or False?", "prediction": "True", "answer": true, "rationale": " The distortion rate function $D(R)$ is a function of $R$ and it is defined as the minimum of the expectation of the distortion $d(X,\\hat{X})$ when the mutual information $I(X;\\hat{X})$ is less than or equal to $R$. Since the distortion rate function is a minimum of a convex function, it is also convex. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "xinyi/entropy.json", "question": "An ordinary deck of cards containing 26 red cards and 26 black cards is shuffled and dealt out one card at a time without replacement. Let $X_i$ be the color of the $i$th card. Compute $H(X_1,X_2,\\ldots,X_{52})$ in bits.", "prediction": 52.0, "answer": 48.8, "rationale": "def solve():\n    # Let's define the entropy function\n    def entropy(p):\n        # define the entropy formula\n        return -sum([i * math.log2(i) for i in p])\n    # Let's define the probability of red and black cards\n    p = [0.5, 0.5]\n    # Let's compute the entropy\n    return entropy(p) * 52", "answer_type": "float"}
{"id": "xinyi/expected_distortion.json", "question": "Let $X \\sim N(0,1)$ and let the distortion measure be squared error. Here we do not allow block descriptions. Compute the minimum expected distortion for one bit quantization of $X$ using a squared error distortion measure.", "prediction": 55, "answer": 0.363, "rationale": "def solve():\n    # Let's define the expected distortion function\n    def expected_distortion(x):\n        return (x**2)\n    # Let's define the quantization function\n    def quantization(x):\n        if x >= 0:\n            return 1\n        else:\n            return 0\n    # Let's compute the expected distortion\n    return expected_distortion(quantization(0))\ndef solve():\n    # Let's write the program step by step\n    # Let's define a function to compute the sum\n    def sum_of_numbers(n):\n        # define the base case\n        if n == 0:\n            return 0\n        else:\n            # use the recursive formula\n            return n + sum_of_numbers(n-1)\n    return sum_of_numbers(10)", "answer_type": "float"}
{"id": "xinyi/expected_length_of_instatntaneous_code.json", "question": "A random variable $X$ takes on $m$ values and has entropy $H(X)$. An instantaneous ternary code is found for this source, with an average length $L=H_3(X)$ that achieves the entropy bound. Then $m$ must be odd. True or False?", "prediction": "True", "answer": true, "rationale": " The entropy of a random variable $X$ is given by $H(X) = -\\sum_{i=1}^m p_i \\log_2 p_i$, where $p_i$ is the probability of the $i$th outcome. The entropy of a ternary code is given by $H_3(X) = -\\sum_{i=1}^m p_i \\log_3 p_i$. Since $H_3(X)$ is the average length of the ternary code, it must be less than or equal to $H(X)$. Therefore, for $H_3(X)$ to achieve the entropy bound, $m$ must be odd. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "xinyi/expected_waiting_time.json", "question": "Let $X_0, X_1, X_2, \\ldots$ be drawn i.i.d. from $p(x)$, and $x\\in\\{1,2,3,\\ldots,100\\}. Let $N$ be the waiting time to the next occurrence of $X_0$. Compute $E(N)$.", "prediction": null, "answer": 100.0, "rationale": "def solve():\n    # Let's define the probability distribution function\n    def p(x):\n        # define the probability of each x\n        if x in range(1,101):\n            return 1/100\n        else:\n            return 0\n    # Let's define the expected value function\n    def E(N):\n        # define the expected value\n        return sum([p(x)*x for x in range(1,101)])\n    return E(N)", "answer_type": "float"}
{"id": "xinyi/fano_inequality.json", "question": "A train pulls out of the station at constant velocity. The received signal energy thus falls off with time as $1/i^2$. The total received signal at time $i$ is $Y_i = \\frac{1}{i}X_i + Z_i$ where $Z_1, Z_2, \\ldots$ are i.i.d. drawn from $N(0,1)$. The transmitter constraint for block length $n$ is $\\frac{1}{n}\\sum_{i=1}^n x_i^2(w) \\leq 2  $ for $w \\in \\{1,2,\\ldots, 2^{nR}\\}$. Use Fano's inequality to find the capacity for this channel.", "prediction": null, "answer": 0.0, "rationale": "def solve():\n    # Fano's inequality states that the capacity of a channel is given by\n    # C = H(X) - H(X|Y)\n    # where H(X) is the entropy of the input and H(X|Y) is the conditional entropy of the input given the output.\n    # We can calculate the entropy of the input as\n    H_X = 1/2 * np.log2(2*np.pi*np.e)\n    # We can calculate the conditional entropy of the input given the output as\n    H_X_Y = 1/2 * np.log2(2*np.pi*np.e*(1/n)*np.sum(x_i**2))\n    # The capacity of the channel is then\n    C = H_X - H_X_Y\n    return C", "answer_type": "float"}
{"id": "xinyi/fisher_information_1.json", "question": "For a parametric family $\\{p_\\theta(x)\\}$ we know that $\\lim_{\\theta'\\to\\theta}\\frac{1}{(\\theta-\\theta')^2}D(p_\\theta||p_{\\theta'}) = \\alpha J(\\theta)$, where $J(\\theta) is the Fisher information. Compute $\\alpha$.", "prediction": null, "answer": 0.7213, "rationale": "def solve():\n    # Let's define the function\n    def alpha(theta):\n        # define the limit\n        limit = 1/(theta-theta')**2 * D(p_theta||p_{theta'})\n        # define the Fisher information\n        J = J(theta)\n        # compute the alpha\n        alpha = limit/J\n        return alpha\n    return alpha", "answer_type": "float"}
{"id": "xinyi/fisher_information_2.json", "question": "What is the Fisher information for the Gaussian distribution family $f_\\theta(x)=N(0,\\theta)$? (a) $2\\theta$. (b) $2\\theta^2$. (c) $0.5\\theta^{-1}$. (d) $0.5\\theta^{-2}$. Which option is correct?", "prediction": "(d) $0.5\\theta^{-2}$", "answer": "(d)", "rationale": " The Fisher information for the Gaussian distribution family is defined as $I(\\theta)=E\\left[\\left(\\frac{\\partial \\log f_\\theta(x)}{\\partial \\theta}\\right)^2\\right]$. For the given family, we have $\\frac{\\partial \\log f_\\theta(x)}{\\partial \\theta}=\\frac{1}{\\theta}$. Therefore, $I(\\theta)=E\\left[\\frac{1}{\\theta^2}\\right]=\\frac{1}{\\theta^2}$. Therefore, the answer is (d) $0.5\\theta^{-2}$.", "answer_type": "option"}
{"id": "xinyi/fisher_information_3.json", "question": "What is the Fisher information for the distribution family $f_\\theta(x)=\\theta e^{-\\theta x}$, $x \\geq 0$? (a) $\\theta$. (b) $\\theta^2$. (c) $\\theta^{-1}$. (d) $\\theta^{-2}$. Which option is correct?", "prediction": "(c) $\\theta^{-1}$", "answer": "(c)", "rationale": " The Fisher information for a distribution family is defined as the expected value of the second derivative of the log-likelihood function with respect to the parameter $\\theta$. For the given distribution family, the log-likelihood function is $l(\\theta) = \\log(\\theta) - \\theta x$. Taking the second derivative of $l(\\theta)$ with respect to $\\theta$ gives us $\\frac{d^2 l(\\theta)}{d \\theta^2} = -x$. Therefore, the Fisher information for the distribution family is $-\\mathbb{E}[x] = -\\frac{1}{\\theta}$.\n\nTherefore, the answer is (c) $\\theta^{-1}$.", "answer_type": "option"}
{"id": "xinyi/fisher_information_4.json", "question": "Let $g_\\theta(x_1,x_2)=f_\\theta(x_1)f_\\theta(x_2)$. Let $J_f(\\theta)$ be the Fisher information of $f_\\theta$.  What is the relationship between $J_f(\\theta)$ and $J_g(\\theta)$? (a) $J_g(\\theta) = 0.5J_f(\\theta)$. (b) $J_g(\\theta) = J_f(\\theta)$. (c) $J_g(\\theta) = 2J_f(\\theta)$. (d) $J_g(\\theta) = 4J_f(\\theta)$. Which option is correct?", "prediction": "(c) $J_g(\\theta) = 2J_f(\\theta)$", "answer": "(c)", "rationale": " The Fisher information of $f_\\theta$ is defined as $J_f(\\theta) = \\mathbb{E}_{x \\sim p_\\theta} \\left[ \\left( \\frac{\\partial}{\\partial \\theta} \\log f_\\theta(x) \\right)^2 \\right]$. Similarly, the Fisher information of $g_\\theta$ is defined as $J_g(\\theta) = \\mathbb{E}_{x_1, x_2 \\sim p_\\theta} \\left[ \\left( \\frac{\\partial}{\\partial \\theta} \\log g_\\theta(x_1, x_2) \\right)^2 \\right]$.\n\nSince $g_\\theta(x_1,x_2)=f_\\theta(x_1)f_\\theta(x_2)$, we have $\\frac{\\partial}{\\partial \\theta} \\log g_\\theta(x_1, x_2) = \\frac{\\partial}{\\partial \\theta} \\log f_\\theta(x_1) + \\frac{\\partial}{\\partial \\theta} \\log f_\\theta(x_2)$. Therefore, $J_g(\\theta) = \\mathbb{E}_{x_1, x_2 \\sim p_\\theta} \\left[ \\left( \\frac{\\partial}{\\partial \\theta} \\log f_\\theta(x_1) + \\frac{\\partial}{\\partial \\theta} \\log f_\\theta(x_2) \\right)^2 \\right] = \\mathbb{E}_{x_1, x_2 \\sim p_\\theta} \\left[ \\left( \\frac{\\partial}{\\partial \\theta} \\log f_\\theta(x_1) \\right)^2 + \\left( \\frac{\\partial}{\\partial \\theta} \\log f_\\theta(x_2) \\right)^2 + 2 \\frac{\\partial}{\\partial \\theta} \\log f_\\theta(x_1) \\frac{\\partial}{\\partial \\theta} \\log f_\\theta(x_2) \\right]$.\n\nSince $x_1$ and $x_2$ are independent, the third term in the above equation is 0. Therefore, $J_g(\\theta) = \\mathbb{E}_{x_1, x_2 \\sim p_\\theta} \\left[ \\left( \\frac{\\partial}{\\partial \\theta} \\log f_\\theta(x_1) \\right)^2 + \\left( \\frac{\\partial}{\\partial \\theta} \\log f_\\theta(x_2) \\right)^2 \\right] = \\mathbb{E}_{x \\sim p_\\theta} \\left[ \\left( \\frac{\\partial}{\\partial \\theta} \\log f_\\theta(x) \\right)^2 \\right] + \\mathbb{E}_{x \\sim p_\\theta} \\left[ \\left( \\frac{\\partial}{\\partial \\theta} \\log f_\\theta(x) \\right)^2 \\right] = 2J_f(\\theta)$.\n\nTherefore, the answer is (c) $J_g(\\theta) = 2J_f(\\theta)$.", "answer_type": "option"}
{"id": "xinyi/gaussian_mutual_information.json", "question": "Suppose that $(X, Y, Z)$ are jointly Gaussian and that $X \\rightarrow Y \\rightarrow Z$ forms a Markov chain. Let $X$ and $Y$ have correlation coefficient 0.1 and let $Y$ and $Z$ have correlation coefficient 0.9. Find $I(X;Z)$ in bits.", "prediction": 0.09814766141450212, "answer": 0.00587, "rationale": "def solve():\n    # Let's define the correlation coefficient of X and Z\n    r_xz = 0.1 * 0.9\n    # Let's calculate the mutual information\n    I_xz = 0.5 * np.log2(1 + (r_xz / (1 - r_xz)))\n    # Let's convert the mutual information to bits\n    I_xz_bits = I_xz * np.log2(np.e)\n    return I_xz_bits", "answer_type": "float"}
{"id": "xinyi/huffman_code_1.json", "question": "Which of these codes cannot be Huffman codes for any probability assignment? (a) {0, 10, 11}. (b) {00, 01, 10, 110}. (c) {0, 1}.", "prediction": "(a)", "answer": "(b)", "rationale": "\n\nFor (a), the code {0, 10, 11} cannot be a Huffman code for any probability assignment because it does not satisfy the prefix property, which states that no code word is a prefix of any other code word.\n\nFor (b), the code {00, 01, 10, 110} can be a Huffman code for some probability assignments, so it is not excluded.\n\nFor (c), the code {0, 1} can be a Huffman code for some probability assignments, so it is not excluded.\n\nTherefore, the answer is (a).", "answer_type": "option"}
{"id": "xinyi/huffman_code_2.json", "question": "Which of the following codeword lengths can be the word lengths of a 3-ary Huffman code? (a) (1, 2, 2, 2, 2). (b) (2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3).", "prediction": "(b)", "answer": "(b)", "rationale": "\n\nThe word lengths of a 3-ary Huffman code must satisfy the Kraft inequality, which states that the sum of the reciprocals of the codeword lengths must be less than or equal to 1.\n\nFor option (a), the sum of the reciprocals of the codeword lengths is 1/1 + 1/2 + 1/2 + 1/2 + 1/2 = 2.5, which is greater than 1.\n\nFor option (b), the sum of the reciprocals of the codeword lengths is 1/2 + 1/2 + 1/2 + 1/2 + 1/2 + 1/2 + 1/2 + 1/2 + 1/3 + 1/3 + 1/3 = 2, which is equal to 1.\n\nTherefore, the answer is (b).", "answer_type": "option"}
{"id": "xinyi/huffman_code_3.json", "question": "Let $X$ be uniformly distributed over $\\{1, 2, \\ldots, 256\\}$. We ask random questions: Is $X\\in S_1$? Is $X\\in S_2$? ... until only one integer remains. All $2^256$ subsets of $\\{1, 2, \\ldots, 256\\}$ are equally likely. How many deterministic questions are needed to determine $X$?", "prediction": 8, "answer": 8, "rationale": "def solve():\n    # We can use the binary search algorithm to solve this problem\n    # The number of questions needed is the number of bits in the binary representation of 256\n    return 8", "answer_type": "integer"}
{"id": "xinyi/kernel_1.json", "question": "A linear learning machine based on the kernel $k(x,x')=f(x)f(x')$ will always find a solution proportional to $f(x)$. True or false?", "prediction": "True", "answer": true, "rationale": " The kernel $k(x,x')=f(x)f(x')$ is a linear kernel, which means that the learning machine will find a solution that is a linear combination of the input features. Therefore, the solution will be proportional to $f(x)$.\n\nTherefore, the answer is True.", "answer_type": "bool"}
{"id": "xinyi/kernel_2.json", "question": "A positive-definite kernel function satisfies the Cauchy-Schwartz inequality. True or false?", "prediction": "True", "answer": true, "rationale": " A positive-definite kernel function is a function that satisfies the Mercer's theorem. The Cauchy-Schwartz inequality states that the product of two vectors is less than or equal to the product of their norms. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "xinyi/kraft_inequality.json", "question": "Let $C$ be a variable length code that satisfies the Kraft inequality with equality but does not satisfy the prefix condition. Then $C$ has finite decoding delay. True or False?", "prediction": "False", "answer": false, "rationale": " The Kraft inequality with equality means that the sum of the lengths of all codewords is equal to the sum of the reciprocals of the probabilities of all codewords. Since $C$ does not satisfy the prefix condition, it means that there is at least one codeword that is a prefix of another codeword. This means that the decoder will have to wait until the end of the codeword to determine which codeword is being transmitted. Therefore, the answer is False.", "answer_type": "bool"}
{"id": "xinyi/law_of_large_numbers.json", "question": "Let $X_1, X_2, \\ldots$ be a sequence of independent indetically distributed random variables drawn according to the probability mass function $p(x) = N(0,1)$. Let $q(x)=N(1,1)$ be another probability mass function. Use natural logarithm to evaluate $lim -\\frac{1}{n}\\log{q(X_1,X_2,\\ldots,X_n)}$ as $n \\to \\infty$.", "prediction": null, "answer": 1.4, "rationale": "def solve():\n    # Let's define the probability mass function\n    def p(x):\n        return np.exp(-x**2/2)/np.sqrt(2*np.pi)\n    def q(x):\n        return np.exp(-(x-1)**2/2)/np.sqrt(2*np.pi)\n    # Let's define the limit\n    def limit(n):\n        return -1/n*np.log(q(x1,x2,...,xn))\n    # Let's evaluate the limit\n    return limit(n)", "answer_type": "float"}
{"id": "xinyi/linear_projection.json", "question": "Which of the following matrices takes any vector $v$ and projects it onto the space spanned by the columns of $\\Phi$? (a) $(\\Phi^T\\Phi)^{-1}$. (b) $\\Phi(\\Phi^T\\Phi)^{-1}$. (c) $\\Phi(\\Phi^T\\Phi)^{-1}\\Phi^T$. (d) $\\Phi^T(\\Phi^T\\Phi)^{-1}\\Phi^T$.", "prediction": "(b)", "answer": "(c)", "rationale": " We know that the matrix $(\\Phi^T\\Phi)^{-1}$ is the inverse of the matrix $\\Phi^T\\Phi$. This means that the matrix $\\Phi(\\Phi^T\\Phi)^{-1}$ is the product of the matrix $\\Phi$ and its inverse. This matrix takes any vector $v$ and projects it onto the space spanned by the columns of $\\Phi$. Therefore, the answer is (b).", "answer_type": "option"}
{"id": "xinyi/markov_inequality.json", "question": "Let $X$ be uniformly distributed over $\\{1, 2, \\ldots, m\\}$. Assume $m=2^n$ . We ask random questions: Is $X\\in S_1$? Is $X\\in S_2$? ... until only one integer remains. All $2^m$ subsets of $\\{1, 2, \\ldots, m\\}$ are equally likely. Suppose we ask $n+\\sqrt{n}$ random questions. Use Markov's inequality to find the probability of error (one or more wrong objects remaining) when $n$ goes to infinity?", "prediction": null, "answer": 0.0, "rationale": "def solve():\n    # Let's define the probability of error\n    def prob_error(n):\n        # Use Markov's inequality\n        return 1 - (1/2**(n+math.sqrt(n)))\n    return prob_error(n)", "answer_type": "float"}
{"id": "xinyi/maximum_entropy_1.json", "question": "Maximize the entropy $H(X)$ of a non-negative integer-valued random variable $X$, taking values from 0 to infinity, subject to the constraint $E(X)=1$. Use base 2 logarithm to evaluate $H(X)$.", "prediction": null, "answer": 2.0, "rationale": "def solve():\n    # Let's define the entropy function\n    def entropy(x):\n        # use the formula for entropy\n        return -x * np.log2(x)\n    # Let's define the expected value function\n    def expected_value(x):\n        # use the formula for expected value\n        return x * np.log2(x)\n    # Let's define the objective function\n    def objective(x):\n        # use the formula for objective function\n        return entropy(x) - expected_value(x)\n    # Let's define the constraint\n    def constraint(x):\n        # use the formula for constraint\n        return expected_value(x) - 1\n    # Let's solve the optimization problem\n    result = optimize.minimize(objective, x0=1, constraints={\"fun\": constraint})\n    # Let's return the optimal value\n    return result.x[0]", "answer_type": "float"}
{"id": "xinyi/maximum_entropy_2.json", "question": "Find the maximum entropy density $f$, defined for $x\\geq 0$, satisfying $E(X)=\\alpha_1$, $E(\\ln{X})=\\alpha_2$. Which family of densities is this? (a) Exponential. (b) Gamma. (c) Beta. (d) Uniform.", "prediction": "(b) Gamma", "answer": "(b)", "rationale": " The maximum entropy density $f$ is the one that maximizes the entropy $H(f)=-\\int_0^\\infty f(x)\\ln{f(x)}dx$ subject to the constraints $E(X)=\\alpha_1$ and $E(\\ln{X})=\\alpha_2$. Since the entropy is maximized when the constraints are met with equality, the maximum entropy density $f$ must be of the form $f(x)=Cx^{\\alpha_1-1}e^{-\\alpha_2x}$. Therefore, the answer is (b) Gamma.", "answer_type": "option"}
{"id": "xinyi/message_passing_algorithm.json", "question": "The marginal distribution for the variables $x_s$ in a factor $f_s(x_s)$ in a tree-structured factor graph, after running the sum-product message passing algorithm, can be written as the product of the message arriving at the factor node along all its links, times the local factor $f_s(x_s)$. True or false?", "prediction": "True", "answer": true, "rationale": " First, the marginal distribution for the variables $x_s$ in a factor $f_s(x_s)$ in a tree-structured factor graph can be written as the product of the message arriving at the factor node along all its links. Second, the message passing algorithm is used to calculate the marginal distribution. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "xinyi/mixture_model.json", "question": "What is the number of equivalent parameter settings due to interchange symmetries in a mixture model with 10 components?", "prediction": 210.0, "answer": 3628800, "rationale": "def solve():\n    # Let's define a function to calculate the number of equivalent parameter settings\n    def num_equiv_param_settings(n):\n        # use the formula for the number of equivalent parameter settings\n        return n * (n-1) * (n-2) * (n-3) / 24\n    return num_equiv_param_settings(10)", "answer_type": "integer"}
{"id": "xinyi/momentum.json", "question": "A neutron at rest decays (breaks up) to a proton and an electron. Energy is released in the decay and appears as kinetic energy of the proton and electron. The mass of a proton is 1836 times the mass of an electron. What fraction of the total energy released goes into the kinetic energy of the proton?", "prediction": 0.9994556341861731, "answer": 0.000544, "rationale": "def solve():\n    # Let's define the mass of a proton and an electron\n    m_p = 1836\n    m_e = 1\n    # Let's calculate the total energy released\n    E_total = m_p + m_e\n    # Let's calculate the fraction of the total energy released goes into the kinetic energy of the proton\n    E_p = m_p/E_total\n    return E_p", "answer_type": "float"}
{"id": "xinyi/neural_networks.json", "question": "Consider a two-layer fully-connected neural network in which the hidden-unit nonlinear activation functions are given by logistic sigmoid functions. Does there exist an equivalent network in which the hidden unit nonlinear activation functions are given by hyperbolic tangent functions?", "prediction": "True", "answer": true, "rationale": " First, a two-layer fully-connected neural network is a network with two layers of neurons, where each neuron in the first layer is connected to each neuron in the second layer. Second, a logistic sigmoid function is a nonlinear activation function that takes a real-valued input and maps it to a value between 0 and 1. Third, a hyperbolic tangent function is a nonlinear activation function that takes a real-valued input and maps it to a value between -1 and 1. \n\nTherefore, the answer is True.", "answer_type": "bool"}
{"id": "xinyi/newtons_laws_1.json", "question": "While a person is walking, his arms swing through approximately a 45\u00b0 angle in 0.5s.As a reasonable approximation, we can assume that the arm moves with constant speed during each swing. A typical arm is 70.0 cm long, measured from the shoulder joint. What is the acceleration (in metre per second squared) of a 1.0 g drop of blood in the fingertips at the bottom of the swing?", "prediction": 0.00172543, "answer": 1.73, "rationale": "def solve():\n    # Let's define the variables\n    arm_length = 0.7 # in metres\n    time = 0.5 # in seconds\n    angle = 45 # in degrees\n    mass = 0.001 # in kilograms\n    # Let's calculate the velocity\n    velocity = arm_length * (2 * 3.14 * (angle/360)) / time\n    # Let's calculate the acceleration\n    acceleration = (velocity**2) / arm_length\n    # Let's calculate the force\n    force = mass * acceleration\n    return force", "answer_type": "float"}
{"id": "xinyi/newtons_laws_2.json", "question": "Two bicycle tires are set rolling with the same initial speed of 3.5 m/s on a long, straight road, and the distance each travels before its speed is reduced by half is measured. One tire is inflated to a pressure of 40 psi and goes 18.1 m; the other is at 105 psi and goes 92.9 m. What is the coefficient of rolling friction for each? Assume that the net horizontal force is due to rolling friction only.", "prediction": [0.008459944751381215, 0.0006279153211338357], "answer": [0.0259, 0.00505], "rationale": "def solve():\n    # Let's define the variables\n    v_initial = 3.5 # m/s\n    d1 = 18.1 # m\n    p1 = 40 # psi\n    d2 = 92.9 # m\n    p2 = 105 # psi\n    # Let's calculate the coefficient of rolling friction for each tire\n    mu1 = (v_initial**2)/(2*d1*p1)\n    mu2 = (v_initial**2)/(2*d2*p2)\n    return [mu1, mu2]", "answer_type": "list of float"}
{"id": "xinyi/newtons_laws_3.json", "question": "A curve with a 120 m radius on a level road is banked at the correct angle for a speed of 20 m/s. If an automobile rounds this curve at 30 m/s, what is the minimum coefficient of static friction needed between tires and road to prevent skidding?", "prediction": 0.509683995922528, "answer": 0.34, "rationale": "def solve():\n    # Let's define the variables\n    v = 30 # velocity of the automobile in m/s\n    r = 120 # radius of the curve in m\n    g = 9.81 # acceleration due to gravity in m/s^2\n    v_min = 20 # minimum velocity for the curve in m/s\n    \n    # Let's calculate the coefficient of static friction\n    mu_s = (v**2)/(r*g) * (v_min/v)\n    return mu_s", "answer_type": "float"}
{"id": "xinyi/potential_energy.json", "question": "A bungee cord is 30.0 m long and, when stretched a distance x, it exerts a restoring force of magnitude kx. Your father-in-law (mass 95.0 kg) stands on a platform 45.0 m above the ground, and one end of the cord is tied securely to his ankle and the other end to the platform. You have promised him that when he steps off the platform he will fall a maximum distance of only 41.0 m before the cord stops him. You had several bungee cords to select from, and you tested them by stretching them out, tying one end to a tree, and pulling on the other end with a force of 380.0 N. When you do this, what distance (in m) will the bungee cord that you should select have stretched?", "prediction": -4.489795918367347, "answer": 0.602, "rationale": "def solve():\n    # Let's define the constants\n    m = 95.0 # mass of father-in-law in kg\n    g = 9.8 # acceleration due to gravity in m/s^2\n    F = 380.0 # force applied in N\n    L = 30.0 # length of bungee cord in m\n    h = 45.0 # height of platform in m\n    h_max = 41.0 # maximum height of fall in m\n    \n    # Let's calculate the restoring force\n    k = (m*g)/(L-h_max)\n    \n    # Let's calculate the distance stretched\n    x = F/k\n    \n    return x", "answer_type": "float"}
{"id": "xinyi/random_walk_on_3D_maze.json", "question": "A bird is lost in a 3 by 3 by 3 cubical maze. The bird flies from room to room going to adjoining rooms with equal probability through each of the walls. To be specific, the corner rooms have 3 exits. What is the entropy rate of this random walk? Use base 2 logarithm and return the entropy rate in bits.", "prediction": 1.584962500721156, "answer": 2.03, "rationale": "def solve():\n    # Let's define the number of possible exits from each room\n    exits = 3\n    # Let's calculate the entropy rate\n    entropy_rate = np.log2(exits)\n    # Let's convert the entropy rate to bits\n    entropy_rate_bits = entropy_rate / np.log2(2)\n    return entropy_rate_bits", "answer_type": "float"}
{"id": "xinyi/random_walk_on_chessboard.json", "question": "Find the entropy rate of the Markov chain associated with a random walk of a king on the 3 by 3 chessboard. Use base 2 logarithm and return the entropy rate in bits.", "prediction": 64.0, "answer": 2.24, "rationale": "def solve():\n    # Let's define the transition matrix\n    transition_matrix = [[1/4, 1/4, 1/4, 1/4],\n                        [1/4, 1/4, 1/4, 1/4],\n                        [1/4, 1/4, 1/4, 1/4],\n                        [1/4, 1/4, 1/4, 1/4]]\n    # Let's define the entropy rate function\n    def entropy_rate(matrix):\n        # Let's define the entropy rate\n        entropy_rate = 0\n        # Let's loop through the matrix\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                # Let's calculate the entropy rate\n                entropy_rate += matrix[i][j] * math.log2(1/matrix[i][j])\n        # Let's return the entropy rate\n        return entropy_rate\n    # Let's return the entropy rate in bits\n    return entropy_rate(transition_matrix) * 8", "answer_type": "float"}
{"id": "xinyi/random_walk_on_graph_max.json", "question": "Consider a random walk on a connected graph with 4 edges. What is the highest possible entropy rate? Use base 2 logarithm and return the entropy rate in bits.", "prediction": 0.5, "answer": 1.094, "rationale": "def solve():\n    # Let's define the entropy rate function\n    def entropy_rate(n):\n        # use the formula for entropy rate\n        return (1/n) * math.log2(n)\n    # Let's calculate the entropy rate\n    return entropy_rate(4)", "answer_type": "float"}
{"id": "xinyi/random_walk_on_graph_min.json", "question": "Consider a random walk on a connected graph with 4 edges. What is the lowest possible entropy rate? Use base 2 logarithm and return the entropy rate in bits.", "prediction": 0.5, "answer": 0.75, "rationale": "def solve():\n    # Let's define the entropy rate function\n    def entropy_rate(n):\n        # use the formula for entropy rate\n        return (1/n) * math.log2(n)\n    # Let's calculate the entropy rate for 4 edges\n    return entropy_rate(4)", "answer_type": "float"}
{"id": "xinyi/rate_distortion_function_1.json", "question": "Consider a source $X$ uniformly distributed on the set $\\{1, 2, \\dots, m\\}$. The rate distortion function for this source with Hamming distortion is $R(D) = \\log{m}-H(D)-D\\log{(m-1)}$ for $0\\leq D\\leq 1-\\frac{1}{m}$, and $R(D) = 0$ otherwise. True or False?", "prediction": "True", "answer": true, "rationale": " The rate distortion function for this source with Hamming distortion is $R(D) = \\log{m}-H(D)-D\\log{(m-1)}$ for $0\\leq D\\leq 1-\\frac{1}{m}$, and $R(D) = 0$ otherwise. This statement is true. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "xinyi/rate_distortion_function_2.json", "question": "Let $R(D)$ be the rate distortion function for an i.i.d. process with probability mass function $p(x)$ and distortion function $d(x, \\hat{x})$ , $x \\in \\mathcal{X}$ , $\\hat{x} \\in \\hat{\\mathcal{X}}$. If we add a new reproduction symbol $\\hat{x}_0$ to $\\hat{\\mathcal{X}}$ with associated distortion $d(x, \\hat{x}_0)$, $x \\in \\mathcal{X}$, $R(D)$ will decrease. True or False?", "prediction": "True", "answer": true, "rationale": " If we add a new reproduction symbol $\\hat{x}_0$ to $\\hat{\\mathcal{X}}$ with associated distortion $d(x, \\hat{x}_0)$, $x \\in \\mathcal{X}$, then the rate distortion function $R(D)$ will be the minimum of the sum of the probability of $x$ multiplied by the distortion of $x$ and $\\hat{x}_0$. Since the distortion of $\\hat{x}_0$ is lower than the distortion of $\\hat{x}$, the rate distortion function $R(D)$ will decrease. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "xinyi/rotation.json", "question": "While riding a multispeed bicycle, the rider can select the radius of the rear sprocket that is fixed to the rear axle. The front sprocket of a bicycle has radius 12.0 cm. If the angular speed of the front sprocket is 0.6 rev/s, what is the radius (in cm) of the rear sprocket for which the tangential speed of a point on the rim of the rear wheel will be 5 m/s? The rear wheel has radius 0.330 m.", "prediction": 96.50646593321753, "answer": 2.99, "rationale": "def solve():\n    # Let's define the angular speed of the rear sprocket\n    rear_angular_speed = 5 / (0.330 * 3.14)\n    # Let's calculate the ratio of the angular speeds\n    ratio = rear_angular_speed / 0.6\n    # Let's calculate the radius of the rear sprocket\n    rear_radius = 12.0 * ratio\n    return rear_radius", "answer_type": "float"}
{"id": "xinyi/shannon_lower_bound.json", "question": "Consider a source X uniform on $\\{1,2,\\ldots,m\\}$ with a distortion measure $d(x, \\hat{x})$ that satisfies the following property: all rows and columns of the distortion matrix are permutations of the set $\\{d_1, d_2, \\ldots, d_m\\}$. Then the Shannon lower bound is tight. i.e. $R(D)=H(X)-\\phi(D)$. True or False?", "prediction": "True", "answer": true, "rationale": " The Shannon lower bound is $R(D)=H(X)-\\phi(D)$. Since the distortion measure $d(x, \\hat{x})$ satisfies the property that all rows and columns of the distortion matrix are permutations of the set $\\{d_1, d_2, \\ldots, d_m\\}$, then the Shannon lower bound is tight. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "xinyi/stationary_stochastic_process.json", "question": "The dependence between adjacent n-blocks of a stationary process grows linearly with n. True or False?", "prediction": "False", "answer": false, "rationale": " A stationary process is one whose statistical properties are constant over time. This means that the dependence between adjacent n-blocks of a stationary process should remain the same regardless of the value of n. Therefore, the answer is False.", "answer_type": "bool"}
{"id": "xinyi/sum_product_algorithm.json", "question": "If the sum-product algorithm is run on a factor graph with a tree structure (no loops), then after a finite number of messages have been sent, there will be no pending messages. True or false?", "prediction": "True", "answer": true, "rationale": " The sum-product algorithm is a message passing algorithm that is used to compute marginal probabilities in a factor graph. In a factor graph with a tree structure, there are no loops, so the messages will not be sent in a loop. Therefore, after a finite number of messages have been sent, there will be no pending messages. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "xinyi/uniquely_decodeable_code.json", "question": "Suppose the codeword that we use to describe a random variable X always starts with a symbol chosen from the set {7, 8, 9} , followed by binary digits {0, 1}. Thus we have a ternary code for the first symbol and binary thereafter. Give the optimal uniquely decodeable code (minimum expected number of symbols) for the probability distribution $p = (16/69, 15/69, 12/69, 10/69, 8/69, 8/69)$.", "prediction": null, "answer": [7, 8, 9, 70, 80, 90], "rationale": "def solve():\n    # Let's define a function to calculate the expected length of a code\n    def expected_length(p):\n        # initialize the expected length\n        l = 0\n        # loop through the probabilities\n        for i in range(len(p)):\n            # calculate the expected length\n            l += p[i] * (2 + i)\n        return l\n    # Let's define a function to generate the optimal code\n    def optimal_code(p):\n        # initialize the code\n        code = []\n        # loop through the probabilities\n        for i in range(len(p)):\n            # calculate the expected length\n            l = expected_length(p[:i+1])\n            # append the code\n            code.append(str(7 + i) + '0' * int(l))\n        return code\n    return optimal_code(p)", "answer_type": "list of integer"}
{"id": "xinyi/work_energy_theorem.json", "question": "At a waterpark, sleds with riders are sent along a slippery, horizontal surface by the release of a large compressed spring. The spring with force constant k = 40.0 N/cm and negligible mass rests on the frictionless horizontal surface. One end is in contact with a stationary wall. A sled and rider with total mass 70.0 kg are pushed against the other end, compressing the spring 0.375 m. The sled is then released with zero initial velocity. What is the sled's speed (in m/s) when the spring returns to its uncompressed length?", "prediction": 55, "answer": 2.83, "rationale": "def solve():\n    # Define the constants\n    k = 40.0 # N/cm\n    m = 70.0 # kg\n    x = 0.375 # m\n    # Calculate the speed\n    v = (2*k*x/m)**0.5\n    return v\ndef solve():\n    # Let's write the program step by step\n    # Define the sum variable\n    sum = 0\n    # Use a loop to calculate the sum\n    for i in range(1, 11):\n        sum += i\n    return sum", "answer_type": "float"}
{"id": "xueguangma/abnormal_return.json", "question": "Suppose we are given the following information. Use this information to calculate abnormal return. Rf: 4%\nRm: 12%\nBeta of the Portfolio: 1.8\nBeginning Value of Portfolio: $50,000\nEnding Value of Portfolio: $60,000\nWhat is the abnormal return?", "prediction": -18.2, "answer": 0.016, "rationale": "def solve():\n    # Calculate the expected return\n    expected_return = 4 + 1.8 * (12 - 4)\n    # Calculate the actual return\n    actual_return = (60_000 - 50_000) / 50_000\n    # Calculate the abnormal return\n    abnormal_return = actual_return - expected_return\n    return abnormal_return", "answer_type": "float"}
{"id": "xueguangma/amortization.json", "question": "A debt of $25,000 is to be amortized over 7 years at 7% interest. What value of monthly payments will achieve this?", "prediction": 1755.9742144599627, "answer": 4638.83, "rationale": "def solve():\n    # Let's define the variables\n    principal = 25000\n    rate = 0.07\n    years = 7\n    # Let's calculate the number of payments\n    num_payments = years * 12\n    # Let's calculate the monthly payment\n    monthly_payment = principal * (rate * (1 + rate) ** num_payments) / ((1 + rate) ** num_payments - 1)\n    return monthly_payment", "answer_type": "float"}
{"id": "xueguangma/annuity_due.json", "question": "If at the beginning of each month a deposit of $500 is made in an account that pays 8% compounded monthly, what will the final amount be after five years?", "prediction": 44695.37124904815, "answer": 36983.35, "rationale": "def solve():\n    # Let's define the function to calculate the final amount\n    def final_amount(monthly_deposit, rate, years):\n        # calculate the total amount of deposits\n        total_deposit = monthly_deposit * 12 * years\n        # calculate the final amount\n        final_amount = total_deposit * (1 + rate/12)**(12*years)\n        return final_amount\n    return final_amount(500, 0.08, 5)", "answer_type": "float"}
{"id": "xueguangma/arbitrage_free_securities_market.json", "question": "Consider an arbitrage-free securities market model, in which the risk-free interest rate is constant. There are two nondividend-paying stocks whose price processes are:\n$S_1(t)=S_1(0)e^{0.1t+0.2Z(t)}$\n$S_2(t)=S_2(0)e^{0.125t+0.3Z(t)}$\nwhere $Z(t)$ is a standard Brownian motion ant $t\\ge0$. What is the continuously compounded risk-free interest rate?", "prediction": 0.125, "answer": 0.02, "rationale": "def solve():\n    # We know that the continuously compounded risk-free interest rate is equal to the drift of the stock price process\n    # We can calculate the drift of the stock price process by taking the derivative of the stock price process with respect to time\n    # The drift of the stock price process for stock 1 is 0.1\n    # The drift of the stock price process for stock 2 is 0.125\n    # Therefore, the continuously compounded risk-free interest rate is 0.125\n    return 0.125", "answer_type": "float"}
{"id": "xueguangma/binomial_lattice.json", "question": "The stock of the CCC Corporation is currently valued at $12 and is assumed to possess all the properties of geometric Brownian motion. It has an expected annual return of 15%, an annual volatility of 20%, and the annual risk-free is 10%. Using a binomial lattice, determine the price of a call option on CCC stock maturing in 10 monthes time with a strike price of $14 (Let the distance between nodes on your tree be 1 month in length).", "prediction": null, "answer": 53.0, "rationale": "def solve():\n    # Let's define the parameters\n    S0 = 12 # initial stock price\n    r = 0.1 # risk-free rate\n    sigma = 0.2 # volatility\n    T = 10 # maturity\n    K = 14 # strike price\n    # Let's define the binomial lattice\n    n = T * 12 # number of nodes\n    u = math.exp(sigma * math.sqrt(1/12)) # up factor\n    d = 1/u # down factor\n    p = (math.exp(r/12) - d) / (u - d) # probability of up\n    # Let's define the recursive function\n    def binomial_lattice(n, S0, u, d, p):\n        if n == 0:\n            # define the base case\n            return S0\n        else:\n            # use the binomial lattice recursive formula\n            return max(binomial_lattice(n-1, S0, u, d, p) * u, binomial_lattice(n-1, S0, u, d, p) * d)\n    # Let's calculate the price of the call option\n    C = max(binomial_lattice(n, S0, u, d, p) - K, 0)\n    return C", "answer_type": "float"}
{"id": "xueguangma/binomial_model_1.json", "question": "For a one-period binomial model for the price of a stock, you are given: (i) The period is one year. (ii) The stock pays no dividends. (iii) u =1.433, where u is one plus the rate of capital gain on the stock if the price goes up.  (iv) d = 0.756 , where d is one plus the rate of capital loss on the stock if the price goes down. (v) The continuously compounded annual expected return on the stock is 10%. What is the true probability of the stock price going up.", "prediction": 0.5081240768094536, "answer": 0.52, "rationale": "def solve():\n    # Let's define the given values\n    u = 1.433\n    d = 0.756\n    r = 0.1\n    # Let's calculate the true probability of the stock price going up\n    p = (1 + r - d) / (u - d)\n    return p", "answer_type": "float"}
{"id": "xueguangma/binomial_model_2.json", "question": "For a two-period binomial model for stock prices, you are given: (i) Each period is 6 months. (ii) The current price for a nondividend-paying stock is $70.00. (iii) u =1.181, where u is one plus the rate of capital gain on the stock per period if the price goes up. (iv) d = 0.890 , where d is one plus the rate of capital loss on the stock per period if the price goes down. (v) The continuously compounded risk-free interest rate is 5%. What is the current price of a one-year American put option on the stock with a strike price of $80.00.", "prediction": 1.3981345115365742, "answer": 10.75, "rationale": "def solve():\n    # Define the parameters\n    S0 = 70.00 # current price of the stock\n    u = 1.181 # rate of capital gain\n    d = 0.890 # rate of capital loss\n    r = 0.05 # risk-free interest rate\n    K = 80.00 # strike price\n    n = 2 # number of periods\n    \n    # Calculate the up and down probabilities\n    p = (1 + r - d) / (u - d)\n    q = 1 - p\n    \n    # Calculate the stock prices at the end of the two periods\n    S1 = S0 * u\n    S2 = S0 * d\n    \n    # Calculate the option prices at the end of the two periods\n    C1 = max(0, S1 - K)\n    C2 = max(0, S2 - K)\n    \n    # Calculate the current price of the option\n    C0 = (p * C1 + q * C2) / (1 + r)\n    \n    return C0", "answer_type": "float"}
{"id": "xueguangma/black_scholes_framework_1.json", "question": "You are asked to determine the price of a European put option on a stock. Assuming the Black-Scholes framework holds, you are given: (i) The stock price is $100. (ii) The put option will expire in 6 months. (iii) The strike price is $98. (iv) The continuously compounded risk-free interest rate is r = 0.055. (v) \u03b4 = 0.01 (vi) \u03c3 = 0.50. What is the price of the put option?", "prediction": null, "answer": 11.9, "rationale": "def solve():\n    # Let's import the necessary libraries\n    import math\n    # Let's define the Black-Scholes formula\n    def black_scholes(S, K, r, T, sigma, delta):\n        d1 = (math.log(S/K) + (r + 0.5 * sigma**2) * T) / (sigma * math.sqrt(T))\n        d2 = d1 - sigma * math.sqrt(T)\n        return -S * delta * math.exp(-r * T) * norm.cdf(-d1) + K * math.exp(-r * T) * norm.cdf(-d2)\n    # Let's define the parameters\n    S = 100\n    K = 98\n    r = 0.055\n    T = 6/12\n    sigma = 0.50\n    delta = 0.01\n    # Let's calculate the price of the put option\n    return black_scholes(S, K, r, T, sigma, delta)", "answer_type": "float"}
{"id": "xueguangma/black_scholes_framework_2.json", "question": "For an American perpetual option within the Black-Scholes framework, you are given: (i) $h_1 + h_2$ = 7/9 (ii) The continuously compounded risk-free interest rate is 5%. (iii) \u03c3 = 0.30. What is the value of $h_1$?", "prediction": -0.33333333333333337, "answer": 1.51, "rationale": "def solve():\n    # Given h1 + h2 = 7/9\n    h2 = 7/9\n    # Given r = 0.05\n    r = 0.05\n    # Given sigma = 0.30\n    sigma = 0.30\n    # We can calculate h1 using the Black-Scholes formula\n    h1 = (7/9) - (2*r/sigma**2)\n    return h1", "answer_type": "float"}
{"id": "xueguangma/black_scholes_framework_3.json", "question": "Your company has just written one million units of a one-year European asset-or-nothing put option on an equity index fund. The equity index fund is currently trading at 1000. It pays dividends continuously at a rate proportional to its price; the dividend yield is 2%. It has a volatility of 20%. The option\u2019s payoff will be made only if the equity index fund is down by more than 40% at the end of one year. The continuously compounded risk-free interest rate is 2.5% Using the Black-Scholes model, determine the price of the asset-or-nothing put options. Give the answer in millions.", "prediction": null, "answer": 3.6, "rationale": "def solve():\n    # Let's import the necessary libraries\n    import numpy as np\n    from scipy.stats import norm\n    # Let's define the parameters\n    S = 1000 # current price of the equity index fund\n    K = 600 # strike price of the option\n    r = 0.025 # continuously compounded risk-free interest rate\n    q = 0.02 # dividend yield\n    sigma = 0.2 # volatility\n    T = 1 # time to maturity\n    # Let's calculate the d1 and d2\n    d1 = (np.log(S/K) + (r - q + 0.5*sigma**2)*T) / (sigma*np.sqrt(T))\n    d2 = d1 - sigma*np.sqrt(T)\n    # Let's calculate the price of the asset-or-nothing put option\n    price = S*np.exp(-q*T)*norm.cdf(-d1) - K*np.exp(-r*T)*norm.cdf(-d2)\n    # Let's return the answer in millions\n    return price/1000000", "answer_type": "float"}
{"id": "xueguangma/capital_asset_pricing_model.json", "question": "Suppose a stock has the following information. It is listed on the London stock exchange and operates throughout Europe. The yield on a UK 10 year treasury is 2.8%. The stock in question will earn 8.6% as per historical data. The Beta for the stock is 1.4, i.e., it is 140% volatile to the changes in the general stock market. What is the expected rate of return?", "prediction": 10.919999999999998, "answer": 10.92, "rationale": "def solve():\n    # The expected rate of return is calculated using the Capital Asset Pricing Model (CAPM)\n    # CAPM = Risk-free rate + Beta * (Market return - Risk-free rate)\n    # Risk-free rate = yield on a UK 10 year treasury = 2.8%\n    # Market return = 8.6%\n    # Beta = 1.4\n    expected_rate_of_return = 2.8 + 1.4 * (8.6 - 2.8)\n    return expected_rate_of_return", "answer_type": "float"}
{"id": "xueguangma/certainty_equivalent.json", "question": "An investor has utility function $U(x) = x^{1/4}$ for salary. He has a new job offer which pays $80,000 with a bonus. The bonus will be $0, $10000, $20000, $30000, $40000, $50000, or $60000, each with equal probability. What is the certainty equivalent value of this job offer?", "prediction": 108610.03827861226, "answer": 108610, "rationale": "def solve():\n    # Let's define the utility function\n    def utility(x):\n        return x**(1/4)\n    # Let's define the expected utility\n    expected_utility = 0\n    # Let's calculate the expected utility\n    for bonus in [0, 10000, 20000, 30000, 40000, 50000, 60000]:\n        expected_utility += utility(80000 + bonus) / 7\n    # Let's calculate the certainty equivalent value\n    ce_value = expected_utility**4\n    return ce_value", "answer_type": "integer"}
{"id": "xueguangma/compound_interest.json", "question": "Aisha graduates college and starts a job. She saves $1000 each quarter, depositing it into a retirement savings account. Suppose that Aisha saves for 30 years and then retires. At retirement she wants to withdraw money as an annuity that pays a constant amount every month for 25 years. During the savings phase, the retirement account earns 6% interest compounded quarterly. During the annuity payout phase, the retirement account earns 4.8% interest compounded monthly. Calculate Aisha\u2019s monthly retirement annuity payout.", "prediction": 1898.2712729130037, "answer": 1898.27, "rationale": "def solve():\n    # Let's define the variables\n    savings_period = 30 # years\n    annuity_period = 25 # years\n    savings_interest = 0.06 # 6%\n    annuity_interest = 0.048 # 4.8%\n    savings_amount = 1000 # $1000 each quarter\n    # Let's calculate the total savings amount\n    total_savings = 0\n    for i in range(savings_period * 4):\n        total_savings += savings_amount * (1 + savings_interest/4)**i\n    # Let's calculate the annuity payout\n    annuity_payout = total_savings * (annuity_interest/12) / (1 - (1 + annuity_interest/12)**(-annuity_period*12))\n    return annuity_payout", "answer_type": "float"}
{"id": "xueguangma/delta_gamma_approximation.json", "question": "Assume that the Black-Scholes framework holds. The price of a nondividened-paying stock is $30. The price of a put option on this stock is $4.00. You are given $(i) $\\Delta=-0.28$. (ii) $\\Gamma=0.10$ Using the delta-gamma approximation, determine the price of the put option if the stock price changes to $31.50.", "prediction": 8.192499999999999, "answer": 3.7, "rationale": "def solve():\n    # Let's define the delta-gamma approximation formula\n    def delta_gamma_approx(delta, gamma, S, S_new):\n        return delta*(S_new - S) + 0.5*gamma*(S_new**2 - S**2)\n    # Let's define the given values\n    delta = -0.28\n    gamma = 0.10\n    S = 30\n    S_new = 31.50\n    # Let's calculate the price of the put option\n    return delta_gamma_approx(delta, gamma, S, S_new) + 4.00", "answer_type": "float"}
{"id": "xueguangma/differential_product_rule.json", "question": "For $p(x)=f(x)g(x)$, if $f(2)=3$, $f'(2)=-4$, $g(2)=1$, and $g'(2)=6$, what is $p'(2)$?", "prediction": null, "answer": 14, "rationale": "def solve():\n    # Let's define the derivative of a product of two functions\n    def derivative_product(f, g, x):\n        return f(x) * g'(x) + f'(x) * g(x)\n    # Let's define the functions\n    def f(x):\n        return 3\n    def f_prime(x):\n        return -4\n    def g(x):\n        return 1\n    def g_prime(x):\n        return 6\n    # Let's calculate the derivative\n    return derivative_product(f, g, 2)\ndef solve():\n    # Let's write the program step by step\n    # Let's define a function to calculate the sum of the first n natural numbers\n    def sum_natural_numbers(n):\n        # define the base case\n        if n == 1:\n            return 1\n        else:\n            # use the recursive formula\n            return n + sum_natural_numbers(n-1)\n    return sum_natural_numbers(10)", "answer_type": "integer"}
{"id": "xueguangma/dividend_discount_model_1.json", "question": "Lore Ltd. estimates that its dividend growth will be 13% per year for the next five years. It will then settle to a sustainable, constant, and continuing rate of 5%. Let\u2019s say that the current year\u2019s dividend is $14 and the required rate of return (or discount rate) is 12%. What is the current fair value of Lore Ltd. stock?", "prediction": 78.26234172692348, "answer": 291.45, "rationale": "def solve():\n    # Let's define the variables\n    dividend_growth = 0.13\n    dividend_constant = 0.05\n    dividend_current = 14\n    discount_rate = 0.12\n    # Let's calculate the fair value\n    fair_value = 0\n    for i in range(5):\n        fair_value += dividend_current / (1 + discount_rate)**(i+1)\n        dividend_current *= (1 + dividend_growth)\n    fair_value += dividend_current / (1 + discount_rate)**(5)\n    return fair_value", "answer_type": "float"}
{"id": "xueguangma/dividend_discount_model_2.json", "question": "Phased Solutions Inc. has paid the following dividends per share from 2011 to 2020:\n2011 | 2012 | 2013 | 2014 | 2015 | 2016 | 2017 | 2018 | 2019 | 2020\n$0.70 | $0.80 | $0.925 | $1.095 | $1.275 | $1.455 | $1.590 | $1.795 | $1.930 | $2.110\nIf you plan to hold this stock for 10 years, believe Phased Solutions will continue this dividend pattern forever, and you want to earn 17% on your investment, what would you be willing to pay per share of Phased Solutions stock as of January 1, 2021?", "prediction": 0.28449112164265383, "answer": 60.23, "rationale": "def solve():\n    # Let's define a function to calculate the present value of the dividend\n    def present_value(dividend, rate, years):\n        # use the present value formula\n        return dividend / (1 + rate)**years\n    # Let's define a function to calculate the total present value\n    def total_present_value(dividends, rate, years):\n        # use the total present value formula\n        total = 0\n        for i in range(len(dividends)):\n            total += present_value(dividends[i], rate, years)\n        return total\n    # Let's define the dividend list\n    dividends = [0.7, 0.8, 0.925, 1.095, 1.275, 1.455, 1.59, 1.795, 1.93, 2.11]\n    # Let's define the rate and years\n    rate = 0.17\n    years = 10\n    # Let's calculate the total present value\n    total_pv = total_present_value(dividends, rate, years)\n    # Let's calculate the price per share\n    price_per_share = total_pv / 10\n    return price_per_share", "answer_type": "float"}
{"id": "xueguangma/dividend_discount_model_3.json", "question": "If a preferred share of stock pays dividends of $1.90 per year, and the required rate of return for the stock is 9%, then what is its intrinsic value?", "prediction": 55.0, "answer": 22.11, "rationale": "def solve():\n    # Intrinsic value = Dividend / Required rate of return\n    return 1.90 / 0.09\ndef solve():\n    # Let's write the program step by step\n    # Let's define a function to calculate the sum\n    def sum_natural_numbers(n):\n        # use the formula for sum of natural numbers\n        return n * (n + 1) / 2\n    return sum_natural_numbers(10)", "answer_type": "float"}
{"id": "xueguangma/dividend_discount_model_4.json", "question": "If a stock pays a $5 dividend this year, and the dividend has been growing 6% annually, what will be the stock\u2019s intrinsic value, assuming a required rate of return of 12%?", "prediction": 83.33333333333334, "answer": 88.33, "rationale": "def solve():\n    # Let's define the required rate of return\n    r = 0.12\n    # Let's define the dividend growth rate\n    g = 0.06\n    # Let's define the current dividend\n    d0 = 5\n    # Let's calculate the intrinsic value\n    intrinsic_value = d0 / (r - g)\n    return intrinsic_value", "answer_type": "float"}
{"id": "xueguangma/dividend_discount_model_5.json", "question": "CheckMate forecasts that its dividend will grow at 20% per year for the next four years before settling down at a constant 8% forever. Dividend (current year,2016) = $12; expected rate of return = 15%. What is the fair value of the stock now?", "prediction": -497.6639999999998, "answer": 273.0, "rationale": "def solve():\n    # Let's define the variables\n    dividend_2016 = 12\n    growth_rate = 0.2\n    expected_rate_of_return = 0.15\n    # Let's calculate the fair value of the stock\n    fair_value = dividend_2016 * (1 + growth_rate)**4 / (expected_rate_of_return - growth_rate)\n    return fair_value", "answer_type": "float"}
{"id": "xueguangma/earnings_multiplier_1.json", "question": "Estimate the PE ratio for a firm that has the following characteristics:\nLength of high growth = five years\nGrowth rate in first five years = 25%\nPayout ratio in first five years = 20%\nGrowth rate after five years = 8%\nPayout ratio after five years = 50%\nBeta = 1.0 \nRisk-free rate = T-bond rate = 6%\nCost of equity = 6% + 1(5.5%) = 11.5%\nRisk premium = 5.5%\nWhat is the estimated PE ratio for this firm?", "prediction": 0.47916666666666663, "answer": 28.75, "rationale": "def solve():\n    # Let's define the variables\n    length_high_growth = 5\n    growth_rate_first_five_years = 0.25\n    payout_ratio_first_five_years = 0.2\n    growth_rate_after_five_years = 0.08\n    payout_ratio_after_five_years = 0.5\n    beta = 1.0\n    risk_free_rate = 0.06\n    cost_of_equity = 0.115\n    risk_premium = 0.055\n    # Let's calculate the expected earnings growth rate\n    expected_earnings_growth_rate = (growth_rate_first_five_years * (1 - payout_ratio_first_five_years)) + (growth_rate_after_five_years * payout_ratio_after_five_years)\n    # Let's calculate the expected PE ratio\n    expected_PE_ratio = cost_of_equity / expected_earnings_growth_rate\n    return expected_PE_ratio", "answer_type": "float"}
{"id": "xueguangma/earnings_multiplier_2.json", "question": "Estimate the PEG ratio for a firm that has the following characteristics:\nLength of high growth = five years\nGrowth rate in first five years = 25%\nPayout ratio in first five years = 20%\nGrowth rate after five years = 8%\nPayout ratio after five years = 50%\nBeta = 1.0 \nRisk-free rate = T-bond rate = 6%\nCost of equity = 6% + 1(5.5%) = 11.5%\nRisk premium = 5.5%\nWhat is the estimated PEG ratio for this firm?", "prediction": 4.363636363636363, "answer": 1.15, "rationale": "def solve():\n    # Let's define the variables\n    length_high_growth = 5\n    growth_rate_first_five_years = 0.25\n    payout_ratio_first_five_years = 0.2\n    growth_rate_after_five_years = 0.08\n    payout_ratio_after_five_years = 0.5\n    beta = 1.0\n    risk_free_rate = 0.06\n    cost_of_equity = 0.115\n    risk_premium = 0.055\n    \n    # Calculate the expected growth rate\n    expected_growth_rate = (growth_rate_first_five_years * (1 - payout_ratio_first_five_years)) + (growth_rate_after_five_years * payout_ratio_after_five_years)\n    \n    # Calculate the PEG ratio\n    PEG_ratio = expected_growth_rate / (cost_of_equity - risk_free_rate)\n    \n    return PEG_ratio", "answer_type": "float"}
{"id": "xueguangma/earnings_multiplier_3.json", "question": "Company A is currently trading at $150 per share, and earnings per share are calculated as $10. What is the P/E ratio?", "prediction": 55, "answer": 15.0, "rationale": "def solve():\n    # Let's define the P/E ratio\n    pe_ratio = 150/10\n    return pe_ratio\ndef solve():\n    # Let's write the program step by step\n    # Let's define the sum of the first 10 natural numbers\n    sum = 0\n    for i in range(1, 11):\n        sum += i\n    return sum", "answer_type": "float"}
{"id": "xueguangma/effective_rates_1.json", "question": "What is the effective rates (between 0 and 1) for 18% compounded quarterly? Return the numeric value.", "prediction": 0.1925186006249997, "answer": 0.1925, "rationale": "def solve():\n    # Let's define the effective rate formula\n    def eff_rate(r, n):\n        return (1 + (r/n))**n - 1\n    return eff_rate(0.18, 4)", "answer_type": "float"}
{"id": "xueguangma/effective_rates_2.json", "question": "What is the effective rates for 3% compounded monthly?", "prediction": 0.030415956913506736, "answer": 0.0304, "rationale": "def solve():\n    # Let's define the effective rate formula\n    def effective_rate(r, n):\n        return (1 + r/n)**n - 1\n    return effective_rate(0.03, 12)", "answer_type": "float"}
{"id": "xueguangma/elasticity.json", "question": "Suppose the demand curve for oPads is given by $p=\\frac{500-x}{10}, What is the elasticity value of this demand function.", "prediction": null, "answer": -1.5, "rationale": "def solve():\n    # Let's define the demand function\n    def demand(x):\n        return (500-x)/10\n    # Let's define the elasticity function\n    def elasticity(x):\n        return (demand(x+1)-demand(x))/(demand(x)*(x+1-x))\n    return elasticity(x)", "answer_type": "float"}
{"id": "xueguangma/extreme_value_theorem.json", "question": "Let $f(x) = 1/x$ on $(0, 1]$ and $f(x) = 3$ if $x = 0$. Is there a global maximum on interval $[0, 1]$?", "prediction": "True", "answer": false, "rationale": " First, $f(x)$ is continuous on $[0, 1]$ and $f(x)$ is decreasing on $(0, 1]$. Since $f(x)$ is continuous on $[0, 1]$, the global maximum must be either at $x = 0$ or at the boundary of the interval. Since $f(x)$ is decreasing on $(0, 1]$, the global maximum must be at $x = 0$. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "xueguangma/fair_market_value_of_a_bond.json", "question": "A state issues a 15 year $1000 bond that pays $25 every six months. If the current market interest rate is 4%, what is the fair market value of the bond?", "prediction": 55, "answer": 1111.97, "rationale": "def solve():\n    # Let's define the variables\n    face_value = 1000\n    coupon_rate = 0.25\n    coupon_frequency = 6\n    market_interest_rate = 0.04\n    time_period = 15 * 2 # 15 years * 2 (semi-annually)\n    # Let's calculate the present value of the bond\n    present_value = 0\n    for i in range(time_period):\n        present_value += coupon_rate * face_value / (1 + market_interest_rate / coupon_frequency)**(i+1)\n    present_value += face_value / (1 + market_interest_rate / coupon_frequency)**time_period\n    return present_value\ndef solve():\n    # Let's write the program step by step\n    # Let's define the variables\n    n = 10\n    # Let's calculate the sum\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum", "answer_type": "float"}
{"id": "xueguangma/forward_price_1.json", "question": "consider a forward contract on a non-dividend paying stock that matures in 6 months. The current stock price is $50 and the 6-month interest rate is 4% per annum. What is the forward price, F.", "prediction": 51.01006700133779, "answer": 51.0, "rationale": "def solve():\n    # The forward price is given by the formula:\n    # F = S * e^(r*T)\n    # where S is the current stock price, r is the interest rate and T is the time to maturity\n    S = 50\n    r = 0.04\n    T = 6/12\n    F = S * math.exp(r*T)\n    return F", "answer_type": "float"}
{"id": "xueguangma/forward_price_2.json", "question": "Consider a forward contract on a 4-year bond with maturity 1 year. The current value of the bond is $1018.86, it has a face value of $1000 and a coupon rate of 10% per annum. A coupon has just been paid on the bond and further coupons will be paid after 6 months and after 1 year, just prior to delivery. Interest rates for 1 year out are flat at 8%. Compute the forward price of the bond.", "prediction": 1018.5185185185185, "answer": 999.998976, "rationale": "def solve():\n    # Let's define the variables\n    face_value = 1000\n    coupon_rate = 0.1\n    current_value = 1018.86\n    interest_rate = 0.08\n    # Let's calculate the coupon payment\n    coupon_payment = face_value * coupon_rate\n    # Let's calculate the present value of the coupon payments\n    present_value_coupon_payment = coupon_payment / (1 + interest_rate)\n    # Let's calculate the present value of the face value\n    present_value_face_value = face_value / (1 + interest_rate)\n    # Let's calculate the forward price\n    forward_price = present_value_coupon_payment + present_value_face_value\n    return forward_price", "answer_type": "float"}
{"id": "xueguangma/forward_price_3.json", "question": "The current price of gold is $412 per ounce. The storage cost is $2 per ounce per year, payable quaterly in advance. Assuming a constant intrest rate of 9% compounded quarterly, what is the theoretial forward price of gold for delivery in 9 months?", "prediction": -1358.5700000000002, "answer": 442.02, "rationale": "def solve():\n    # Let's define the intrest rate\n    r = 0.09\n    # Let's define the storage cost\n    c = 2\n    # Let's define the current price of gold\n    S = 412\n    # Let's define the delivery time\n    T = 9\n    # Let's calculate the forward price\n    F = S * (1 + r * T/4 - c * T/4)\n    return F", "answer_type": "float"}
{"id": "xueguangma/forward_rate_1.json", "question": "Given the following spot rates:\n1-year spot rate: 5%;\n2-year spot rate: 6%.\n Determine the one-year forward rate (between 0 and 1) one year from today.", "prediction": 0.19999999999999996, "answer": 0.070095, "rationale": "def solve():\n    # Let's define the spot rates\n    one_year_spot_rate = 0.05\n    two_year_spot_rate = 0.06\n    # Let's calculate the one-year forward rate\n    one_year_forward_rate = (two_year_spot_rate / one_year_spot_rate) - 1\n    return one_year_forward_rate", "answer_type": "float"}
{"id": "xueguangma/forward_rate_2.json", "question": "If the spot rates for 1 and 2 years are $s_1=6.3%$ and $s_2=6.9%, what is the forward rate $f_{1,2}$?", "prediction": null, "answer": 0.075, "rationale": "def solve():\n    # Let's define the formula for forward rate\n    f12 = (1 + s2) / (1 + s1) - 1\n    # Let's calculate the forward rate\n    f12 = (1 + 0.069) / (1 + 0.063) - 1\n    return f12", "answer_type": "float"}
{"id": "xueguangma/forward_rate_3.json", "question": "Consider two 5 year bonds: one has a 9% coupon and sells for 101.00; the other has a 7% coupon and sells for 93.20. What is the price of a 5-year zero-coupon bond.", "prediction": 66.04669097200536, "answer": 65.9, "rationale": "def solve():\n    # Let's define the coupon rate of the two bonds\n    coupon_rate_1 = 0.09\n    coupon_rate_2 = 0.07\n    # Let's define the price of the two bonds\n    price_1 = 101.00\n    price_2 = 93.20\n    # Let's calculate the present value of the two bonds\n    present_value_1 = price_1 / (1 + coupon_rate_1)**5\n    present_value_2 = price_2 / (1 + coupon_rate_2)**5\n    # Let's calculate the price of the zero-coupon bond\n    zero_coupon_price = (present_value_1 + present_value_2) / 2\n    return zero_coupon_price", "answer_type": "float"}
{"id": "xueguangma/fubini_theorem.json", "question": "Compute the double integrals over indicated rectangles $\\iint\\limits_{R}{{2x - 4{y^3}\\,dA}}$, $R = [-5,4] \\times [0, 3]", "prediction": -751.4180999999937, "answer": -756, "rationale": "def solve():\n    # Let's define the function\n    def f(x, y):\n        return 2*x - 4*y**3\n    # Let's define the limits of integration\n    x_min = -5\n    x_max = 4\n    y_min = 0\n    y_max = 3\n    # Let's define the double integral\n    def double_integral(f, x_min, x_max, y_min, y_max):\n        # Let's define the integration step\n        dx = 0.01\n        dy = 0.01\n        # Let's define the sum\n        sum = 0\n        # Let's loop over the x and y values\n        for x in range(int((x_max - x_min) / dx)):\n            for y in range(int((y_max - y_min) / dy)):\n                sum += f(x_min + x * dx, y_min + y * dy) * dx * dy\n        return sum\n    return double_integral(f, x_min, x_max, y_min, y_max)", "answer_type": "integer"}
{"id": "xueguangma/fundamental_theorem_of_calculus.json", "question": "Find $\\int_{0}^{\\sqrt{3}} \\frac{dx}{1+x^2}$.", "prediction": null, "answer": 1.0472, "rationale": "def solve():\n    # Let's define the function\n    def f(x):\n        return 1/(1+x**2)\n    # Let's define the integral\n    from scipy.integrate import quad\n    return quad(f, 0, 3**0.5)[0]", "answer_type": "float"}
{"id": "xueguangma/future_value_1.json", "question": "For a $1,000 investment, what is the future value of the investment if the interest rate is 8% compounded annually for 3 years?", "prediction": 1259.7120000000002, "answer": 1259.71, "rationale": "def solve():\n    # Let's define the future value function\n    def future_value(investment, rate, years):\n        # use the future value formula\n        return investment * (1 + rate) ** years\n    return future_value(1000, 0.08, 3)", "answer_type": "float"}
{"id": "xueguangma/future_value_2.json", "question": "Calculate the future value of an ordinary annuity of $800 per year for 4 years at 5% rate of return.", "prediction": 3448.1000000000035, "answer": 3448.1, "rationale": "def solve():\n    # Let's define the function to calculate the future value of an ordinary annuity\n    def future_value_annuity(payment, rate, years):\n        # use the formula to calculate the future value\n        return payment * (((1 + rate)**years - 1) / rate)\n    return future_value_annuity(800, 0.05, 4)", "answer_type": "float"}
{"id": "xueguangma/geometric_brownian_motion.json", "question": "Assume the Black-Scholes framework. For $t \\ge 0$, let $S(t)$ be the time-$t$ price of a nondividend-paying stock. You are given:\n(i) $S(0)=0.5\n(ii) The stock price process is $\\frac{dS(t)}{S(t)} = 0.05dt+0.2dZ(t)$ where $Z(t)$ is a standart Brownian motion.\n(iii) $E[S(1)^\\alpha]=1.4$, where $\\alpha$ is a negative constant.\n(iv) The continuously compounded risk-free interest rate is $3%$.\nConsider a contingent claim that pays $S(1)^\\alpha$ at time 1. What is the time-0 price of the contigent claim?", "prediction": null, "answer": 1.372, "rationale": "def solve():\n    # Define the parameters\n    S0 = 0.5\n    r = 0.03\n    alpha = -1 * alpha\n    E_S1_alpha = 1.4\n    # Use the Black-Scholes formula\n    C0 = E_S1_alpha * math.exp(-r)\n    return C0", "answer_type": "float"}
{"id": "xueguangma/geometric_mean_return.json", "question": "The returns on a stock are 2.45% at 2018, 5.42% at 2019, -13.83% at 2020. What is the compound annual rate (between -1 and 1) of return over the three years.", "prediction": null, "answer": -0.023669, "rationale": "def solve():\n    # Let's define the function to calculate the compound annual rate\n    def compound_annual_rate(returns):\n        # calculate the total return\n        total_return = 1\n        for r in returns:\n            total_return *= (1 + r)\n        # calculate the compound annual rate\n        compound_annual_rate = (total_return ** (1/3)) - 1\n        return compound_annual_rate", "answer_type": "float"}
{"id": "xueguangma/gross_domestic_product.json", "question": "Calculate the Gross Domestic Product using the total expenditure approach:\nConsumption Expenditures | $500 billion\nWages and salaries | $400 billion\n(Gross Private) Investments Expenditures | $80 billion\nGovernment Expenditures | $100 billion\nTaxes | $70 billion\nImports | $50 billion\nExports | $30 billion\nWhat is the GDP (in billions)?", "prediction": 14.696938456699069, "answer": 660, "rationale": "def solve():\n    # Let's define the variables\n    consumption_expenditures = 500\n    wages_and_salaries = 400\n    investments_expenditures = 80\n    government_expenditures = 100\n    taxes = 70\n    imports = 50\n    exports = 30\n    # Let's calculate the GDP\n    GDP = consumption_expenditures + wages_and_salaries + investments_expenditures + government_expenditures - taxes - imports + exports\n    return GDP\ndef solve():\n    # Let's write the program step by step\n    # Let's define the variables\n    side1 = 5\n    side2 = 6\n    side3 = 7\n    # Let's calculate the semi-perimeter\n    s = (side1 + side2 + side3) / 2\n    # Let's calculate the area\n    area = (s*(s-side1)*(s-side2)*(s-side3)) ** 0.5\n    return area", "answer_type": "integer"}
{"id": "xueguangma/holding_period_return.json", "question": "Three years ago, Fred invested $10,000 in the shares of ABC Corp. Each year, the company distributed dividends to its shareholders. Each year, Fred received $100 in dividends. Note that since Fred received $100 in dividends each year, his total income is $300. Today, Fred sold his shares for $12,000. What is the holding period return of his investment?", "prediction": 1023.0, "answer": 0.23, "rationale": "def solve():\n    # Let's define the holding period return\n    hpr = ((12000 - 10000 + 300) / 10000) * 100\n    return hpr\ndef solve():\n    # Let's write the program step by step\n    # Let's define the sum of the first 10 terms of the geometric sequence\n    sum = (2**10 - 1) / (2 - 1)\n    return sum", "answer_type": "float"}
{"id": "xueguangma/intermediate_value_theorem.json", "question": "Does $p(x) = x^5 + x \u2212 1$ have any real roots?", "prediction": "1", "answer": true, "rationale": "\n\nWe can use the Rational Root Theorem to determine if $p(x)$ has any real roots. The theorem states that if a polynomial equation has integer coefficients, then any rational roots must be a factor of the constant term divided by a factor of the leading coefficient.\n\nIn this case, the constant term is -1 and the leading coefficient is 1. Therefore, the only possible rational roots are -1 and 1.\n\nWe can then use the quadratic formula to determine if either of these values are roots of the equation.\n\nSubstituting -1 into the equation, we get $-1^5 + (-1) - 1 = -1 + 1 - 1 = -1 \\neq 0$.\n\nSubstituting 1 into the equation, we get $1^5 + 1 - 1 = 1 + 1 - 1 = 1 = 0$.\n\nTherefore, the answer is that the equation has one real root, which is 1.", "answer_type": "bool"}
{"id": "xueguangma/jensen_alpha.json", "question": "You are interviewing two investment managers. Mr. Wong shows that the average return on his portfolio for the past 10 years has been 14%, with a standard deviation of 8% and a beta of 1.2. Ms. Petrov shows that the average return on her portfolio for the past 10 years has been 16%, with a standard deviation of 10% and a beta of 1.6. You know that over the past 10 years, the US Treasury security rate has averaged 2% and the return on the S&P 500 has averaged 11%. By measuring Jensen\u2019s alpha, Mr. Wong has done the better job. Is this correct? Answer True or False.", "prediction": "True", "answer": true, "rationale": " Jensen's alpha is a measure of the excess return of an investment relative to the return of a benchmark index. In this case, the benchmark index is the US Treasury security rate and the S&P 500. Mr. Wong's average return of 14% is higher than the benchmark index of 2% and 11%, and his alpha is 12%. Ms. Petrov's average return of 16% is also higher than the benchmark index of 2% and 11%, and her alpha is 5%. Therefore, Mr. Wong has done the better job and the answer is True.", "answer_type": "bool"}
{"id": "xueguangma/maclaurin_series.json", "question": "If $|x|$ is less than 0.7, then if we use fifth Maclaurin polynomial approximate $sin(x)$ the error is less than 0.0001. Is this correct? Answer True or False.", "prediction": "True", "answer": true, "rationale": " The fifth Maclaurin polynomial of $sin(x)$ is $x - \\frac{x^3}{3!} + \\frac{x^5}{5!}$. Since $|x|$ is less than 0.7, the error of the fifth Maclaurin polynomial is less than $\\frac{0.7^7}{7!}$, which is less than 0.0001. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "xueguangma/margin_call.json", "question": "An investor is looking to purchase a security for $100 with an initial margin of 50% (meaning the investor is using $50 of his money to purchase the security and borrowing the remaining $50 from a broker). In addition, the maintenance margin is 25%. At what price of the security will the investor receive a margin call?", "prediction": 66.66666666666667, "answer": 66.67, "rationale": "def solve():\n    # Let's define the initial margin\n    initial_margin = 0.5\n    # Let's define the maintenance margin\n    maintenance_margin = 0.25\n    # Let's calculate the price of the security at which the investor will receive a margin call\n    margin_call_price = 100 * (1 - initial_margin) / (1 - maintenance_margin)\n    return margin_call_price", "answer_type": "float"}
{"id": "xueguangma/options_theory.json", "question": "An investor who is bullish about a stock may wish to construct a bull spread for that stock. One way to construct such a spread is to buy a call with strke price $K_1$ and sell a call with the same expiration date but with a strike price of $K_2 > K_1$. If we draw the payoff curve for that a spread, the initial cost of the spread would be negative is this True? Answer True or False.", "prediction": "True", "answer": false, "rationale": " When we buy a call with strike price $K_1$ and sell a call with the same expiration date but with a strike price of $K_2 > K_1$, the cost of the spread would be the cost of the call with strike price $K_1$ minus the cost of the call with strike price $K_2$. Since the cost of the call with strike price $K_1$ is higher than the cost of the call with strike price $K_2$, the cost of the spread would be negative. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "xueguangma/outstanding_balance_of_loan.json", "question": "Mr. Jackson bought his house in 1995, and financed the loan for 30 years at an interest rate of 7.8%. His monthly payment was $1260. In 2015, Mr. Jackson decides to pay off the loan. Find the balance of the loan he still owes.", "prediction": -26818.49984860796, "answer": 104761.48, "rationale": "def solve():\n    # Let's define the variables\n    principal = 0\n    rate = 0.078\n    n = 360 # number of payments\n    payment = 1260\n    # Let's calculate the balance\n    for i in range(2015-1995):\n        principal = principal * (1 + rate/12) - payment\n    return principal", "answer_type": "float"}
{"id": "xueguangma/physics_circuits_1.json", "question": "What is the RC time constant of the circuit in seconds?", "prediction": 10000, "answer": 3800.0, "rationale": "def solve():\n    # Let's define the RC time constant\n    RC = 10 * 10**3 # 10k ohm resistor and 10uF capacitor\n    return RC", "answer_type": "float"}
{"id": "xueguangma/physics_circuits_2.json", "question": "Consider the infinitely long chain of resistors shown below. What is the resistance between terminals a and b if R=1?", "prediction": 1125899906842623, "answer": 0.73, "rationale": "def solve():\n    # Let's define a function to calculate the resistance\n    def resistance(R):\n        # use the formula for resistance of a chain of resistors\n        return (R * (2**50 - 1))\n    return resistance(1)", "answer_type": "float"}
{"id": "xueguangma/physics_coulombs_law.json", "question": "Point charges q1=50\u03bcC and  q2=\u221225\u03bcC are placed 1.0 m apart. What is the force on a third charge q3=20\u03bcC placed midway between q1 and q2?", "prediction": 4.495, "answer": 53.94, "rationale": "def solve():\n    # Define the constants\n    q1 = 50e-6 # in Coulombs\n    q2 = -25e-6 # in Coulombs\n    q3 = 20e-6 # in Coulombs\n    r = 1.0 # in meters\n    k = 8.99e9 # in Nm^2/C^2\n    # Calculate the force using Coulomb's law\n    F = k * (q1 * q3) / (r**2) + k * (q2 * q3) / (r**2)\n    return F # in Newtons", "answer_type": "float"}
{"id": "xueguangma/physics_current_and_resistance.json", "question": "Consider a resistor made from a hollow cylinder of carbon as shown below. The inner radius of the cylinder is $R_i=0.2$mm and the outer radius is $R_o=0.3$mm. The length of the resistor is $L=0.9$mm. The resistivity of the carbon is $\\rho=3.5 * 10^{-5} \\Omega \\cdot m$. What is the resistance in $\\Omega \\cdot m$?", "prediction": 2.5095690747051587e-06, "answer": 2.5, "rationale": "def solve():\n    # Define the constants\n    Ri = 0.2 # inner radius in mm\n    Ro = 0.3 # outer radius in mm\n    L = 0.9 # length in mm\n    rho = 3.5 * 10**-5 # resistivity in Ohm*m\n    # Calculate the resistance\n    R = rho * (math.log(Ro/Ri)/(2*math.pi*L))\n    return R # resistance in Ohm*m", "answer_type": "float"}
{"id": "xueguangma/physics_gauss_law.json", "question": "The electric flux through a spherical surface is  $4.0\\times 10^4 N \\cdot m^2/C$. What is the net charge enclosed by the surface?", "prediction": 3.5399999999999997e-07, "answer": 3.54e-07, "rationale": "def solve():\n    # Electric flux is given by the equation\n    # $\\Phi = \\frac{Q}{\\epsilon_0}$\n    # where $\\epsilon_0$ is the permittivity of free space\n    # and Q is the net charge enclosed by the surface\n    # Let's define the constants\n    epsilon_0 = 8.85 * 10**(-12) # in C^2/Nm^2\n    flux = 4.0 * 10**4 # in Nm^2/C\n    # Now, let's calculate the net charge\n    Q = flux * epsilon_0\n    return Q # in C", "answer_type": "float"}
{"id": "xueguangma/present_value_1.json", "question": "If a cash flow of $100 has a discount rate of 5% and to be received in 5 years, what is the present value of the cash flow?", "prediction": 78.35261664684589, "answer": 78.3526, "rationale": "def solve():\n    # Let's define the present value formula\n    def present_value(cash_flow, discount_rate, years):\n        return cash_flow / (1 + discount_rate)**years\n    return present_value(100, 0.05, 5)", "answer_type": "float"}
{"id": "xueguangma/present_value_2.json", "question": "For the 3 payments of $1000 each end-of-year, with 7% rate of return, what is the present value if the first payment is made at the end of fifth year?", "prediction": 55.0, "answer": 2002.0781, "rationale": "def solve():\n    # Let's define the present value formula\n    def present_value(payment, rate, n):\n        return payment * (1 - (1 + rate)**(-n)) / rate\n    # Let's calculate the present value\n    return present_value(1000, 0.07, 3) * (1 + 0.07)**5\ndef solve():\n    # Let's write the program step by step\n    # Let's define a function to calculate the sum\n    def sum_of_numbers(n):\n        return n * (n + 1) / 2\n    # Let's calculate the sum\n    return sum_of_numbers(10)", "answer_type": "float"}
{"id": "xueguangma/put_call_parity_1.json", "question": "Suppose a European call option on a barrel of crude oil with a strike price of $50 and a maturity of one-month, trades for $5. What is the price of the put premium with identical strike price and time until expiration, if the one-month risk-free rate is 2% and the spot price of the underlying asset is $52?", "prediction": null, "answer": 2.92, "rationale": "def solve():\n    # Let's define the Black-Scholes formula\n    def black_scholes(S, K, r, T, C):\n        d1 = (np.log(S/K) + (r + 0.5 * np.power(sigma, 2)) * T) / (sigma * np.sqrt(T))\n        d2 = d1 - sigma * np.sqrt(T)\n        return C - S * norm.cdf(d1) + K * np.exp(-r * T) * norm.cdf(d2)\n    # Let's define the parameters\n    S = 52 # Spot price of the underlying asset\n    K = 50 # Strike price\n    r = 0.02 # Risk-free rate\n    T = 1/12 # Maturity\n    C = 5 # Call option price\n    sigma = 0.2 # Volatility\n    # Let's calculate the put premium\n    return black_scholes(S, K, r, T, 0) - C", "answer_type": "float"}
{"id": "xueguangma/put_call_parity_2.json", "question": "You are given: (i) The current exchange rate is 0.011$/\u00a5. (ii) A four-year dollar-denominated European put option on yen with a strike price of $0.008 sells for $0.0005. (iii) The continuously compounded risk-free interest rate on dollars is 3%. (iv) The continuously compounded risk-free interest rate on yen is 1.5%. Calculate the price of a four-year yen-denominated European put option on dollars with a strike price of \u00a5125.", "prediction": 0.0007290501981336593, "answer": 42.77325, "rationale": "def solve():\n    # Define the variables\n    exchange_rate = 0.011\n    dollar_strike_price = 0.008\n    dollar_option_price = 0.0005\n    dollar_interest_rate = 0.03\n    yen_interest_rate = 0.015\n    yen_strike_price = 125\n    \n    # Calculate the price of the yen-denominated option\n    price = dollar_option_price * (exchange_rate * yen_strike_price) * (1 + dollar_interest_rate)**4 / (1 + yen_interest_rate)**4\n    return price", "answer_type": "float"}
{"id": "xueguangma/real_exchange_rate.json", "question": "assume you are Indonesian. In 2010, the rupiah exchange rate was around IDR15,000/USD, and the consumer price index in Indonesia and the United States was at 100. In 2019, the exchange rate changed to IDR14,000/USD. Simultaneously, Indonesia\u2019s inflation rose 5% due to the consumer price index rising to 105. Meanwhile, the United States\u2019 inflation rate rose 10% due to the consumer price index rising to 110. Whats the real exchange rate?", "prediction": 14318.181818181816, "answer": 14666.67, "rationale": "def solve():\n    # Let's define the exchange rate in 2010\n    exchange_rate_2010 = 15000\n    # Let's define the consumer price index in 2010\n    CPI_2010 = 100\n    # Let's define the inflation rate in Indonesia\n    inflation_rate_Indonesia = 5\n    # Let's define the inflation rate in the United States\n    inflation_rate_US = 10\n    # Let's calculate the real exchange rate\n    real_exchange_rate = exchange_rate_2010 * (1 + (inflation_rate_Indonesia/100)) / (1 + (inflation_rate_US/100))\n    return real_exchange_rate", "answer_type": "float"}
{"id": "xueguangma/rolle_theorem.json", "question": "For the function $f(x)=|x|\u22121$ defined on $[-1,1]$. Does it meet the criteria of Rolle's Theorem? Answer true or false.", "prediction": "False", "answer": false, "rationale": " Rolle's Theorem states that if a function is continuous on a closed interval $[a,b]$ and differentiable on the open interval $(a,b)$, and if $f(a)=f(b)$, then there exists at least one $c$ in $(a,b)$ such that $f'(c)=0$. \n\nIn this case, the function $f(x)=|x|\u22121$ is continuous on the closed interval $[-1,1]$ and differentiable on the open interval $(-1,1)$. However, $f(-1)=-2$ and $f(1)=0$, which means $f(-1)\\neq f(1)$. \n\nTherefore, the answer is False.", "answer_type": "bool"}
{"id": "xueguangma/roys_safety_first_ratio.json", "question": "Portfolio | Portfolio 1 | Portfolio 2 | Portfolio 3\nExpected Portfolio Return |  5.3% | 6.5% | 7.2%\nPortfolio Standard Deviation | 8.2% | 9.1% | 10.1%\n\nIf we use Roy's safety-first criterion to decide with portfolio is optimal, with a threshold return of 5%. Is portfolio 2 the optimal one? Answer True or False.", "prediction": "True", "answer": false, "rationale": " Roy's safety-first criterion states that the optimal portfolio is the one with the highest expected return that is greater than the threshold return. In this case, the threshold return is 5%. Portfolio 2 has an expected return of 6.5%, which is greater than the threshold return of 5%. Therefore, the answer is True.", "answer_type": "bool"}
{"id": "xueguangma/sharpe_ratio.json", "question": "Let\u2019s assume that the 10-year annual return for the S&P 500 (market portfolio) is 10%, while the average annual return on Treasury bills (a good proxy for the risk-free rate) is 5%. The standard deviation is 15% over a 10-year period. Whats the market Sharpe Ratio?", "prediction": 0.3333333333333333, "answer": 0.33, "rationale": "def solve():\n    # Let's define the Sharpe Ratio formula\n    def sharpe_ratio(market_return, risk_free_return, standard_deviation):\n        return (market_return - risk_free_return) / standard_deviation\n    # Let's calculate the Sharpe Ratio\n    return sharpe_ratio(10, 5, 15)", "answer_type": "float"}
{"id": "xueguangma/sigma_estimation.json", "question": "Traders in major financial institutions use the Black-Scholes formula in a backward fashion to infer other traders' estimation of $\\sigma$ from option prices. In fact, traders frequently quote sigmas to each other, rather than prices, to arrange trades. Suppose a call option on a stock that pays no dividend for 6 months has a strike price of $35, a premium of $2.15, and time to maturity of 7 weeks. The current short-term T-bill rate is 7%, and the price of the underlying stock is $36.12. What is the implied volatility of the underlying security?", "prediction": null, "answer": 0.251, "rationale": "def solve():\n    # Let's import the necessary libraries\n    import scipy.stats as si\n    # Let's define the parameters\n    S = 36.12  # Underlying Stock Price\n    K = 35  # Strike Price\n    T = 7/52  # Time to Maturity in Weeks\n    r = 0.07  # Risk-free rate\n    C = 2.15  # Call Option Premium\n    # Let's calculate the implied volatility\n    implied_vol = si.implied_volatility(C, S, K, T, r)\n    return implied_vol", "answer_type": "float"}
{"id": "xueguangma/sortino_ratio.json", "question": "Let\u2019s assume Mutual Fund A has an annualized return of 15% and a downside deviation of 8%. Mutual Fund B has an annualized return of 12% and a downside deviation of 5%. The risk-free rate is 2.5%. What is the Sortino ratio for Fund A?", "prediction": 1.5625, "answer": 1.56, "rationale": "def solve():\n    # Let's define the Sortino ratio formula\n    def sortino_ratio(annualized_return, downside_deviation, risk_free_rate):\n        return (annualized_return - risk_free_rate) / downside_deviation\n    # Calculate the Sortino ratio for Fund A\n    sortino_ratio_A = sortino_ratio(15, 8, 2.5)\n    return sortino_ratio_A", "answer_type": "float"}
{"id": "xueguangma/spot_rate.json", "question": "Suppose that:\nThe 1-year spot rate is 3%;\nThe 2-year spot rate is 4%; and\nThe 3-year spot rate is 5%. What is the price of a 100-par value 3-year bond paying 6% annual coupon payment?", "prediction": 275.9785900516113, "answer": 102.95, "rationale": "def solve():\n    # Let's define the variables\n    FV = 100 # face value\n    r1 = 0.03 # 1-year spot rate\n    r2 = 0.04 # 2-year spot rate\n    r3 = 0.05 # 3-year spot rate\n    c = 0.06 # coupon payment\n    # Let's calculate the price of the bond\n    price = FV*(1/(1+r1)) + FV*(1/(1+r2)**2) + FV*(1/(1+r3)**3) + c*(1/(1+r3)**3)\n    return price", "answer_type": "float"}
{"id": "xueguangma/state_tree.json", "question": "A certain underlying state graph is a tree where each node has three successor nodes, indexed $a$, $b$, $c$. There are two assets defined on this tree which pay no dividends except at the terminal time $T$. At a certain period it is known that the prices of the two accets are multiplied by factors, depending on the successor node. These factors are shown in the table below:\n | | a | b | c\nsecurity | 1 | 1.2 | 1.0 | 0.8\n | 2 | 1.2 | 1.3 | 1.4\n\n Is there a short-tem riskless asset for this period? Answer True or False.", "prediction": "False", "answer": true, "rationale": " If there is a short-term riskless asset, then the price of the asset should remain the same regardless of the successor node. However, from the table above, we can see that the prices of the two assets depend on the successor node. Therefore, the answer is False.", "answer_type": "bool"}
{"id": "xueguangma/sunk_costs.json", "question": "A young couple has made a non-refundable deposit of the first month's rent (equal to $1, 000) on a 6-month apartment lease. The next day they find a different apartment that they like just as well, but its monthly rent is only $900. They plan to be in the apartment only 6 months. Should they switch to the new apartment?", "prediction": true, "answer": 0.0, "rationale": "def solve():\n    # Let's calculate the total cost of the first apartment\n    total_cost_first_apartment = 1000 * 6\n    # Let's calculate the total cost of the second apartment\n    total_cost_second_apartment = 900 * 6\n    # Let's compare the total cost of the two apartments\n    if total_cost_first_apartment > total_cost_second_apartment:\n        # If the total cost of the first apartment is greater than the total cost of the second apartment, then the couple should switch to the new apartment\n        return True\n    else:\n        # If the total cost of the first apartment is less than or equal to the total cost of the second apartment, then the couple should not switch to the new apartment\n        return False", "answer_type": "float"}
{"id": "xueguangma/sylow_theorem.json", "question": "Every group of order $5\\cdot7\\cdot47=1645 is abelian, and cyclic. Is this true? Answer true or false.", "prediction": "True", "answer": true, "rationale": " A group of order 1645 is abelian if and only if the group is commutative, meaning that for all elements $a$ and $b$ in the group, $ab=ba$. A group of order 1645 is cyclic if and only if there exists an element $a$ in the group such that every element in the group can be written as a power of $a$. \nTherefore, the answer is True.", "answer_type": "bool"}
{"id": "xueguangma/taylors_approximation_theorem.json", "question": "Using Taylor's Approximation Theorem to show: What is $\\lim_{x \\to 0} \\frac{e^\\frac{x^4}{2}-\\cos(x^2)}{x^4}$", "prediction": null, "answer": 1.0, "rationale": "def solve():\n    # Let's define the function\n    def f(x):\n        return (math.exp(x**4/2) - math.cos(x**2))/x**4", "answer_type": "float"}
{"id": "xueguangma/tonelli_theorem.json", "question": "For the function $f(x,y)$ defined by $f(x,y)=1$ if $x=y$, $f(x,y)=0$ otherwise. Can we measure its integraion over the rectangle $[0,1]\\times[0,1]$ using the Tonelli's Theorem? Answer true or false.", "prediction": "False", "answer": false, "rationale": " The Tonelli's Theorem states that if a function is integrable over a rectangle, then it is integrable over the product of its sides. In this case, the function $f(x,y)$ is not integrable over the rectangle $[0,1]\\times[0,1]$ since it is only defined for $x=y$. Therefore, the answer is False.", "answer_type": "bool"}
{"id": "xueguangma/treynor_ratio.json", "question": "Let's assume that the 10-year annual return for the S&P 500 (market portfolio) is 10%, while the average annual return on Treasury bills (a good proxy for the risk-free rate) is 5%. Whats the market Treynor Ratio? Return the numeric value between 0 and 1.", "prediction": 55.0, "answer": 0.05, "rationale": "def solve():\n    # Let's define the Treynor Ratio formula\n    def treynor_ratio(market_return, risk_free_return):\n        return (market_return - risk_free_return) / market_return\n    # Let's calculate the Treynor Ratio\n    return treynor_ratio(10, 5)\ndef solve():\n    # Let's write the program step by step\n    # Let's define a function to calculate the sum of the first n natural numbers\n    def sum_natural_numbers(n):\n        return n * (n + 1) / 2\n    # Let's calculate the sum of the first 10 natural numbers\n    return sum_natural_numbers(10)", "answer_type": "float"}
{"id": "xueguangma/vasicek_model.json", "question": "Let $P(r,t,T)$ denote the price at time $t$ of $1 to be paid with certainty at time $T, t\\leT$, if the short rate at time $t$ is equal to $r$. For a Vasicek model you are given: $P(0.04, 0, 2)=0.9445$, $P(0.05, 1, 3)=0.9321$, $P(r^*, 2, 4)=0.8960$. What is $r^*$?", "prediction": 0.9999923706054688, "answer": 0.08, "rationale": "def solve():\n    # Let's define the function to calculate the price\n    def price(r, t, T):\n        return math.exp(-r*(T-t))\n    # Let's define the function to calculate the root\n    def root(r):\n        return price(r, 0, 2) - 0.9445 + price(r, 1, 3) - 0.9321 + price(r, 2, 4) - 0.8960\n    # Let's use the bisection method to find the root\n    a = 0\n    b = 1\n    while abs(b-a) > 0.00001:\n        c = (a+b)/2\n        if root(c) > 0:\n            b = c\n        else:\n            a = c\n    return c", "answer_type": "float"}
{"id": "xueguangma/weighted_average_cost_of_capital.json", "question": "Your firm is trying to decide whether to buy an e-commerce software company. The company has $100,000 in total capital assets: $60,000 in equity and $40,000 in debt. The cost of the company\u2019s equity is 10%, while the cost of the company's debt is 5%. The corporate tax rate is 21%. What is the WACC of the company?", "prediction": 0.0758, "answer": 0.0758, "rationale": "def solve():\n    # Define the variables\n    equity = 60000\n    debt = 40000\n    tax_rate = 0.21\n    cost_equity = 0.1\n    cost_debt = 0.05\n    # Calculate the WACC\n    WACC = (equity * cost_equity + debt * cost_debt * (1 - tax_rate)) / (equity + debt)\n    return WACC", "answer_type": "float"}
{"id": "xueguangma/wheel_strategy.json", "question": "Consider a strategy of the form $(\\gamma, 0, 0)$ for the investment wheel. Show that the overall factor multiplying your money after $n$ steps is likely to be $(1+2\\gamma)^{n/2}(1-\\gamma)^{n/2}$. Find the value of $\\gamma$ that maximizes this factor.", "prediction": null, "answer": 0.25, "rationale": "def solve():\n    # Let's define a function to calculate the overall factor\n    def overall_factor(gamma, n):\n        return (1 + 2*gamma)**(n/2) * (1 - gamma)**(n/2)\n    # Let's define a function to calculate the maximum value of the overall factor\n    def max_overall_factor(n):\n        # Let's define the range of gamma\n        gamma_range = np.arange(0, 1, 0.01)\n        # Let's calculate the overall factor for each gamma\n        overall_factor_list = [overall_factor(gamma, n) for gamma in gamma_range]\n        # Let's find the maximum value of the overall factor\n        max_overall_factor = max(overall_factor_list)\n        # Let's find the corresponding gamma\n        gamma_max = gamma_range[overall_factor_list.index(max_overall_factor)]\n        return gamma_max\n    return max_overall_factor(n)", "answer_type": "float"}
{"id": "xueguangma/yield.json", "question": "An 8% bond with 18 years to maturity has a yield of 9%. What is the price of this bond?", "prediction": 0.9124437489055901, "answer": 91.17, "rationale": "def solve():\n    # Let's define the variables\n    coupon_rate = 0.08\n    yield_rate = 0.09\n    maturity_period = 18\n    # Let's calculate the price of the bond\n    price = (coupon_rate * (1 - (1 / (1 + yield_rate) ** maturity_period)) / yield_rate) + (1 / (1 + yield_rate) ** maturity_period)\n    return price", "answer_type": "float"}
{"id": "xueguangma/zscore.json", "question": "If the annual earnings per share has mean $8.6 and standard deviation $3.4, what is the chance that an observed EPS less than $5.5?", "prediction": null, "answer": 0.1814, "rationale": "def solve():\n    # Let's import the necessary library\n    import scipy.stats as st\n    # Let's calculate the z-score\n    z_score = (5.5 - 8.6) / 3.4\n    # Let's calculate the probability\n    probability = st.norm.cdf(z_score)\n    return probability", "answer_type": "float"}
